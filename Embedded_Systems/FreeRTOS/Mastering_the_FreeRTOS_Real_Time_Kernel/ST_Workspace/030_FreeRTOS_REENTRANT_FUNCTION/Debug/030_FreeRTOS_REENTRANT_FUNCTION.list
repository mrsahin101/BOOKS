
030_FreeRTOS_REENTRANT_FUNCTION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a4  080056a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056ac  080056ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080056b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000eb8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f2c  20000f2c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019376  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000325e  00000000  00000000  0003941a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003daa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fbf  00000000  00000000  0003edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ed8  00000000  00000000  00041d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d419a  00000000  00000000  00057c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bdf1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005870  00000000  00000000  0012be44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055fc 	.word	0x080055fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080055fc 	.word	0x080055fc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa86 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f808 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f89a 	bl	8000618 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f86e 	bl	80005c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  vTaskStartScheduler();
 80004e8:	f003 fbf2 	bl	8003cd0 <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x18>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 ffb2 	bl	8005468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a27      	ldr	r2, [pc, #156]	; (80005bc <SystemClock_Config+0xcc>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <SystemClock_Config+0xd0>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000560:	2308      	movs	r3, #8
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000564:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fdc6 	bl	8001108 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000582:	f000 f8c5 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000592:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2105      	movs	r1, #5
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f827 	bl	80015f8 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b0:	f000 f8ae 	bl	8000710 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	; 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005fc:	f001 fcfc 	bl	8001ff8 <HAL_UART_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000606:	f000 f883 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000090 	.word	0x20000090
 8000614:	40004400 	.word	0x40004400

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000688:	4816      	ldr	r0, [pc, #88]	; (80006e4 <MX_GPIO_Init+0xcc>)
 800068a:	f000 fcff 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068e:	2301      	movs	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000692:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <MX_GPIO_Init+0xd0>)
 80006a4:	f000 fb56 	bl	8000d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006a8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <MX_GPIO_Init+0xcc>)
 80006c2:	f000 fb47 	bl	8000d54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2105      	movs	r1, #5
 80006ca:	2006      	movs	r0, #6
 80006cc:	f000 fa86 	bl	8000bdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006d0:	2006      	movs	r0, #6
 80006d2:	f000 fa9f 	bl	8000c14 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	bf00      	nop
 80006d8:	3720      	adds	r7, #32
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	40020000 	.word	0x40020000

080006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d101      	bne.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fe:	f000 f995 	bl	8000a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40002000 	.word	0x40002000

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_MspInit+0x54>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a11      	ldr	r2, [pc, #68]	; (8000770 <HAL_MspInit+0x54>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_MspInit+0x54>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <HAL_MspInit+0x54>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_MspInit+0x54>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_MspInit+0x54>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	210f      	movs	r1, #15
 800075e:	f06f 0001 	mvn.w	r0, #1
 8000762:	f000 fa3b 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <HAL_UART_MspInit+0x94>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d133      	bne.n	80007fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <HAL_UART_MspInit+0x98>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <HAL_UART_MspInit+0x98>)
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_UART_MspInit+0x98>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_UART_MspInit+0x98>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <HAL_UART_MspInit+0x98>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_UART_MspInit+0x98>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ce:	230c      	movs	r3, #12
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007de:	2307      	movs	r3, #7
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <HAL_UART_MspInit+0x9c>)
 80007ea:	f000 fab3 	bl	8000d54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	2026      	movs	r0, #38	; 0x26
 80007f4:	f000 f9f2 	bl	8000bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007f8:	2026      	movs	r0, #38	; 0x26
 80007fa:	f000 fa0b 	bl	8000c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40004400 	.word	0x40004400
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000

08000814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <HAL_InitTick+0xe4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a32      	ldr	r2, [pc, #200]	; (80008f8 <HAL_InitTick+0xe4>)
 800082e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <HAL_InitTick+0xe4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000840:	f107 0210 	add.w	r2, r7, #16
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f8f4 	bl	8001a38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	2b00      	cmp	r3, #0
 8000858:	d103      	bne.n	8000862 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800085a:	f001 f8c5 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 800085e:	6378      	str	r0, [r7, #52]	; 0x34
 8000860:	e004      	b.n	800086c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000862:	f001 f8c1 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8000866:	4603      	mov	r3, r0
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086e:	4a23      	ldr	r2, [pc, #140]	; (80008fc <HAL_InitTick+0xe8>)
 8000870:	fba2 2303 	umull	r2, r3, r2, r3
 8000874:	0c9b      	lsrs	r3, r3, #18
 8000876:	3b01      	subs	r3, #1
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <HAL_InitTick+0xec>)
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <HAL_InitTick+0xf0>)
 800087e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <HAL_InitTick+0xec>)
 8000882:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000886:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_InitTick+0xec>)
 800088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_InitTick+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <HAL_InitTick+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_InitTick+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80008a0:	4817      	ldr	r0, [pc, #92]	; (8000900 <HAL_InitTick+0xec>)
 80008a2:	f001 f8fb 	bl	8001a9c <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d11b      	bne.n	80008ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80008b4:	4812      	ldr	r0, [pc, #72]	; (8000900 <HAL_InitTick+0xec>)
 80008b6:	f001 f94b 	bl	8001b50 <HAL_TIM_Base_Start_IT>
 80008ba:	4603      	mov	r3, r0
 80008bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d111      	bne.n	80008ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80008c8:	202d      	movs	r0, #45	; 0x2d
 80008ca:	f000 f9a3 	bl	8000c14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d808      	bhi.n	80008e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	202d      	movs	r0, #45	; 0x2d
 80008da:	f000 f97f 	bl	8000bdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_InitTick+0xf4>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	e002      	b.n	80008ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3738      	adds	r7, #56	; 0x38
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	200000d4 	.word	0x200000d4
 8000904:	40002000 	.word	0x40002000
 8000908:	20000004 	.word	0x20000004

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800093c:	2001      	movs	r0, #1
 800093e:	f000 fbbf 	bl	80010c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <USART2_IRQHandler+0x10>)
 800094e:	f001 fba1 	bl	8002094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000090 	.word	0x20000090

0800095c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000962:	f001 f965 	bl	8001c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000d4 	.word	0x200000d4

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009be:	f7ff ffd7 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f004 fd1d 	bl	8005400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff fd85 	bl	80004d4 <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009d8:	080056b4 	.word	0x080056b4
  ldr r2, =_sbss
 80009dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009e0:	20000f2c 	.word	0x20000f2c

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_Init+0x40>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_Init+0x40>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x40>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f8d8 	bl	8000bc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f7ff fefc 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fe7e 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	2000011c 	.word	0x2000011c

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	2000011c 	.word	0x2000011c

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff4c 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bee:	f7ff ff61 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000bf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff ffb1 	bl	8000b60 <NVIC_EncodePriority>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff80 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff54 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c3e:	f7ff ff09 	bl	8000a54 <HAL_GetTick>
 8000c42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d008      	beq.n	8000c62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e052      	b.n	8000d08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 0216 	bic.w	r2, r2, #22
 8000c70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d103      	bne.n	8000c92 <HAL_DMA_Abort+0x62>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 0208 	bic.w	r2, r2, #8
 8000ca0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0201 	bic.w	r2, r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cb2:	e013      	b.n	8000cdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cb4:	f7ff fece 	bl	8000a54 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d90c      	bls.n	8000cdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2203      	movs	r2, #3
 8000ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e015      	b.n	8000d08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1e4      	bne.n	8000cb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cee:	223f      	movs	r2, #63	; 0x3f
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d004      	beq.n	8000d2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00c      	b.n	8000d48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2205      	movs	r2, #5
 8000d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0201 	bic.w	r2, r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	e16b      	b.n	8001048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	f040 815a 	bne.w	8001042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d005      	beq.n	8000da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d130      	bne.n	8000e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 0201 	and.w	r2, r3, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d017      	beq.n	8000e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	69b9      	ldr	r1, [r7, #24]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80b4 	beq.w	8001042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b60      	ldr	r3, [pc, #384]	; (8001060 <HAL_GPIO_Init+0x30c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a5f      	ldr	r2, [pc, #380]	; (8001060 <HAL_GPIO_Init+0x30c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <HAL_GPIO_Init+0x30c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a52      	ldr	r2, [pc, #328]	; (8001068 <HAL_GPIO_Init+0x314>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d02b      	beq.n	8000f7a <HAL_GPIO_Init+0x226>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a51      	ldr	r2, [pc, #324]	; (800106c <HAL_GPIO_Init+0x318>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d025      	beq.n	8000f76 <HAL_GPIO_Init+0x222>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a50      	ldr	r2, [pc, #320]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01f      	beq.n	8000f72 <HAL_GPIO_Init+0x21e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <HAL_GPIO_Init+0x320>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x21a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x216>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4d      	ldr	r2, [pc, #308]	; (800107c <HAL_GPIO_Init+0x328>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x212>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <HAL_GPIO_Init+0x32c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x20a>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00e      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f5e:	2308      	movs	r3, #8
 8000f60:	e00c      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00a      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f66:	2305      	movs	r3, #5
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <HAL_GPIO_Init+0x334>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fbe:	4a32      	ldr	r2, [pc, #200]	; (8001088 <HAL_GPIO_Init+0x334>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <HAL_GPIO_Init+0x334>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <HAL_GPIO_Init+0x334>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <HAL_GPIO_Init+0x334>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001012:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <HAL_GPIO_Init+0x334>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_GPIO_Init+0x334>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <HAL_GPIO_Init+0x334>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f ae90 	bls.w	8000d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40021400 	.word	0x40021400
 8001080:	40021800 	.word	0x40021800
 8001084:	40021c00 	.word	0x40021c00
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f806 	bl	80010f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e267      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d075      	beq.n	8001212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001126:	4b88      	ldr	r3, [pc, #544]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b04      	cmp	r3, #4
 8001130:	d00c      	beq.n	800114c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b85      	ldr	r3, [pc, #532]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113a:	2b08      	cmp	r3, #8
 800113c:	d112      	bne.n	8001164 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113e:	4b82      	ldr	r3, [pc, #520]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800114a:	d10b      	bne.n	8001164 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	4b7e      	ldr	r3, [pc, #504]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d05b      	beq.n	8001210 <HAL_RCC_OscConfig+0x108>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d157      	bne.n	8001210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e242      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d106      	bne.n	800117c <HAL_RCC_OscConfig+0x74>
 800116e:	4b76      	ldr	r3, [pc, #472]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a75      	ldr	r2, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e01d      	b.n	80011b8 <HAL_RCC_OscConfig+0xb0>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x98>
 8001186:	4b70      	ldr	r3, [pc, #448]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6f      	ldr	r2, [pc, #444]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b6d      	ldr	r3, [pc, #436]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6c      	ldr	r2, [pc, #432]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0xb0>
 80011a0:	4b69      	ldr	r3, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a68      	ldr	r2, [pc, #416]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b66      	ldr	r3, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a65      	ldr	r2, [pc, #404]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fc48 	bl	8000a54 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fc44 	bl	8000a54 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e207      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b5b      	ldr	r3, [pc, #364]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0xc0>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc34 	bl	8000a54 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fc30 	bl	8000a54 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e1f3      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001202:	4b51      	ldr	r3, [pc, #324]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0xe8>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d063      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121e:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d11c      	bne.n	8001270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x152>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e1c7      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4937      	ldr	r1, [pc, #220]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	e03a      	b.n	80012e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001278:	4b34      	ldr	r3, [pc, #208]	; (800134c <HAL_RCC_OscConfig+0x244>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff fbe9 	bl	8000a54 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fbe5 	bl	8000a54 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e1a8      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4925      	ldr	r1, [pc, #148]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_RCC_OscConfig+0x244>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fbc8 	bl	8000a54 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff fbc4 	bl	8000a54 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e187      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d036      	beq.n	8001360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d016      	beq.n	8001328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_RCC_OscConfig+0x248>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001300:	f7ff fba8 	bl	8000a54 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fba4 	bl	8000a54 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e167      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_OscConfig+0x240>)
 800131c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x200>
 8001326:	e01b      	b.n	8001360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_RCC_OscConfig+0x248>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fb91 	bl	8000a54 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	e00e      	b.n	8001354 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001336:	f7ff fb8d 	bl	8000a54 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d907      	bls.n	8001354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e150      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
 8001348:	40023800 	.word	0x40023800
 800134c:	42470000 	.word	0x42470000
 8001350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1ea      	bne.n	8001336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8097 	beq.w	800149c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b81      	ldr	r3, [pc, #516]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10f      	bne.n	800139e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b7d      	ldr	r3, [pc, #500]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a7c      	ldr	r2, [pc, #496]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139e:	4b77      	ldr	r3, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x474>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d118      	bne.n	80013dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013aa:	4b74      	ldr	r3, [pc, #464]	; (800157c <HAL_RCC_OscConfig+0x474>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a73      	ldr	r2, [pc, #460]	; (800157c <HAL_RCC_OscConfig+0x474>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb4d 	bl	8000a54 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013be:	f7ff fb49 	bl	8000a54 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e10c      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	4b6a      	ldr	r3, [pc, #424]	; (800157c <HAL_RCC_OscConfig+0x474>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x2ea>
 80013e4:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a63      	ldr	r2, [pc, #396]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
 80013f0:	e01c      	b.n	800142c <HAL_RCC_OscConfig+0x324>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x30c>
 80013fa:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a5e      	ldr	r2, [pc, #376]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a5b      	ldr	r2, [pc, #364]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0x324>
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a57      	ldr	r2, [pc, #348]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
 8001420:	4b55      	ldr	r3, [pc, #340]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a54      	ldr	r2, [pc, #336]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 0304 	bic.w	r3, r3, #4
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d015      	beq.n	8001460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fb0e 	bl	8000a54 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff fb0a 	bl	8000a54 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e0cb      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0ee      	beq.n	800143c <HAL_RCC_OscConfig+0x334>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff faf8 	bl	8000a54 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	e00a      	b.n	800147e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff faf4 	bl	8000a54 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	; 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0b5      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ee      	bne.n	8001468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a38      	ldr	r2, [pc, #224]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a1 	beq.w	80015e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d05c      	beq.n	800156c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d141      	bne.n	800153e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <HAL_RCC_OscConfig+0x478>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fac8 	bl	8000a54 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fac4 	bl	8000a54 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e087      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	019b      	lsls	r3, r3, #6
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	085b      	lsrs	r3, r3, #1
 80014fe:	3b01      	subs	r3, #1
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	491b      	ldr	r1, [pc, #108]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x478>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fa9d 	bl	8000a54 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fa99 	bl	8000a54 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e05c      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x416>
 800153c:	e054      	b.n	80015e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_OscConfig+0x478>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fa86 	bl	8000a54 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fa82 	bl	8000a54 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e045      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_RCC_OscConfig+0x470>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x444>
 800156a:	e03d      	b.n	80015e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e038      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000
 8001580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_RCC_OscConfig+0x4ec>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d028      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d121      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d11a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015b4:	4013      	ands	r3, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015bc:	4293      	cmp	r3, r2
 80015be:	d111      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	3b01      	subs	r3, #1
 80015ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0cc      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800160c:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d90c      	bls.n	8001634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0b8      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800164c:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a58      	ldr	r2, [pc, #352]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001664:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800166e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	494d      	ldr	r1, [pc, #308]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d044      	beq.n	8001718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d119      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e07f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d003      	beq.n	80016b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e06f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e067      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 0203 	bic.w	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4934      	ldr	r1, [pc, #208]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e8:	f7ff f9b4 	bl	8000a54 <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f0:	f7ff f9b0 	bl	8000a54 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e04f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 020c 	and.w	r2, r3, #12
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	429a      	cmp	r2, r3
 8001716:	d1eb      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d20c      	bcs.n	8001740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e032      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4916      	ldr	r1, [pc, #88]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	490e      	ldr	r1, [pc, #56]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800177e:	f000 f821 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001782:	4602      	mov	r2, r0
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	490a      	ldr	r1, [pc, #40]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	5ccb      	ldrb	r3, [r1, r3]
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f838 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00
 80017b4:	40023800 	.word	0x40023800
 80017b8:	0800562c 	.word	0x0800562c
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c8:	b094      	sub	sp, #80	; 0x50
 80017ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	647b      	str	r3, [r7, #68]	; 0x44
 80017d0:	2300      	movs	r3, #0
 80017d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017d4:	2300      	movs	r3, #0
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017dc:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d00d      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x40>
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	f200 80e1 	bhi.w	80019b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x34>
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_GetSysClockFreq+0x3a>
 80017f6:	e0db      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017fc:	e0db      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017fe:	4b73      	ldr	r3, [pc, #460]	; (80019cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001800:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001802:	e0d8      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001804:	4b6f      	ldr	r3, [pc, #444]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800180c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800180e:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181a:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	099b      	lsrs	r3, r3, #6
 8001820:	2200      	movs	r2, #0
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
 8001824:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
 8001832:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001836:	4622      	mov	r2, r4
 8001838:	462b      	mov	r3, r5
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	0159      	lsls	r1, r3, #5
 8001844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001848:	0150      	lsls	r0, r2, #5
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4621      	mov	r1, r4
 8001850:	1a51      	subs	r1, r2, r1
 8001852:	6139      	str	r1, [r7, #16]
 8001854:	4629      	mov	r1, r5
 8001856:	eb63 0301 	sbc.w	r3, r3, r1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001868:	4659      	mov	r1, fp
 800186a:	018b      	lsls	r3, r1, #6
 800186c:	4651      	mov	r1, sl
 800186e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001872:	4651      	mov	r1, sl
 8001874:	018a      	lsls	r2, r1, #6
 8001876:	4651      	mov	r1, sl
 8001878:	ebb2 0801 	subs.w	r8, r2, r1
 800187c:	4659      	mov	r1, fp
 800187e:	eb63 0901 	sbc.w	r9, r3, r1
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800188e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001896:	4690      	mov	r8, r2
 8001898:	4699      	mov	r9, r3
 800189a:	4623      	mov	r3, r4
 800189c:	eb18 0303 	adds.w	r3, r8, r3
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	462b      	mov	r3, r5
 80018a4:	eb49 0303 	adc.w	r3, r9, r3
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018b6:	4629      	mov	r1, r5
 80018b8:	024b      	lsls	r3, r1, #9
 80018ba:	4621      	mov	r1, r4
 80018bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018c0:	4621      	mov	r1, r4
 80018c2:	024a      	lsls	r2, r1, #9
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ca:	2200      	movs	r2, #0
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018d4:	f7fe fc7c 	bl	80001d0 <__aeabi_uldivmod>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4613      	mov	r3, r2
 80018de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018e0:	e058      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	2200      	movs	r2, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	4611      	mov	r1, r2
 80018ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
 80018f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018fc:	4642      	mov	r2, r8
 80018fe:	464b      	mov	r3, r9
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	0159      	lsls	r1, r3, #5
 800190a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190e:	0150      	lsls	r0, r2, #5
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4641      	mov	r1, r8
 8001916:	ebb2 0a01 	subs.w	sl, r2, r1
 800191a:	4649      	mov	r1, r9
 800191c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800192c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001934:	ebb2 040a 	subs.w	r4, r2, sl
 8001938:	eb63 050b 	sbc.w	r5, r3, fp
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	00eb      	lsls	r3, r5, #3
 8001946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800194a:	00e2      	lsls	r2, r4, #3
 800194c:	4614      	mov	r4, r2
 800194e:	461d      	mov	r5, r3
 8001950:	4643      	mov	r3, r8
 8001952:	18e3      	adds	r3, r4, r3
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	464b      	mov	r3, r9
 8001958:	eb45 0303 	adc.w	r3, r5, r3
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800196a:	4629      	mov	r1, r5
 800196c:	028b      	lsls	r3, r1, #10
 800196e:	4621      	mov	r1, r4
 8001970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001974:	4621      	mov	r1, r4
 8001976:	028a      	lsls	r2, r1, #10
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197e:	2200      	movs	r2, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	61fa      	str	r2, [r7, #28]
 8001984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001988:	f7fe fc22 	bl	80001d0 <__aeabi_uldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4613      	mov	r3, r2
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	3301      	adds	r3, #1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ae:	e002      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3750      	adds	r7, #80	; 0x50
 80019bc:	46bd      	mov	sp, r7
 80019be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	00f42400 	.word	0x00f42400
 80019cc:	007a1200 	.word	0x007a1200

080019d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000000 	.word	0x20000000

080019e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019ec:	f7ff fff0 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	0a9b      	lsrs	r3, r3, #10
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4903      	ldr	r1, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	0800563c 	.word	0x0800563c

08001a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a14:	f7ff ffdc 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	0b5b      	lsrs	r3, r3, #13
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	4903      	ldr	r1, [pc, #12]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	0800563c 	.word	0x0800563c

08001a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	220f      	movs	r2, #15
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_RCC_GetClockConfig+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_RCC_GetClockConfig+0x60>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0207 	and.w	r2, r3, #7
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e041      	b.n	8001b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f839 	bl	8001b3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f000 f9d8 	bl	8001e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d001      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e04e      	b.n	8001c06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d022      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b92:	d01d      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d018      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d009      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d111      	bne.n	8001bf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d010      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0201 	orr.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf2:	e007      	b.n	8001c04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40010000 	.word	0x40010000
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40000800 	.word	0x40000800
 8001c20:	40000c00 	.word	0x40000c00
 8001c24:	40010400 	.word	0x40010400
 8001c28:	40014000 	.word	0x40014000
 8001c2c:	40001800 	.word	0x40001800

08001c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0202 	mvn.w	r2, #2
 8001c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f8ee 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8e0 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8f1 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0204 	mvn.w	r2, #4
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8c4 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8b6 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8c7 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d122      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d11b      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0208 	mvn.w	r2, #8
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f89a 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f88c 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f89d 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0210 	mvn.w	r2, #16
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f870 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f862 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f873 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0201 	mvn.w	r2, #1
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fc9c 	bl	80006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	2b80      	cmp	r3, #128	; 0x80
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f902 	bl	8001fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b40      	cmp	r3, #64	; 0x40
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f838 	bl	8001e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0220 	mvn.w	r2, #32
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8cc 	bl	8001fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d00f      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3d      	ldr	r2, [pc, #244]	; (8001fa8 <TIM_Base_SetConfig+0x118>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00b      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3c      	ldr	r2, [pc, #240]	; (8001fac <TIM_Base_SetConfig+0x11c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	; (8001fb0 <TIM_Base_SetConfig+0x120>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d027      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <TIM_Base_SetConfig+0x118>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d023      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <TIM_Base_SetConfig+0x11c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01f      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <TIM_Base_SetConfig+0x120>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d017      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <TIM_Base_SetConfig+0x128>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <TIM_Base_SetConfig+0x12c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00f      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <TIM_Base_SetConfig+0x130>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <TIM_Base_SetConfig+0x134>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <TIM_Base_SetConfig+0x138>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d003      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <TIM_Base_SetConfig+0x13c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d108      	bne.n	8001f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_Base_SetConfig+0xf8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d103      	bne.n	8001f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	615a      	str	r2, [r3, #20]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800
 8001fb0:	40000c00 	.word	0x40000c00
 8001fb4:	40010400 	.word	0x40010400
 8001fb8:	40014000 	.word	0x40014000
 8001fbc:	40014400 	.word	0x40014400
 8001fc0:	40014800 	.word	0x40014800
 8001fc4:	40001800 	.word	0x40001800
 8001fc8:	40001c00 	.word	0x40001c00
 8001fcc:	40002000 	.word	0x40002000

08001fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e03f      	b.n	800208a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fba8 	bl	8000774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800203a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fc7b 	bl	8002938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0ba      	sub	sp, #232	; 0xe8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80020d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_UART_IRQHandler+0x66>
 80020e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fb65 	bl	80027c2 <UART_Receive_IT>
      return;
 80020f8:	e256      	b.n	80025a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80de 	beq.w	80022c0 <HAL_UART_IRQHandler+0x22c>
 8002104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002114:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80d1 	beq.w	80022c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800211e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_UART_IRQHandler+0xae>
 800212a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_UART_IRQHandler+0xd2>
 800214e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f043 0202 	orr.w	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_UART_IRQHandler+0xf6>
 8002172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f043 0204 	orr.w	r2, r3, #4
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800218a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d011      	beq.n	80021ba <HAL_UART_IRQHandler+0x126>
 8002196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f043 0208 	orr.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 81ed 	beq.w	800259e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_UART_IRQHandler+0x14e>
 80021d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 faf0 	bl	80027c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <HAL_UART_IRQHandler+0x17a>
 8002206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d04f      	beq.n	80022ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9f8 	bl	8002604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d141      	bne.n	80022a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3314      	adds	r3, #20
 8002228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002230:	e853 3f00 	ldrex	r3, [r3]
 8002234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800223c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3314      	adds	r3, #20
 800224a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800224e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800225a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800225e:	e841 2300 	strex	r3, r2, [r1]
 8002262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1d9      	bne.n	8002222 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	2b00      	cmp	r3, #0
 8002274:	d013      	beq.n	800229e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	4a7d      	ldr	r2, [pc, #500]	; (8002470 <HAL_UART_IRQHandler+0x3dc>)
 800227c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fd44 	bl	8000d10 <HAL_DMA_Abort_IT>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d016      	beq.n	80022bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002298:	4610      	mov	r0, r2
 800229a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229c:	e00e      	b.n	80022bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f99a 	bl	80025d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a4:	e00a      	b.n	80022bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f996 	bl	80025d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ac:	e006      	b.n	80022bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f992 	bl	80025d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80022ba:	e170      	b.n	800259e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022bc:	bf00      	nop
    return;
 80022be:	e16e      	b.n	800259e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	f040 814a 	bne.w	800255e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8143 	beq.w	800255e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 813c 	beq.w	800255e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b40      	cmp	r3, #64	; 0x40
 8002308:	f040 80b4 	bne.w	8002474 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002318:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8140 	beq.w	80025a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800232a:	429a      	cmp	r2, r3
 800232c:	f080 8139 	bcs.w	80025a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002336:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002342:	f000 8088 	beq.w	8002456 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002354:	e853 3f00 	ldrex	r3, [r3]
 8002358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800235c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	330c      	adds	r3, #12
 800236e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800237e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002382:	e841 2300 	strex	r3, r2, [r1]
 8002386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800238a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1d9      	bne.n	8002346 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3314      	adds	r3, #20
 8002398:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800239c:	e853 3f00 	ldrex	r3, [r3]
 80023a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80023a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3314      	adds	r3, #20
 80023b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80023ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80023be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80023c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e1      	bne.n	8002392 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3314      	adds	r3, #20
 80023d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023d8:	e853 3f00 	ldrex	r3, [r3]
 80023dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80023de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3314      	adds	r3, #20
 80023ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023fa:	e841 2300 	strex	r3, r2, [r1]
 80023fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e3      	bne.n	80023ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241e:	e853 3f00 	ldrex	r3, [r3]
 8002422:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002426:	f023 0310 	bic.w	r3, r3, #16
 800242a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002438:	65ba      	str	r2, [r7, #88]	; 0x58
 800243a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800243e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002440:	e841 2300 	strex	r3, r2, [r1]
 8002444:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e3      	bne.n	8002414 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fbed 	bl	8000c30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800245e:	b29b      	uxth	r3, r3
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	b29b      	uxth	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f8c0 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800246c:	e099      	b.n	80025a2 <HAL_UART_IRQHandler+0x50e>
 800246e:	bf00      	nop
 8002470:	080026cb 	.word	0x080026cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800247c:	b29b      	uxth	r3, r3
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 808b 	beq.w	80025a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8086 	beq.w	80025a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	e853 3f00 	ldrex	r3, [r3]
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80024aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80024be:	647a      	str	r2, [r7, #68]	; 0x44
 80024c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024c6:	e841 2300 	strex	r3, r2, [r1]
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1e3      	bne.n	800249a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3314      	adds	r3, #20
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	623b      	str	r3, [r7, #32]
   return(result);
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3314      	adds	r3, #20
 80024f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024f6:	633a      	str	r2, [r7, #48]	; 0x30
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e3      	bne.n	80024d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	e853 3f00 	ldrex	r3, [r3]
 8002526:	60fb      	str	r3, [r7, #12]
   return(result);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800253c:	61fa      	str	r2, [r7, #28]
 800253e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	69b9      	ldr	r1, [r7, #24]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	e841 2300 	strex	r3, r2, [r1]
 8002548:	617b      	str	r3, [r7, #20]
   return(result);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e3      	bne.n	8002518 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f848 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800255c:	e023      	b.n	80025a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_UART_IRQHandler+0x4ea>
 800256a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8bb 	bl	80026f2 <UART_Transmit_IT>
    return;
 800257c:	e014      	b.n	80025a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800257e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00e      	beq.n	80025a8 <HAL_UART_IRQHandler+0x514>
 800258a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8fb 	bl	8002792 <UART_EndTransmit_IT>
    return;
 800259c:	e004      	b.n	80025a8 <HAL_UART_IRQHandler+0x514>
    return;
 800259e:	bf00      	nop
 80025a0:	e002      	b.n	80025a8 <HAL_UART_IRQHandler+0x514>
      return;
 80025a2:	bf00      	nop
 80025a4:	e000      	b.n	80025a8 <HAL_UART_IRQHandler+0x514>
      return;
 80025a6:	bf00      	nop
  }
}
 80025a8:	37e8      	adds	r7, #232	; 0xe8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop

080025b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002604:	b480      	push	{r7}
 8002606:	b095      	sub	sp, #84	; 0x54
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	e853 3f00 	ldrex	r3, [r3]
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800262c:	643a      	str	r2, [r7, #64]	; 0x40
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002634:	e841 2300 	strex	r3, r2, [r1]
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e5      	bne.n	800260c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3314      	adds	r3, #20
 8002646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3314      	adds	r3, #20
 800265e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	2b01      	cmp	r3, #1
 800267a:	d119      	bne.n	80026b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	330c      	adds	r3, #12
 8002682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	e853 3f00 	ldrex	r3, [r3]
 800268a:	60bb      	str	r3, [r7, #8]
   return(result);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f023 0310 	bic.w	r3, r3, #16
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800269c:	61ba      	str	r2, [r7, #24]
 800269e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a0:	6979      	ldr	r1, [r7, #20]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	e841 2300 	strex	r3, r2, [r1]
 80026a8:	613b      	str	r3, [r7, #16]
   return(result);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e5      	bne.n	800267c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026be:	bf00      	nop
 80026c0:	3754      	adds	r7, #84	; 0x54
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7ff ff77 	bl	80025d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b21      	cmp	r3, #33	; 0x21
 8002704:	d13e      	bne.n	8002784 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	d114      	bne.n	800273a <UART_Transmit_IT+0x48>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d110      	bne.n	800273a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800272c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	1c9a      	adds	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	621a      	str	r2, [r3, #32]
 8002738:	e008      	b.n	800274c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	1c59      	adds	r1, r3, #1
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6211      	str	r1, [r2, #32]
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29b      	uxth	r3, r3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4619      	mov	r1, r3
 800275a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10f      	bne.n	8002780 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800276e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800277e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fefc 	bl	80025b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b08c      	sub	sp, #48	; 0x30
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b22      	cmp	r3, #34	; 0x22
 80027d4:	f040 80ab 	bne.w	800292e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e0:	d117      	bne.n	8002812 <UART_Receive_IT+0x50>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d113      	bne.n	8002812 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002800:	b29a      	uxth	r2, r3
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	1c9a      	adds	r2, r3, #2
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
 8002810:	e026      	b.n	8002860 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002824:	d007      	beq.n	8002836 <UART_Receive_IT+0x74>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <UART_Receive_IT+0x82>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e008      	b.n	8002856 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002850:	b2da      	uxtb	r2, r3
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29b      	uxth	r3, r3
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4619      	mov	r1, r3
 800286e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002870:	2b00      	cmp	r3, #0
 8002872:	d15a      	bne.n	800292a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0220 	bic.w	r2, r2, #32
 8002882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d135      	bne.n	8002920 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	330c      	adds	r3, #12
 80028c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	613b      	str	r3, [r7, #16]
   return(result);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f023 0310 	bic.w	r3, r3, #16
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	623a      	str	r2, [r7, #32]
 80028dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	69f9      	ldr	r1, [r7, #28]
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e5      	bne.n	80028ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d10a      	bne.n	8002912 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fe67 	bl	80025ec <HAL_UARTEx_RxEventCallback>
 800291e:	e002      	b.n	8002926 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fe4f 	bl	80025c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e002      	b.n	8002930 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3730      	adds	r7, #48	; 0x30
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b0c0      	sub	sp, #256	; 0x100
 800293e:	af00      	add	r7, sp, #0
 8002940:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	68d9      	ldr	r1, [r3, #12]
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	ea40 0301 	orr.w	r3, r0, r1
 8002960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	431a      	orrs	r2, r3
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002990:	f021 010c 	bic.w	r1, r1, #12
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800299e:	430b      	orrs	r3, r1
 80029a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	6999      	ldr	r1, [r3, #24]
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	ea40 0301 	orr.w	r3, r0, r1
 80029be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <UART_SetConfig+0x2cc>)
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d005      	beq.n	80029d8 <UART_SetConfig+0xa0>
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b8d      	ldr	r3, [pc, #564]	; (8002c08 <UART_SetConfig+0x2d0>)
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d104      	bne.n	80029e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029d8:	f7ff f81a 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 80029dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029e0:	e003      	b.n	80029ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029e2:	f7ff f801 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 80029e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f4:	f040 810c 	bne.w	8002c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	1891      	adds	r1, r2, r2
 8002a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a12:	415b      	adcs	r3, r3
 8002a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	eb12 0801 	adds.w	r8, r2, r1
 8002a20:	4629      	mov	r1, r5
 8002a22:	eb43 0901 	adc.w	r9, r3, r1
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	4699      	mov	r9, r3
 8002a3e:	4623      	mov	r3, r4
 8002a40:	eb18 0303 	adds.w	r3, r8, r3
 8002a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a48:	462b      	mov	r3, r5
 8002a4a:	eb49 0303 	adc.w	r3, r9, r3
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a66:	460b      	mov	r3, r1
 8002a68:	18db      	adds	r3, r3, r3
 8002a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	eb42 0303 	adc.w	r3, r2, r3
 8002a72:	657b      	str	r3, [r7, #84]	; 0x54
 8002a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a7c:	f7fd fba8 	bl	80001d0 <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002a86:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	011c      	lsls	r4, r3, #4
 8002a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	1891      	adds	r1, r2, r2
 8002aa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002aa8:	415b      	adcs	r3, r3
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad0:	4692      	mov	sl, r2
 8002ad2:	469b      	mov	fp, r3
 8002ad4:	4643      	mov	r3, r8
 8002ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8002ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002afc:	460b      	mov	r3, r1
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	643b      	str	r3, [r7, #64]	; 0x40
 8002b02:	4613      	mov	r3, r2
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b12:	f7fd fb5d 	bl	80001d0 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2264      	movs	r2, #100	; 0x64
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	1acb      	subs	r3, r1, r3
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b32:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002b34:	fba3 2302 	umull	r2, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b40:	441c      	add	r4, r3
 8002b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b54:	4642      	mov	r2, r8
 8002b56:	464b      	mov	r3, r9
 8002b58:	1891      	adds	r1, r2, r2
 8002b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b5c:	415b      	adcs	r3, r3
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b64:	4641      	mov	r1, r8
 8002b66:	1851      	adds	r1, r2, r1
 8002b68:	6339      	str	r1, [r7, #48]	; 0x30
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	414b      	adcs	r3, r1
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	00cb      	lsls	r3, r1, #3
 8002b80:	4651      	mov	r1, sl
 8002b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b86:	4651      	mov	r1, sl
 8002b88:	00ca      	lsls	r2, r1, #3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4642      	mov	r2, r8
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b98:	464b      	mov	r3, r9
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bb8:	460b      	mov	r3, r1
 8002bba:	18db      	adds	r3, r3, r3
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bce:	f7fd faff 	bl	80001d0 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	2164      	movs	r1, #100	; 0x64
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	3332      	adds	r3, #50	; 0x32
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	f003 0207 	and.w	r2, r3, #7
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4422      	add	r2, r4
 8002bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c00:	e105      	b.n	8002e0e <UART_SetConfig+0x4d6>
 8002c02:	bf00      	nop
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40011400 	.word	0x40011400
 8002c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c22:	4642      	mov	r2, r8
 8002c24:	464b      	mov	r3, r9
 8002c26:	1891      	adds	r1, r2, r2
 8002c28:	6239      	str	r1, [r7, #32]
 8002c2a:	415b      	adcs	r3, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c32:	4641      	mov	r1, r8
 8002c34:	1854      	adds	r4, r2, r1
 8002c36:	4649      	mov	r1, r9
 8002c38:	eb43 0501 	adc.w	r5, r3, r1
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	00eb      	lsls	r3, r5, #3
 8002c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c4a:	00e2      	lsls	r2, r4, #3
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	4643      	mov	r3, r8
 8002c52:	18e3      	adds	r3, r4, r3
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c58:	464b      	mov	r3, r9
 8002c5a:	eb45 0303 	adc.w	r3, r5, r3
 8002c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c7e:	4629      	mov	r1, r5
 8002c80:	008b      	lsls	r3, r1, #2
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c88:	4621      	mov	r1, r4
 8002c8a:	008a      	lsls	r2, r1, #2
 8002c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c90:	f7fd fa9e 	bl	80001d0 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4b60      	ldr	r3, [pc, #384]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	011c      	lsls	r4, r3, #4
 8002ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	61b9      	str	r1, [r7, #24]
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	1851      	adds	r1, r2, r1
 8002cc8:	6139      	str	r1, [r7, #16]
 8002cca:	4649      	mov	r1, r9
 8002ccc:	414b      	adcs	r3, r1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cdc:	4659      	mov	r1, fp
 8002cde:	00cb      	lsls	r3, r1, #3
 8002ce0:	4651      	mov	r1, sl
 8002ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ce6:	4651      	mov	r1, sl
 8002ce8:	00ca      	lsls	r2, r1, #3
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cf8:	464b      	mov	r3, r9
 8002cfa:	460a      	mov	r2, r1
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	008b      	lsls	r3, r1, #2
 8002d20:	4641      	mov	r1, r8
 8002d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d26:	4641      	mov	r1, r8
 8002d28:	008a      	lsls	r2, r1, #2
 8002d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d2e:	f7fd fa4f 	bl	80001d0 <__aeabi_uldivmod>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002d38:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	2164      	movs	r1, #100	; 0x64
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	3332      	adds	r3, #50	; 0x32
 8002d4a:	4a34      	ldr	r2, [pc, #208]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d56:	441c      	add	r4, r3
 8002d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d60:	677a      	str	r2, [r7, #116]	; 0x74
 8002d62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d66:	4642      	mov	r2, r8
 8002d68:	464b      	mov	r3, r9
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d76:	4641      	mov	r1, r8
 8002d78:	1851      	adds	r1, r2, r1
 8002d7a:	6039      	str	r1, [r7, #0]
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	414b      	adcs	r3, r1
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d8e:	4659      	mov	r1, fp
 8002d90:	00cb      	lsls	r3, r1, #3
 8002d92:	4651      	mov	r1, sl
 8002d94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d98:	4651      	mov	r1, sl
 8002d9a:	00ca      	lsls	r2, r1, #3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4603      	mov	r3, r0
 8002da2:	4642      	mov	r2, r8
 8002da4:	189b      	adds	r3, r3, r2
 8002da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002da8:	464b      	mov	r3, r9
 8002daa:	460a      	mov	r2, r1
 8002dac:	eb42 0303 	adc.w	r3, r2, r3
 8002db0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	663b      	str	r3, [r7, #96]	; 0x60
 8002dbc:	667a      	str	r2, [r7, #100]	; 0x64
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dca:	4649      	mov	r1, r9
 8002dcc:	008b      	lsls	r3, r1, #2
 8002dce:	4641      	mov	r1, r8
 8002dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	008a      	lsls	r2, r1, #2
 8002dd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ddc:	f7fd f9f8 	bl	80001d0 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002de6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2164      	movs	r1, #100	; 0x64
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	3332      	adds	r3, #50	; 0x32
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	f003 020f 	and.w	r2, r3, #15
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4422      	add	r2, r4
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e14:	46bd      	mov	sp, r7
 8002e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1a:	bf00      	nop
 8002e1c:	51eb851f 	.word	0x51eb851f

08002e20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <SysTick_Handler+0x1c>)
 8002e26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e28:	f001 fbae 	bl	8004588 <xTaskGetSchedulerState>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d001      	beq.n	8002e36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e32:	f002 f999 	bl	8005168 <xPortSysTickHandler>
  }
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	e000e010 	.word	0xe000e010

08002e40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <vApplicationGetIdleTaskMemory+0x2c>)
 8002e50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <vApplicationGetIdleTaskMemory+0x30>)
 8002e56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	601a      	str	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000120 	.word	0x20000120
 8002e70:	200001dc 	.word	0x200001dc

08002e74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4a06      	ldr	r2, [pc, #24]	; (8002ea4 <vApplicationGetTimerTaskMemory+0x30>)
 8002e8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	200003dc 	.word	0x200003dc
 8002ea4:	20000498 	.word	0x20000498

08002ea8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f103 0208 	add.w	r2, r3, #8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f103 0208 	add.w	r2, r3, #8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f103 0208 	add.w	r2, r3, #8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d103      	bne.n	8002f6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e00c      	b.n	8002f84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e002      	b.n	8002f78 <vListInsert+0x2e>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d2f6      	bcs.n	8002f72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	601a      	str	r2, [r3, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6892      	ldr	r2, [r2, #8]
 8002fd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6852      	ldr	r2, [r2, #4]
 8002fdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d103      	bne.n	8002ff0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	1e5a      	subs	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800303a:	f002 f803 	bl	8005044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	3b01      	subs	r3, #1
 800306c:	68f9      	ldr	r1, [r7, #12]
 800306e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	441a      	add	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	22ff      	movs	r2, #255	; 0xff
 800307e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	22ff      	movs	r2, #255	; 0xff
 8003086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d114      	bne.n	80030ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01a      	beq.n	80030ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3310      	adds	r3, #16
 800309c:	4618      	mov	r0, r3
 800309e:	f001 f8b1 	bl	8004204 <xTaskRemoveFromEventList>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d012      	beq.n	80030ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <xQueueGenericReset+0xcc>)
 80030aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	e009      	b.n	80030ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3310      	adds	r3, #16
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fef2 	bl	8002ea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3324      	adds	r3, #36	; 0x24
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff feed 	bl	8002ea8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030ce:	f001 ffe9 	bl	80050a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	; 0x38
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <xQueueGenericCreateStatic+0x52>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <xQueueGenericCreateStatic+0x56>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <xQueueGenericCreateStatic+0x58>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	623b      	str	r3, [r7, #32]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <xQueueGenericCreateStatic+0x7e>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <xQueueGenericCreateStatic+0x82>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueGenericCreateStatic+0x84>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61fb      	str	r3, [r7, #28]
}
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800317e:	2350      	movs	r3, #80	; 0x50
 8003180:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b50      	cmp	r3, #80	; 0x50
 8003186:	d00a      	beq.n	800319e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	61bb      	str	r3, [r7, #24]
}
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800319e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f805 	bl	80031d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3730      	adds	r7, #48	; 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e002      	b.n	80031f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031fe:	2101      	movs	r1, #1
 8003200:	69b8      	ldr	r0, [r7, #24]
 8003202:	f7ff ff05 	bl	8003010 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08e      	sub	sp, #56	; 0x38
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003226:	2300      	movs	r3, #0
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xQueueGenericSend+0x32>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d103      	bne.n	8003258 <xQueueGenericSend+0x40>
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <xQueueGenericSend+0x44>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <xQueueGenericSend+0x46>
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <xQueueGenericSend+0x60>
	__asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003274:	bf00      	nop
 8003276:	e7fe      	b.n	8003276 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d103      	bne.n	8003286 <xQueueGenericSend+0x6e>
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <xQueueGenericSend+0x72>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <xQueueGenericSend+0x74>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	623b      	str	r3, [r7, #32]
}
 80032a2:	bf00      	nop
 80032a4:	e7fe      	b.n	80032a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032a6:	f001 f96f 	bl	8004588 <xTaskGetSchedulerState>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <xQueueGenericSend+0x9e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <xQueueGenericSend+0xa2>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <xQueueGenericSend+0xa4>
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61fb      	str	r3, [r7, #28]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032d6:	f001 feb5 	bl	8005044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <xQueueGenericSend+0xd4>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d129      	bne.n	8003340 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f2:	f000 fa0b 	bl	800370c <prvCopyDataToQueue>
 80032f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	4618      	mov	r0, r3
 8003306:	f000 ff7d 	bl	8004204 <xTaskRemoveFromEventList>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003310:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <xQueueGenericSend+0x1f8>)
 8003312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	e00a      	b.n	8003338 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003328:	4b39      	ldr	r3, [pc, #228]	; (8003410 <xQueueGenericSend+0x1f8>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003338:	f001 feb4 	bl	80050a4 <vPortExitCritical>
				return pdPASS;
 800333c:	2301      	movs	r3, #1
 800333e:	e063      	b.n	8003408 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003346:	f001 fead 	bl	80050a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800334a:	2300      	movs	r3, #0
 800334c:	e05c      	b.n	8003408 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003350:	2b00      	cmp	r3, #0
 8003352:	d106      	bne.n	8003362 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4618      	mov	r0, r3
 800335a:	f000 ffb7 	bl	80042cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800335e:	2301      	movs	r3, #1
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003362:	f001 fe9f 	bl	80050a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003366:	f000 fd23 	bl	8003db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800336a:	f001 fe6b 	bl	8005044 <vPortEnterCritical>
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003374:	b25b      	sxtb	r3, r3
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d103      	bne.n	8003384 <xQueueGenericSend+0x16c>
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800338a:	b25b      	sxtb	r3, r3
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d103      	bne.n	800339a <xQueueGenericSend+0x182>
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800339a:	f001 fe83 	bl	80050a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800339e:	1d3a      	adds	r2, r7, #4
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 ffa6 	bl	80042f8 <xTaskCheckForTimeOut>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d124      	bne.n	80033fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033b4:	f000 faa2 	bl	80038fc <prvIsQueueFull>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d018      	beq.n	80033f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	3310      	adds	r3, #16
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fecc 	bl	8004164 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ce:	f000 fa2d 	bl	800382c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033d2:	f000 fcfb 	bl	8003dcc <xTaskResumeAll>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f af7c 	bne.w	80032d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <xQueueGenericSend+0x1f8>)
 80033e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	e772      	b.n	80032d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033f2:	f000 fa1b 	bl	800382c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033f6:	f000 fce9 	bl	8003dcc <xTaskResumeAll>
 80033fa:	e76c      	b.n	80032d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033fe:	f000 fa15 	bl	800382c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003402:	f000 fce3 	bl	8003dcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003406:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003408:	4618      	mov	r0, r3
 800340a:	3738      	adds	r7, #56	; 0x38
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	e000ed04 	.word	0xe000ed04

08003414 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b090      	sub	sp, #64	; 0x40
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d103      	bne.n	8003450 <xQueueGenericSendFromISR+0x3c>
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <xQueueGenericSendFromISR+0x40>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <xQueueGenericSendFromISR+0x42>
 8003454:	2300      	movs	r3, #0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10a      	bne.n	8003470 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800346c:	bf00      	nop
 800346e:	e7fe      	b.n	800346e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d103      	bne.n	800347e <xQueueGenericSendFromISR+0x6a>
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <xQueueGenericSendFromISR+0x6e>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <xQueueGenericSendFromISR+0x70>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	623b      	str	r3, [r7, #32]
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800349e:	f001 feb3 	bl	8005208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034a2:	f3ef 8211 	mrs	r2, BASEPRI
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	61fa      	str	r2, [r7, #28]
 80034b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <xQueueGenericSendFromISR+0xbc>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d12f      	bne.n	8003530 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034e6:	f000 f911 	bl	800370c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d112      	bne.n	800351a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d016      	beq.n	800352a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fe:	3324      	adds	r3, #36	; 0x24
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fe7f 	bl	8004204 <xTaskRemoveFromEventList>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e007      	b.n	800352a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800351a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800351e:	3301      	adds	r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	b25a      	sxtb	r2, r3
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800352a:	2301      	movs	r3, #1
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800352e:	e001      	b.n	8003534 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003530:	2300      	movs	r3, #0
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800353e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003542:	4618      	mov	r0, r3
 8003544:	3740      	adds	r7, #64	; 0x40
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	; 0x30
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003558:	2300      	movs	r3, #0
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <xQueueReceive+0x30>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	623b      	str	r3, [r7, #32]
}
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <xQueueReceive+0x3e>
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <xQueueReceive+0x42>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <xQueueReceive+0x44>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <xQueueReceive+0x5e>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	61fb      	str	r3, [r7, #28]
}
 80035a6:	bf00      	nop
 80035a8:	e7fe      	b.n	80035a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035aa:	f000 ffed 	bl	8004588 <xTaskGetSchedulerState>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <xQueueReceive+0x6e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <xQueueReceive+0x72>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <xQueueReceive+0x74>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <xQueueReceive+0x8e>
	__asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	61bb      	str	r3, [r7, #24]
}
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035da:	f001 fd33 	bl	8005044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01f      	beq.n	800362a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035ee:	f000 f8f7 	bl	80037e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	1e5a      	subs	r2, r3, #1
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00f      	beq.n	8003622 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	3310      	adds	r3, #16
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fdfc 	bl	8004204 <xTaskRemoveFromEventList>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003612:	4b3d      	ldr	r3, [pc, #244]	; (8003708 <xQueueReceive+0x1bc>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003622:	f001 fd3f 	bl	80050a4 <vPortExitCritical>
				return pdPASS;
 8003626:	2301      	movs	r3, #1
 8003628:	e069      	b.n	80036fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d103      	bne.n	8003638 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003630:	f001 fd38 	bl	80050a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003634:	2300      	movs	r3, #0
 8003636:	e062      	b.n	80036fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800363e:	f107 0310 	add.w	r3, r7, #16
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fe42 	bl	80042cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800364c:	f001 fd2a 	bl	80050a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003650:	f000 fbae 	bl	8003db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003654:	f001 fcf6 	bl	8005044 <vPortEnterCritical>
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800365e:	b25b      	sxtb	r3, r3
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d103      	bne.n	800366e <xQueueReceive+0x122>
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003674:	b25b      	sxtb	r3, r3
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d103      	bne.n	8003684 <xQueueReceive+0x138>
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003684:	f001 fd0e 	bl	80050a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003688:	1d3a      	adds	r2, r7, #4
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fe31 	bl	80042f8 <xTaskCheckForTimeOut>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d123      	bne.n	80036e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800369c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800369e:	f000 f917 	bl	80038d0 <prvIsQueueEmpty>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d017      	beq.n	80036d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	3324      	adds	r3, #36	; 0x24
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fd57 	bl	8004164 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036b8:	f000 f8b8 	bl	800382c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036bc:	f000 fb86 	bl	8003dcc <xTaskResumeAll>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d189      	bne.n	80035da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <xQueueReceive+0x1bc>)
 80036c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	e780      	b.n	80035da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036da:	f000 f8a7 	bl	800382c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036de:	f000 fb75 	bl	8003dcc <xTaskResumeAll>
 80036e2:	e77a      	b.n	80035da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e6:	f000 f8a1 	bl	800382c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036ea:	f000 fb6f 	bl	8003dcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036f0:	f000 f8ee 	bl	80038d0 <prvIsQueueEmpty>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f43f af6f 	beq.w	80035da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3730      	adds	r7, #48	; 0x30
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d14d      	bne.n	80037ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 ff44 	bl	80045c4 <xTaskPriorityDisinherit>
 800373c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e043      	b.n	80037ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d119      	bne.n	8003780 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6858      	ldr	r0, [r3, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	461a      	mov	r2, r3
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	f001 fe78 	bl	800544c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	441a      	add	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	d32b      	bcc.n	80037ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	e026      	b.n	80037ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68d8      	ldr	r0, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	461a      	mov	r2, r3
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	f001 fe5e 	bl	800544c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	425b      	negs	r3, r3
 800379a:	441a      	add	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d207      	bcs.n	80037bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	425b      	negs	r3, r3
 80037b6:	441a      	add	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d105      	bne.n	80037ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037d6:	697b      	ldr	r3, [r7, #20]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d018      	beq.n	8003824 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d303      	bcc.n	8003814 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68d9      	ldr	r1, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	461a      	mov	r2, r3
 800381e:	6838      	ldr	r0, [r7, #0]
 8003820:	f001 fe14 	bl	800544c <memcpy>
	}
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003834:	f001 fc06 	bl	8005044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800383e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003840:	e011      	b.n	8003866 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fcd8 	bl	8004204 <xTaskRemoveFromEventList>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800385a:	f000 fdaf 	bl	80043bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	3b01      	subs	r3, #1
 8003862:	b2db      	uxtb	r3, r3
 8003864:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	dce9      	bgt.n	8003842 <prvUnlockQueue+0x16>
 800386e:	e000      	b.n	8003872 <prvUnlockQueue+0x46>
					break;
 8003870:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800387a:	f001 fc13 	bl	80050a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800387e:	f001 fbe1 	bl	8005044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003888:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800388a:	e011      	b.n	80038b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3310      	adds	r3, #16
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fcb3 	bl	8004204 <xTaskRemoveFromEventList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038a4:	f000 fd8a 	bl	80043bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038a8:	7bbb      	ldrb	r3, [r7, #14]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dce9      	bgt.n	800388c <prvUnlockQueue+0x60>
 80038b8:	e000      	b.n	80038bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	22ff      	movs	r2, #255	; 0xff
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038c4:	f001 fbee 	bl	80050a4 <vPortExitCritical>
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038d8:	f001 fbb4 	bl	8005044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e001      	b.n	80038ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ee:	f001 fbd9 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003904:	f001 fb9e 	bl	8005044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	429a      	cmp	r2, r3
 8003912:	d102      	bne.n	800391a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003914:	2301      	movs	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e001      	b.n	800391e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800391e:	f001 fbc1 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 8003922:	68fb      	ldr	r3, [r7, #12]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e014      	b.n	8003966 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800393c:	4a0f      	ldr	r2, [pc, #60]	; (800397c <vQueueAddToRegistry+0x50>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003948:	490c      	ldr	r1, [pc, #48]	; (800397c <vQueueAddToRegistry+0x50>)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <vQueueAddToRegistry+0x50>)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800395e:	e006      	b.n	800396e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3301      	adds	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b07      	cmp	r3, #7
 800396a:	d9e7      	bls.n	800393c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000898 	.word	0x20000898

08003980 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003990:	f001 fb58 	bl	8005044 <vPortEnterCritical>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800399a:	b25b      	sxtb	r3, r3
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d103      	bne.n	80039aa <vQueueWaitForMessageRestricted+0x2a>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b0:	b25b      	sxtb	r3, r3
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d103      	bne.n	80039c0 <vQueueWaitForMessageRestricted+0x40>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c0:	f001 fb70 	bl	80050a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3324      	adds	r3, #36	; 0x24
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fbe9 	bl	80041ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7ff ff26 	bl	800382c <prvUnlockQueue>
	}
 80039e0:	bf00      	nop
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08e      	sub	sp, #56	; 0x38
 80039ec:	af04      	add	r7, sp, #16
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xTaskCreateStatic+0x2a>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	623b      	str	r3, [r7, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <xTaskCreateStatic+0x46>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	61fb      	str	r3, [r7, #28]
}
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a2e:	23bc      	movs	r3, #188	; 0xbc
 8003a30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2bbc      	cmp	r3, #188	; 0xbc
 8003a36:	d00a      	beq.n	8003a4e <xTaskCreateStatic+0x66>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	61bb      	str	r3, [r7, #24]
}
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01e      	beq.n	8003a94 <xTaskCreateStatic+0xac>
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01b      	beq.n	8003a94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	9302      	str	r3, [sp, #8]
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f80c 	bl	8003aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a8e:	f000 f8af 	bl	8003bf0 <prvAddNewTaskToReadyList>
 8003a92:	e001      	b.n	8003a98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a98:	697b      	ldr	r3, [r7, #20]
	}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3728      	adds	r7, #40	; 0x28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	461a      	mov	r2, r3
 8003abc:	21a5      	movs	r1, #165	; 0xa5
 8003abe:	f001 fcd3 	bl	8005468 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003acc:	3b01      	subs	r3, #1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f023 0307 	bic.w	r3, r3, #7
 8003ada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	617b      	str	r3, [r7, #20]
}
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01f      	beq.n	8003b42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e012      	b.n	8003b2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	7819      	ldrb	r1, [r3, #0]
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	3334      	adds	r3, #52	; 0x34
 8003b18:	460a      	mov	r2, r1
 8003b1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d9e9      	bls.n	8003b08 <prvInitialiseNewTask+0x64>
 8003b34:	e000      	b.n	8003b38 <prvInitialiseNewTask+0x94>
			{
				break;
 8003b36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b40:	e003      	b.n	8003b4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	2b37      	cmp	r3, #55	; 0x37
 8003b4e:	d901      	bls.n	8003b54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b50:	2337      	movs	r3, #55	; 0x37
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	2200      	movs	r2, #0
 8003b64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff f9bc 	bl	8002ee8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	3318      	adds	r3, #24
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff f9b7 	bl	8002ee8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	3354      	adds	r3, #84	; 0x54
 8003ba4:	2260      	movs	r2, #96	; 0x60
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 fc5d 	bl	8005468 <memset>
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <prvInitialiseNewTask+0x140>)
 8003bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <prvInitialiseNewTask+0x144>)
 8003bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <prvInitialiseNewTask+0x148>)
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	69b8      	ldr	r0, [r7, #24]
 8003bc6:	f001 f90d 	bl	8004de4 <pxPortInitialiseStack>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bdc:	bf00      	nop
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	08005664 	.word	0x08005664
 8003be8:	08005684 	.word	0x08005684
 8003bec:	08005644 	.word	0x08005644

08003bf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bf8:	f001 fa24 	bl	8005044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <prvAddNewTaskToReadyList+0xc4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <prvAddNewTaskToReadyList+0xc4>)
 8003c04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c06:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <prvAddNewTaskToReadyList+0xc4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d110      	bne.n	8003c3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c1c:	f000 fbf2 	bl	8004404 <prvInitialiseTaskLists>
 8003c20:	e00d      	b.n	8003c3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <prvAddNewTaskToReadyList+0xcc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d802      	bhi.n	8003c3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <prvAddNewTaskToReadyList+0xd0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <prvAddNewTaskToReadyList+0xd0>)
 8003c46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <prvAddNewTaskToReadyList+0xd0>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <prvAddNewTaskToReadyList+0xd4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d903      	bls.n	8003c64 <prvAddNewTaskToReadyList+0x74>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <prvAddNewTaskToReadyList+0xd4>)
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <prvAddNewTaskToReadyList+0xd8>)
 8003c72:	441a      	add	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f7ff f941 	bl	8002f02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c80:	f001 fa10 	bl	80050a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c84:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <prvAddNewTaskToReadyList+0xcc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d207      	bcs.n	8003caa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <prvAddNewTaskToReadyList+0xdc>)
 8003c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000dac 	.word	0x20000dac
 8003cb8:	200008d8 	.word	0x200008d8
 8003cbc:	20000db8 	.word	0x20000db8
 8003cc0:	20000dc8 	.word	0x20000dc8
 8003cc4:	20000db4 	.word	0x20000db4
 8003cc8:	200008dc 	.word	0x200008dc
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cde:	463a      	mov	r2, r7
 8003ce0:	1d39      	adds	r1, r7, #4
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff f8aa 	bl	8002e40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	9202      	str	r2, [sp, #8]
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	460a      	mov	r2, r1
 8003cfe:	4924      	ldr	r1, [pc, #144]	; (8003d90 <vTaskStartScheduler+0xc0>)
 8003d00:	4824      	ldr	r0, [pc, #144]	; (8003d94 <vTaskStartScheduler+0xc4>)
 8003d02:	f7ff fe71 	bl	80039e8 <xTaskCreateStatic>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4a23      	ldr	r2, [pc, #140]	; (8003d98 <vTaskStartScheduler+0xc8>)
 8003d0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d0c:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <vTaskStartScheduler+0xc8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e001      	b.n	8003d1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d102      	bne.n	8003d2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d24:	f000 fd10 	bl	8004748 <xTimerCreateTimerTask>
 8003d28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d11b      	bne.n	8003d68 <vTaskStartScheduler+0x98>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	613b      	str	r3, [r7, #16]
}
 8003d42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d44:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <vTaskStartScheduler+0xcc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3354      	adds	r3, #84	; 0x54
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <vTaskStartScheduler+0xd0>)
 8003d4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d4e:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <vTaskStartScheduler+0xd4>)
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <vTaskStartScheduler+0xd8>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d5c:	4b13      	ldr	r3, [pc, #76]	; (8003dac <vTaskStartScheduler+0xdc>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d62:	f001 f8cd 	bl	8004f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d66:	e00e      	b.n	8003d86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d10a      	bne.n	8003d86 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <vTaskStartScheduler+0xb4>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08005614 	.word	0x08005614
 8003d94:	080043d5 	.word	0x080043d5
 8003d98:	20000dd0 	.word	0x20000dd0
 8003d9c:	200008d8 	.word	0x200008d8
 8003da0:	20000010 	.word	0x20000010
 8003da4:	20000dcc 	.word	0x20000dcc
 8003da8:	20000db8 	.word	0x20000db8
 8003dac:	20000db0 	.word	0x20000db0

08003db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <vTaskSuspendAll+0x18>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	4a03      	ldr	r2, [pc, #12]	; (8003dc8 <vTaskSuspendAll+0x18>)
 8003dbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	20000dd4 	.word	0x20000dd4

08003dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dda:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <xTaskResumeAll+0x118>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	603b      	str	r3, [r7, #0]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003df8:	f001 f924 	bl	8005044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <xTaskResumeAll+0x118>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <xTaskResumeAll+0x118>)
 8003e04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <xTaskResumeAll+0x118>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d162      	bne.n	8003ed4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <xTaskResumeAll+0x11c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d05e      	beq.n	8003ed4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e16:	e02f      	b.n	8003e78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e18:	4b34      	ldr	r3, [pc, #208]	; (8003eec <xTaskResumeAll+0x120>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3318      	adds	r3, #24
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff f8c9 	bl	8002fbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff f8c4 	bl	8002fbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <xTaskResumeAll+0x124>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d903      	bls.n	8003e48 <xTaskResumeAll+0x7c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4a2a      	ldr	r2, [pc, #168]	; (8003ef0 <xTaskResumeAll+0x124>)
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <xTaskResumeAll+0x128>)
 8003e56:	441a      	add	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7ff f84f 	bl	8002f02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <xTaskResumeAll+0x12c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <xTaskResumeAll+0x130>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e78:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <xTaskResumeAll+0x120>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1cb      	bne.n	8003e18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e86:	f000 fb5f 	bl	8004548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <xTaskResumeAll+0x134>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e96:	f000 f847 	bl	8003f28 <xTaskIncrementTick>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <xTaskResumeAll+0x130>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f1      	bne.n	8003e96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <xTaskResumeAll+0x134>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <xTaskResumeAll+0x130>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <xTaskResumeAll+0x138>)
 8003ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ed4:	f001 f8e6 	bl	80050a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000dd4 	.word	0x20000dd4
 8003ee8:	20000dac 	.word	0x20000dac
 8003eec:	20000d6c 	.word	0x20000d6c
 8003ef0:	20000db4 	.word	0x20000db4
 8003ef4:	200008dc 	.word	0x200008dc
 8003ef8:	200008d8 	.word	0x200008d8
 8003efc:	20000dc0 	.word	0x20000dc0
 8003f00:	20000dbc 	.word	0x20000dbc
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <xTaskGetTickCount+0x1c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000db0 	.word	0x20000db0

08003f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f32:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <xTaskIncrementTick+0x148>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 808f 	bne.w	800405a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f3c:	4b4d      	ldr	r3, [pc, #308]	; (8004074 <xTaskIncrementTick+0x14c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f44:	4a4b      	ldr	r2, [pc, #300]	; (8004074 <xTaskIncrementTick+0x14c>)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d120      	bne.n	8003f92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f50:	4b49      	ldr	r3, [pc, #292]	; (8004078 <xTaskIncrementTick+0x150>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	603b      	str	r3, [r7, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <xTaskIncrementTick+0x46>
 8003f70:	4b41      	ldr	r3, [pc, #260]	; (8004078 <xTaskIncrementTick+0x150>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <xTaskIncrementTick+0x154>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3f      	ldr	r2, [pc, #252]	; (8004078 <xTaskIncrementTick+0x150>)
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4a3f      	ldr	r2, [pc, #252]	; (800407c <xTaskIncrementTick+0x154>)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <xTaskIncrementTick+0x158>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <xTaskIncrementTick+0x158>)
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	f000 fadb 	bl	8004548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f92:	4b3c      	ldr	r3, [pc, #240]	; (8004084 <xTaskIncrementTick+0x15c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d349      	bcc.n	8004030 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f9c:	4b36      	ldr	r3, [pc, #216]	; (8004078 <xTaskIncrementTick+0x150>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa6:	4b37      	ldr	r3, [pc, #220]	; (8004084 <xTaskIncrementTick+0x15c>)
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	601a      	str	r2, [r3, #0]
					break;
 8003fae:	e03f      	b.n	8004030 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb0:	4b31      	ldr	r3, [pc, #196]	; (8004078 <xTaskIncrementTick+0x150>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d203      	bcs.n	8003fd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fc8:	4a2e      	ldr	r2, [pc, #184]	; (8004084 <xTaskIncrementTick+0x15c>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fce:	e02f      	b.n	8004030 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fff1 	bl	8002fbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe ffe8 	bl	8002fbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <xTaskIncrementTick+0x160>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d903      	bls.n	8004000 <xTaskIncrementTick+0xd8>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a22      	ldr	r2, [pc, #136]	; (8004088 <xTaskIncrementTick+0x160>)
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4a1f      	ldr	r2, [pc, #124]	; (800408c <xTaskIncrementTick+0x164>)
 800400e:	441a      	add	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7fe ff73 	bl	8002f02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <xTaskIncrementTick+0x168>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	429a      	cmp	r2, r3
 8004028:	d3b8      	bcc.n	8003f9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800402a:	2301      	movs	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800402e:	e7b5      	b.n	8003f9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <xTaskIncrementTick+0x168>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004036:	4915      	ldr	r1, [pc, #84]	; (800408c <xTaskIncrementTick+0x164>)
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d901      	bls.n	800404c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <xTaskIncrementTick+0x16c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e004      	b.n	8004064 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800405a:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <xTaskIncrementTick+0x170>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <xTaskIncrementTick+0x170>)
 8004062:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004064:	697b      	ldr	r3, [r7, #20]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000dd4 	.word	0x20000dd4
 8004074:	20000db0 	.word	0x20000db0
 8004078:	20000d64 	.word	0x20000d64
 800407c:	20000d68 	.word	0x20000d68
 8004080:	20000dc4 	.word	0x20000dc4
 8004084:	20000dcc 	.word	0x20000dcc
 8004088:	20000db4 	.word	0x20000db4
 800408c:	200008dc 	.word	0x200008dc
 8004090:	200008d8 	.word	0x200008d8
 8004094:	20000dc0 	.word	0x20000dc0
 8004098:	20000dbc 	.word	0x20000dbc

0800409c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040a2:	4b2a      	ldr	r3, [pc, #168]	; (800414c <vTaskSwitchContext+0xb0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040aa:	4b29      	ldr	r3, [pc, #164]	; (8004150 <vTaskSwitchContext+0xb4>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040b0:	e046      	b.n	8004140 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80040b2:	4b27      	ldr	r3, [pc, #156]	; (8004150 <vTaskSwitchContext+0xb4>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b8:	4b26      	ldr	r3, [pc, #152]	; (8004154 <vTaskSwitchContext+0xb8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e010      	b.n	80040e2 <vTaskSwitchContext+0x46>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <vTaskSwitchContext+0x40>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	607b      	str	r3, [r7, #4]
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <vTaskSwitchContext+0x3e>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b01      	subs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	491d      	ldr	r1, [pc, #116]	; (8004158 <vTaskSwitchContext+0xbc>)
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0e4      	beq.n	80040c0 <vTaskSwitchContext+0x24>
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <vTaskSwitchContext+0xbc>)
 8004102:	4413      	add	r3, r2
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	3308      	adds	r3, #8
 8004118:	429a      	cmp	r2, r3
 800411a:	d104      	bne.n	8004126 <vTaskSwitchContext+0x8a>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a0b      	ldr	r2, [pc, #44]	; (800415c <vTaskSwitchContext+0xc0>)
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <vTaskSwitchContext+0xb8>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <vTaskSwitchContext+0xc0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3354      	adds	r3, #84	; 0x54
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <vTaskSwitchContext+0xc4>)
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	20000dd4 	.word	0x20000dd4
 8004150:	20000dc0 	.word	0x20000dc0
 8004154:	20000db4 	.word	0x20000db4
 8004158:	200008dc 	.word	0x200008dc
 800415c:	200008d8 	.word	0x200008d8
 8004160:	20000010 	.word	0x20000010

08004164 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60fb      	str	r3, [r7, #12]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <vTaskPlaceOnEventList+0x44>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3318      	adds	r3, #24
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fe fed9 	bl	8002f4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004198:	2101      	movs	r1, #1
 800419a:	6838      	ldr	r0, [r7, #0]
 800419c:	f000 fa80 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200008d8 	.word	0x200008d8

080041ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	617b      	str	r3, [r7, #20]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <vTaskPlaceOnEventListRestricted+0x54>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3318      	adds	r3, #24
 80041da:	4619      	mov	r1, r3
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7fe fe90 	bl	8002f02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f000 fa55 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
	}
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200008d8 	.word	0x200008d8

08004204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60fb      	str	r3, [r7, #12]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	3318      	adds	r3, #24
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fec1 	bl	8002fbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800423a:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <xTaskRemoveFromEventList+0xb0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11d      	bne.n	800427e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	3304      	adds	r3, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe feb8 	bl	8002fbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <xTaskRemoveFromEventList+0xb4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d903      	bls.n	8004260 <xTaskRemoveFromEventList+0x5c>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <xTaskRemoveFromEventList+0xb4>)
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <xTaskRemoveFromEventList+0xb8>)
 800426e:	441a      	add	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7fe fe43 	bl	8002f02 <vListInsertEnd>
 800427c:	e005      	b.n	800428a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	3318      	adds	r3, #24
 8004282:	4619      	mov	r1, r3
 8004284:	480e      	ldr	r0, [pc, #56]	; (80042c0 <xTaskRemoveFromEventList+0xbc>)
 8004286:	f7fe fe3c 	bl	8002f02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <xTaskRemoveFromEventList+0xc0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	429a      	cmp	r2, r3
 8004296:	d905      	bls.n	80042a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <xTaskRemoveFromEventList+0xc4>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e001      	b.n	80042a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042a8:	697b      	ldr	r3, [r7, #20]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000dd4 	.word	0x20000dd4
 80042b8:	20000db4 	.word	0x20000db4
 80042bc:	200008dc 	.word	0x200008dc
 80042c0:	20000d6c 	.word	0x20000d6c
 80042c4:	200008d8 	.word	0x200008d8
 80042c8:	20000dc0 	.word	0x20000dc0

080042cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <vTaskInternalSetTimeOutState+0x24>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <vTaskInternalSetTimeOutState+0x28>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	605a      	str	r2, [r3, #4]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	20000dc4 	.word	0x20000dc4
 80042f4:	20000db0 	.word	0x20000db0

080042f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	613b      	str	r3, [r7, #16]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
}
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800433a:	f000 fe83 	bl	8005044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <xTaskCheckForTimeOut+0xbc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d102      	bne.n	800435e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	e023      	b.n	80043a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <xTaskCheckForTimeOut+0xc0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d007      	beq.n	800437a <xTaskCheckForTimeOut+0x82>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004374:	2301      	movs	r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	e015      	b.n	80043a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	429a      	cmp	r2, r3
 8004382:	d20b      	bcs.n	800439c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff9b 	bl	80042cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e004      	b.n	80043a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043a6:	f000 fe7d 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 80043aa:	69fb      	ldr	r3, [r7, #28]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000db0 	.word	0x20000db0
 80043b8:	20000dc4 	.word	0x20000dc4

080043bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <vTaskMissedYield+0x14>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000dc0 	.word	0x20000dc0

080043d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043dc:	f000 f852 	bl	8004484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <prvIdleTask+0x28>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d9f9      	bls.n	80043dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <prvIdleTask+0x2c>)
 80043ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043f8:	e7f0      	b.n	80043dc <prvIdleTask+0x8>
 80043fa:	bf00      	nop
 80043fc:	200008dc 	.word	0x200008dc
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	e00c      	b.n	800442a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <prvInitialiseTaskLists+0x60>)
 800441c:	4413      	add	r3, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fd42 	bl	8002ea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3301      	adds	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b37      	cmp	r3, #55	; 0x37
 800442e:	d9ef      	bls.n	8004410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004430:	480d      	ldr	r0, [pc, #52]	; (8004468 <prvInitialiseTaskLists+0x64>)
 8004432:	f7fe fd39 	bl	8002ea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004436:	480d      	ldr	r0, [pc, #52]	; (800446c <prvInitialiseTaskLists+0x68>)
 8004438:	f7fe fd36 	bl	8002ea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800443c:	480c      	ldr	r0, [pc, #48]	; (8004470 <prvInitialiseTaskLists+0x6c>)
 800443e:	f7fe fd33 	bl	8002ea8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004442:	480c      	ldr	r0, [pc, #48]	; (8004474 <prvInitialiseTaskLists+0x70>)
 8004444:	f7fe fd30 	bl	8002ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004448:	480b      	ldr	r0, [pc, #44]	; (8004478 <prvInitialiseTaskLists+0x74>)
 800444a:	f7fe fd2d 	bl	8002ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <prvInitialiseTaskLists+0x78>)
 8004450:	4a05      	ldr	r2, [pc, #20]	; (8004468 <prvInitialiseTaskLists+0x64>)
 8004452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <prvInitialiseTaskLists+0x7c>)
 8004456:	4a05      	ldr	r2, [pc, #20]	; (800446c <prvInitialiseTaskLists+0x68>)
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200008dc 	.word	0x200008dc
 8004468:	20000d3c 	.word	0x20000d3c
 800446c:	20000d50 	.word	0x20000d50
 8004470:	20000d6c 	.word	0x20000d6c
 8004474:	20000d80 	.word	0x20000d80
 8004478:	20000d98 	.word	0x20000d98
 800447c:	20000d64 	.word	0x20000d64
 8004480:	20000d68 	.word	0x20000d68

08004484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800448a:	e019      	b.n	80044c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800448c:	f000 fdda 	bl	8005044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <prvCheckTasksWaitingTermination+0x50>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe fd8d 	bl	8002fbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <prvCheckTasksWaitingTermination+0x54>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	4a0b      	ldr	r2, [pc, #44]	; (80044d8 <prvCheckTasksWaitingTermination+0x54>)
 80044aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <prvCheckTasksWaitingTermination+0x58>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <prvCheckTasksWaitingTermination+0x58>)
 80044b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044b6:	f000 fdf5 	bl	80050a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f810 	bl	80044e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <prvCheckTasksWaitingTermination+0x58>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e1      	bne.n	800448c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000d80 	.word	0x20000d80
 80044d8:	20000dac 	.word	0x20000dac
 80044dc:	20000d94 	.word	0x20000d94

080044e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3354      	adds	r3, #84	; 0x54
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 ffd1 	bl	8005494 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d108      	bne.n	800450e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fec1 	bl	8005288 <vPortFree>
				vPortFree( pxTCB );
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 febe 	bl	8005288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800450c:	e018      	b.n	8004540 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004514:	2b01      	cmp	r3, #1
 8004516:	d103      	bne.n	8004520 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 feb5 	bl	8005288 <vPortFree>
	}
 800451e:	e00f      	b.n	8004540 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004526:	2b02      	cmp	r3, #2
 8004528:	d00a      	beq.n	8004540 <prvDeleteTCB+0x60>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60fb      	str	r3, [r7, #12]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <prvDeleteTCB+0x5e>
	}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <prvResetNextTaskUnblockTime+0x38>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <prvResetNextTaskUnblockTime+0x3c>)
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004560:	e008      	b.n	8004574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <prvResetNextTaskUnblockTime+0x38>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <prvResetNextTaskUnblockTime+0x3c>)
 8004572:	6013      	str	r3, [r2, #0]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	20000d64 	.word	0x20000d64
 8004584:	20000dcc 	.word	0x20000dcc

08004588 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <xTaskGetSchedulerState+0x34>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004596:	2301      	movs	r3, #1
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	e008      	b.n	80045ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <xTaskGetSchedulerState+0x38>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045a4:	2302      	movs	r3, #2
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	e001      	b.n	80045ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ae:	687b      	ldr	r3, [r7, #4]
	}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20000db8 	.word	0x20000db8
 80045c0:	20000dd4 	.word	0x20000dd4

080045c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d056      	beq.n	8004688 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045da:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <xTaskPriorityDisinherit+0xd0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d00a      	beq.n	80045fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	60bb      	str	r3, [r7, #8]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	429a      	cmp	r2, r3
 800462c:	d02c      	beq.n	8004688 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004632:	2b00      	cmp	r3, #0
 8004634:	d128      	bne.n	8004688 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3304      	adds	r3, #4
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fcbe 	bl	8002fbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <xTaskPriorityDisinherit+0xd4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d903      	bls.n	8004668 <xTaskPriorityDisinherit+0xa4>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <xTaskPriorityDisinherit+0xd4>)
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4a09      	ldr	r2, [pc, #36]	; (800469c <xTaskPriorityDisinherit+0xd8>)
 8004676:	441a      	add	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f7fe fc3f 	bl	8002f02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004684:	2301      	movs	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004688:	697b      	ldr	r3, [r7, #20]
	}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	200008d8 	.word	0x200008d8
 8004698:	20000db4 	.word	0x20000db4
 800469c:	200008dc 	.word	0x200008dc

080046a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <prvAddCurrentTaskToDelayedList+0x90>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fc80 	bl	8002fbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d10a      	bne.n	80046da <prvAddCurrentTaskToDelayedList+0x3a>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4819      	ldr	r0, [pc, #100]	; (8004738 <prvAddCurrentTaskToDelayedList+0x98>)
 80046d4:	f7fe fc15 	bl	8002f02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d8:	e026      	b.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d209      	bcs.n	8004706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <prvAddCurrentTaskToDelayedList+0x9c>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe fc23 	bl	8002f4a <vListInsert>
}
 8004704:	e010      	b.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f7fe fc19 	bl	8002f4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d202      	bcs.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004722:	4a08      	ldr	r2, [pc, #32]	; (8004744 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000db0 	.word	0x20000db0
 8004734:	200008d8 	.word	0x200008d8
 8004738:	20000d98 	.word	0x20000d98
 800473c:	20000d68 	.word	0x20000d68
 8004740:	20000d64 	.word	0x20000d64
 8004744:	20000dcc 	.word	0x20000dcc

08004748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004752:	f000 fb07 	bl	8004d64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <xTimerCreateTimerTask+0x80>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d021      	beq.n	80047a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004766:	1d3a      	adds	r2, r7, #4
 8004768:	f107 0108 	add.w	r1, r7, #8
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fb7f 	bl	8002e74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	9202      	str	r2, [sp, #8]
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	2302      	movs	r3, #2
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	460a      	mov	r2, r1
 8004788:	4910      	ldr	r1, [pc, #64]	; (80047cc <xTimerCreateTimerTask+0x84>)
 800478a:	4811      	ldr	r0, [pc, #68]	; (80047d0 <xTimerCreateTimerTask+0x88>)
 800478c:	f7ff f92c 	bl	80039e8 <xTaskCreateStatic>
 8004790:	4603      	mov	r3, r0
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <xTimerCreateTimerTask+0x8c>)
 8004794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <xTimerCreateTimerTask+0x8c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800479e:	2301      	movs	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	613b      	str	r3, [r7, #16]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047be:	697b      	ldr	r3, [r7, #20]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000e08 	.word	0x20000e08
 80047cc:	0800561c 	.word	0x0800561c
 80047d0:	0800490d 	.word	0x0800490d
 80047d4:	20000e0c 	.word	0x20000e0c

080047d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xTimerGenericCommand+0x2e>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	623b      	str	r3, [r7, #32]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <xTimerGenericCommand+0x98>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d02a      	beq.n	8004864 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b05      	cmp	r3, #5
 800481e:	dc18      	bgt.n	8004852 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004820:	f7ff feb2 	bl	8004588 <xTaskGetSchedulerState>
 8004824:	4603      	mov	r3, r0
 8004826:	2b02      	cmp	r3, #2
 8004828:	d109      	bne.n	800483e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <xTimerGenericCommand+0x98>)
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f107 0110 	add.w	r1, r7, #16
 8004832:	2300      	movs	r3, #0
 8004834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004836:	f7fe fcef 	bl	8003218 <xQueueGenericSend>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24
 800483c:	e012      	b.n	8004864 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <xTimerGenericCommand+0x98>)
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	f107 0110 	add.w	r1, r7, #16
 8004846:	2300      	movs	r3, #0
 8004848:	2200      	movs	r2, #0
 800484a:	f7fe fce5 	bl	8003218 <xQueueGenericSend>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24
 8004850:	e008      	b.n	8004864 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <xTimerGenericCommand+0x98>)
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	f107 0110 	add.w	r1, r7, #16
 800485a:	2300      	movs	r3, #0
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	f7fe fdd9 	bl	8003414 <xQueueGenericSendFromISR>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004866:	4618      	mov	r0, r3
 8004868:	3728      	adds	r7, #40	; 0x28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000e08 	.word	0x20000e08

08004874 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487e:	4b22      	ldr	r3, [pc, #136]	; (8004908 <prvProcessExpiredTimer+0x94>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe fb95 	bl	8002fbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d022      	beq.n	80048e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	18d1      	adds	r1, r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	6978      	ldr	r0, [r7, #20]
 80048ae:	f000 f8d1 	bl	8004a54 <prvInsertTimerInActiveList>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01f      	beq.n	80048f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048b8:	2300      	movs	r3, #0
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	2100      	movs	r1, #0
 80048c2:	6978      	ldr	r0, [r7, #20]
 80048c4:	f7ff ff88 	bl	80047d8 <xTimerGenericCommand>
 80048c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d113      	bne.n	80048f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	60fb      	str	r3, [r7, #12]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	6978      	ldr	r0, [r7, #20]
 80048fe:	4798      	blx	r3
}
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000e00 	.word	0x20000e00

0800490c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004914:	f107 0308 	add.w	r3, r7, #8
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f857 	bl	80049cc <prvGetNextExpireTime>
 800491e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4619      	mov	r1, r3
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f803 	bl	8004930 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800492a:	f000 f8d5 	bl	8004ad8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800492e:	e7f1      	b.n	8004914 <prvTimerTask+0x8>

08004930 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800493a:	f7ff fa39 	bl	8003db0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f866 	bl	8004a14 <prvSampleTimeNow>
 8004948:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d130      	bne.n	80049b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <prvProcessTimerOrBlockTask+0x3c>
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	429a      	cmp	r2, r3
 800495c:	d806      	bhi.n	800496c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800495e:	f7ff fa35 	bl	8003dcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff85 	bl	8004874 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800496a:	e024      	b.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <prvProcessTimerOrBlockTask+0x90>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <prvProcessTimerOrBlockTask+0x50>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <prvProcessTimerOrBlockTask+0x52>
 8004980:	2300      	movs	r3, #0
 8004982:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <prvProcessTimerOrBlockTask+0x94>)
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4619      	mov	r1, r3
 8004992:	f7fe fff5 	bl	8003980 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004996:	f7ff fa19 	bl	8003dcc <xTaskResumeAll>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <prvProcessTimerOrBlockTask+0x98>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
}
 80049b0:	e001      	b.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049b2:	f7ff fa0b 	bl	8003dcc <xTaskResumeAll>
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000e04 	.word	0x20000e04
 80049c4:	20000e08 	.word	0x20000e08
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <prvGetNextExpireTime+0x44>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <prvGetNextExpireTime+0x16>
 80049de:	2201      	movs	r2, #1
 80049e0:	e000      	b.n	80049e4 <prvGetNextExpireTime+0x18>
 80049e2:	2200      	movs	r2, #0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <prvGetNextExpireTime+0x44>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e001      	b.n	8004a00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a00:	68fb      	ldr	r3, [r7, #12]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000e00 	.word	0x20000e00

08004a14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a1c:	f7ff fa74 	bl	8003f08 <xTaskGetTickCount>
 8004a20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <prvSampleTimeNow+0x3c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d205      	bcs.n	8004a38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a2c:	f000 f936 	bl	8004c9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e002      	b.n	8004a3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a3e:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <prvSampleTimeNow+0x3c>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000e10 	.word	0x20000e10

08004a54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d812      	bhi.n	8004aa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e01b      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <prvInsertTimerInActiveList+0x7c>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f7fe fa56 	bl	8002f4a <vListInsert>
 8004a9e:	e012      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d206      	bcs.n	8004ab6 <prvInsertTimerInActiveList+0x62>
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e007      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <prvInsertTimerInActiveList+0x80>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7fe fa42 	bl	8002f4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ac6:	697b      	ldr	r3, [r7, #20]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000e04 	.word	0x20000e04
 8004ad4:	20000e00 	.word	0x20000e00

08004ad8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ade:	e0ca      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da18      	bge.n	8004b18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	3304      	adds	r3, #4
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	61fb      	str	r3, [r7, #28]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0e:	6850      	ldr	r0, [r2, #4]
 8004b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b12:	6892      	ldr	r2, [r2, #8]
 8004b14:	4611      	mov	r1, r2
 8004b16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f2c0 80aa 	blt.w	8004c74 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fa43 	bl	8002fbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b36:	463b      	mov	r3, r7
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff6b 	bl	8004a14 <prvSampleTimeNow>
 8004b3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b09      	cmp	r3, #9
 8004b44:	f200 8097 	bhi.w	8004c76 <prvProcessReceivedCommands+0x19e>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <prvProcessReceivedCommands+0x78>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b79 	.word	0x08004b79
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004bed 	.word	0x08004bed
 8004b60:	08004c01 	.word	0x08004c01
 8004b64:	08004c4b 	.word	0x08004c4b
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b79 	.word	0x08004b79
 8004b70:	08004bed 	.word	0x08004bed
 8004b74:	08004c01 	.word	0x08004c01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	18d1      	adds	r1, r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b98:	f7ff ff5c 	bl	8004a54 <prvInsertTimerInActiveList>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d069      	beq.n	8004c76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05e      	beq.n	8004c76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bca:	f7ff fe05 	bl	80047d8 <xTimerGenericCommand>
 8004bce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d14f      	bne.n	8004c76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	61bb      	str	r3, [r7, #24]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bfe:	e03a      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	617b      	str	r3, [r7, #20]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	18d1      	adds	r1, r2, r3
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c44:	f7ff ff06 	bl	8004a54 <prvInsertTimerInActiveList>
					break;
 8004c48:	e015      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5a:	f000 fb15 	bl	8005288 <vPortFree>
 8004c5e:	e00a      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c72:	e000      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <prvProcessReceivedCommands+0x1c0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1d39      	adds	r1, r7, #4
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fc64 	bl	800354c <xQueueReceive>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f47f af2a 	bne.w	8004ae0 <prvProcessReceivedCommands+0x8>
	}
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3730      	adds	r7, #48	; 0x30
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000e08 	.word	0x20000e08

08004c9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ca2:	e048      	b.n	8004d36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe f97d 	bl	8002fbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02e      	beq.n	8004d36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d90e      	bls.n	8004d08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7fe f922 	bl	8002f4a <vListInsert>
 8004d06:	e016      	b.n	8004d36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	2100      	movs	r1, #0
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fd60 	bl	80047d8 <xTimerGenericCommand>
 8004d18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	603b      	str	r3, [r7, #0]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1b1      	bne.n	8004ca4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000e00 	.word	0x20000e00
 8004d60:	20000e04 	.word	0x20000e04

08004d64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d6a:	f000 f96b 	bl	8005044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d120      	bne.n	8004db8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d76:	4814      	ldr	r0, [pc, #80]	; (8004dc8 <prvCheckForValidListAndQueue+0x64>)
 8004d78:	f7fe f896 	bl	8002ea8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d7c:	4813      	ldr	r0, [pc, #76]	; (8004dcc <prvCheckForValidListAndQueue+0x68>)
 8004d7e:	f7fe f893 	bl	8002ea8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <prvCheckForValidListAndQueue+0x6c>)
 8004d84:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <prvCheckForValidListAndQueue+0x64>)
 8004d86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d88:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <prvCheckForValidListAndQueue+0x70>)
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <prvCheckForValidListAndQueue+0x68>)
 8004d8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <prvCheckForValidListAndQueue+0x74>)
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <prvCheckForValidListAndQueue+0x78>)
 8004d96:	2110      	movs	r1, #16
 8004d98:	200a      	movs	r0, #10
 8004d9a:	f7fe f9a1 	bl	80030e0 <xQueueGenericCreateStatic>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004da2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	490b      	ldr	r1, [pc, #44]	; (8004de0 <prvCheckForValidListAndQueue+0x7c>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fdba 	bl	800392c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004db8:	f000 f974 	bl	80050a4 <vPortExitCritical>
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000e08 	.word	0x20000e08
 8004dc8:	20000dd8 	.word	0x20000dd8
 8004dcc:	20000dec 	.word	0x20000dec
 8004dd0:	20000e00 	.word	0x20000e00
 8004dd4:	20000e04 	.word	0x20000e04
 8004dd8:	20000eb4 	.word	0x20000eb4
 8004ddc:	20000e14 	.word	0x20000e14
 8004de0:	08005624 	.word	0x08005624

08004de4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3b04      	subs	r3, #4
 8004df4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b04      	subs	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b04      	subs	r3, #4
 8004e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <pxPortInitialiseStack+0x64>)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b14      	subs	r3, #20
 8004e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f06f 0202 	mvn.w	r2, #2
 8004e32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3b20      	subs	r3, #32
 8004e38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	08004e4d 	.word	0x08004e4d

08004e4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <prvTaskExitError+0x54>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d00a      	beq.n	8004e76 <prvTaskExitError+0x2a>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <prvTaskExitError+0x28>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60bb      	str	r3, [r7, #8]
}
 8004e88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e8a:	bf00      	nop
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0fc      	beq.n	8004e8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	2000000c 	.word	0x2000000c
	...

08004eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <pxCurrentTCBConst2>)
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	6808      	ldr	r0, [r1, #0]
 8004eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eba:	f380 8809 	msr	PSP, r0
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8811 	msr	BASEPRI, r0
 8004eca:	4770      	bx	lr
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst2>:
 8004ed0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ed8:	4808      	ldr	r0, [pc, #32]	; (8004efc <prvPortStartFirstTask+0x24>)
 8004eda:	6800      	ldr	r0, [r0, #0]
 8004edc:	6800      	ldr	r0, [r0, #0]
 8004ede:	f380 8808 	msr	MSP, r0
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8814 	msr	CONTROL, r0
 8004eea:	b662      	cpsie	i
 8004eec:	b661      	cpsie	f
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	df00      	svc	0
 8004ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004efa:	bf00      	nop
 8004efc:	e000ed08 	.word	0xe000ed08

08004f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f06:	4b46      	ldr	r3, [pc, #280]	; (8005020 <xPortStartScheduler+0x120>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a46      	ldr	r2, [pc, #280]	; (8005024 <xPortStartScheduler+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10a      	bne.n	8004f26 <xPortStartScheduler+0x26>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	613b      	str	r3, [r7, #16]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <xPortStartScheduler+0x120>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <xPortStartScheduler+0x128>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10a      	bne.n	8004f46 <xPortStartScheduler+0x46>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60fb      	str	r3, [r7, #12]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <xPortStartScheduler+0x12c>)
 8004f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4b31      	ldr	r3, [pc, #196]	; (8005030 <xPortStartScheduler+0x130>)
 8004f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <xPortStartScheduler+0x134>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f74:	e009      	b.n	8004f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f76:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <xPortStartScheduler+0x134>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <xPortStartScheduler+0x134>)
 8004f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d0ef      	beq.n	8004f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <xPortStartScheduler+0x134>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1c3 0307 	rsb	r3, r3, #7
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d00a      	beq.n	8004fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60bb      	str	r3, [r7, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <xPortStartScheduler+0x134>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <xPortStartScheduler+0x134>)
 8004fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	; (8005034 <xPortStartScheduler+0x134>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <xPortStartScheduler+0x134>)
 8004fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fd6:	4b18      	ldr	r3, [pc, #96]	; (8005038 <xPortStartScheduler+0x138>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a17      	ldr	r2, [pc, #92]	; (8005038 <xPortStartScheduler+0x138>)
 8004fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <xPortStartScheduler+0x138>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a14      	ldr	r2, [pc, #80]	; (8005038 <xPortStartScheduler+0x138>)
 8004fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fee:	f000 f8dd 	bl	80051ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <xPortStartScheduler+0x13c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ff8:	f000 f8fc 	bl	80051f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <xPortStartScheduler+0x140>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <xPortStartScheduler+0x140>)
 8005002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005008:	f7ff ff66 	bl	8004ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800500c:	f7ff f846 	bl	800409c <vTaskSwitchContext>
	prvTaskExitError();
 8005010:	f7ff ff1c 	bl	8004e4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	e000ed00 	.word	0xe000ed00
 8005024:	410fc271 	.word	0x410fc271
 8005028:	410fc270 	.word	0x410fc270
 800502c:	e000e400 	.word	0xe000e400
 8005030:	20000f04 	.word	0x20000f04
 8005034:	20000f08 	.word	0x20000f08
 8005038:	e000ed20 	.word	0xe000ed20
 800503c:	2000000c 	.word	0x2000000c
 8005040:	e000ef34 	.word	0xe000ef34

08005044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <vPortEnterCritical+0x58>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	4a0d      	ldr	r2, [pc, #52]	; (800509c <vPortEnterCritical+0x58>)
 8005066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <vPortEnterCritical+0x58>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10f      	bne.n	8005090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortEnterCritical+0x5c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <vPortEnterCritical+0x4c>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	603b      	str	r3, [r7, #0]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <vPortEnterCritical+0x4a>
	}
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	2000000c 	.word	0x2000000c
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <vPortExitCritical+0x50>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <vPortExitCritical+0x24>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	607b      	str	r3, [r7, #4]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <vPortExitCritical+0x50>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <vPortExitCritical+0x50>)
 80050d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050d2:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <vPortExitCritical+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <vPortExitCritical+0x42>
 80050da:	2300      	movs	r3, #0
 80050dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f383 8811 	msr	BASEPRI, r3
}
 80050e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	2000000c 	.word	0x2000000c
	...

08005100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005100:	f3ef 8009 	mrs	r0, PSP
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4b15      	ldr	r3, [pc, #84]	; (8005160 <pxCurrentTCBConst>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	f01e 0f10 	tst.w	lr, #16
 8005110:	bf08      	it	eq
 8005112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005124:	f380 8811 	msr	BASEPRI, r0
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f7fe ffb4 	bl	800409c <vTaskSwitchContext>
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f380 8811 	msr	BASEPRI, r0
 800513c:	bc09      	pop	{r0, r3}
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	6808      	ldr	r0, [r1, #0]
 8005142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005146:	f01e 0f10 	tst.w	lr, #16
 800514a:	bf08      	it	eq
 800514c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005150:	f380 8809 	msr	PSP, r0
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w

08005160 <pxCurrentTCBConst>:
 8005160:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop

08005168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005182:	f7fe fed1 	bl	8003f28 <xTaskIncrementTick>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <xPortSysTickHandler+0x40>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <vPortSetupTimerInterrupt+0x38>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <vPortSetupTimerInterrupt+0x3c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <vPortSetupTimerInterrupt+0x40>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <vPortSetupTimerInterrupt+0x44>)
 80051ca:	3b01      	subs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ce:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e010 	.word	0xe000e010
 80051e4:	e000e018 	.word	0xe000e018
 80051e8:	20000000 	.word	0x20000000
 80051ec:	10624dd3 	.word	0x10624dd3
 80051f0:	e000e014 	.word	0xe000e014

080051f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005204 <vPortEnableVFP+0x10>
 80051f8:	6801      	ldr	r1, [r0, #0]
 80051fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051fe:	6001      	str	r1, [r0, #0]
 8005200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005202:	bf00      	nop
 8005204:	e000ed88 	.word	0xe000ed88

08005208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800520e:	f3ef 8305 	mrs	r3, IPSR
 8005212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d914      	bls.n	8005244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800521a:	4a17      	ldr	r2, [pc, #92]	; (8005278 <vPortValidateInterruptPriority+0x70>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <vPortValidateInterruptPriority+0x74>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	7afa      	ldrb	r2, [r7, #11]
 800522a:	429a      	cmp	r2, r3
 800522c:	d20a      	bcs.n	8005244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <vPortValidateInterruptPriority+0x78>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <vPortValidateInterruptPriority+0x7c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d90a      	bls.n	800526a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	603b      	str	r3, [r7, #0]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <vPortValidateInterruptPriority+0x60>
	}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	e000e3f0 	.word	0xe000e3f0
 800527c:	20000f04 	.word	0x20000f04
 8005280:	e000ed0c 	.word	0xe000ed0c
 8005284:	20000f08 	.word	0x20000f08

08005288 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d04d      	beq.n	8005336 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800529a:	2308      	movs	r3, #8
 800529c:	425b      	negs	r3, r3
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4413      	add	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <vPortFree+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <vPortFree+0x44>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60fb      	str	r3, [r7, #12]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <vPortFree+0x62>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	60bb      	str	r3, [r7, #8]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	4b14      	ldr	r3, [pc, #80]	; (8005340 <vPortFree+0xb8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01e      	beq.n	8005336 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d11a      	bne.n	8005336 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <vPortFree+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	43db      	mvns	r3, r3
 800530a:	401a      	ands	r2, r3
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005310:	f7fe fd4e 	bl	8003db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <vPortFree+0xbc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4413      	add	r3, r2
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <vPortFree+0xbc>)
 8005320:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005322:	6938      	ldr	r0, [r7, #16]
 8005324:	f000 f812 	bl	800534c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005328:	4b07      	ldr	r3, [pc, #28]	; (8005348 <vPortFree+0xc0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	4a06      	ldr	r2, [pc, #24]	; (8005348 <vPortFree+0xc0>)
 8005330:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005332:	f7fe fd4b 	bl	8003dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005336:	bf00      	nop
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000f20 	.word	0x20000f20
 8005344:	20000f18 	.word	0x20000f18
 8005348:	20000f1c 	.word	0x20000f1c

0800534c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005354:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <prvInsertBlockIntoFreeList+0xac>)
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e002      	b.n	8005360 <prvInsertBlockIntoFreeList+0x14>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	429a      	cmp	r2, r3
 8005368:	d8f7      	bhi.n	800535a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	4413      	add	r3, r2
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	429a      	cmp	r2, r3
 800537a:	d108      	bne.n	800538e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	441a      	add	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	441a      	add	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d118      	bne.n	80053d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b15      	ldr	r3, [pc, #84]	; (80053fc <prvInsertBlockIntoFreeList+0xb0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d00d      	beq.n	80053ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e008      	b.n	80053dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <prvInsertBlockIntoFreeList+0xb0>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e003      	b.n	80053dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d002      	beq.n	80053ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000f0c 	.word	0x20000f0c
 80053fc:	20000f14 	.word	0x20000f14

08005400 <__libc_init_array>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4d0d      	ldr	r5, [pc, #52]	; (8005438 <__libc_init_array+0x38>)
 8005404:	4c0d      	ldr	r4, [pc, #52]	; (800543c <__libc_init_array+0x3c>)
 8005406:	1b64      	subs	r4, r4, r5
 8005408:	10a4      	asrs	r4, r4, #2
 800540a:	2600      	movs	r6, #0
 800540c:	42a6      	cmp	r6, r4
 800540e:	d109      	bne.n	8005424 <__libc_init_array+0x24>
 8005410:	4d0b      	ldr	r5, [pc, #44]	; (8005440 <__libc_init_array+0x40>)
 8005412:	4c0c      	ldr	r4, [pc, #48]	; (8005444 <__libc_init_array+0x44>)
 8005414:	f000 f8f2 	bl	80055fc <_init>
 8005418:	1b64      	subs	r4, r4, r5
 800541a:	10a4      	asrs	r4, r4, #2
 800541c:	2600      	movs	r6, #0
 800541e:	42a6      	cmp	r6, r4
 8005420:	d105      	bne.n	800542e <__libc_init_array+0x2e>
 8005422:	bd70      	pop	{r4, r5, r6, pc}
 8005424:	f855 3b04 	ldr.w	r3, [r5], #4
 8005428:	4798      	blx	r3
 800542a:	3601      	adds	r6, #1
 800542c:	e7ee      	b.n	800540c <__libc_init_array+0xc>
 800542e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005432:	4798      	blx	r3
 8005434:	3601      	adds	r6, #1
 8005436:	e7f2      	b.n	800541e <__libc_init_array+0x1e>
 8005438:	080056ac 	.word	0x080056ac
 800543c:	080056ac 	.word	0x080056ac
 8005440:	080056ac 	.word	0x080056ac
 8005444:	080056b0 	.word	0x080056b0

08005448 <__retarget_lock_acquire_recursive>:
 8005448:	4770      	bx	lr

0800544a <__retarget_lock_release_recursive>:
 800544a:	4770      	bx	lr

0800544c <memcpy>:
 800544c:	440a      	add	r2, r1
 800544e:	4291      	cmp	r1, r2
 8005450:	f100 33ff 	add.w	r3, r0, #4294967295
 8005454:	d100      	bne.n	8005458 <memcpy+0xc>
 8005456:	4770      	bx	lr
 8005458:	b510      	push	{r4, lr}
 800545a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005462:	4291      	cmp	r1, r2
 8005464:	d1f9      	bne.n	800545a <memcpy+0xe>
 8005466:	bd10      	pop	{r4, pc}

08005468 <memset>:
 8005468:	4402      	add	r2, r0
 800546a:	4603      	mov	r3, r0
 800546c:	4293      	cmp	r3, r2
 800546e:	d100      	bne.n	8005472 <memset+0xa>
 8005470:	4770      	bx	lr
 8005472:	f803 1b01 	strb.w	r1, [r3], #1
 8005476:	e7f9      	b.n	800546c <memset+0x4>

08005478 <cleanup_glue>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	460c      	mov	r4, r1
 800547c:	6809      	ldr	r1, [r1, #0]
 800547e:	4605      	mov	r5, r0
 8005480:	b109      	cbz	r1, 8005486 <cleanup_glue+0xe>
 8005482:	f7ff fff9 	bl	8005478 <cleanup_glue>
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800548e:	f000 b869 	b.w	8005564 <_free_r>
	...

08005494 <_reclaim_reent>:
 8005494:	4b2c      	ldr	r3, [pc, #176]	; (8005548 <_reclaim_reent+0xb4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4283      	cmp	r3, r0
 800549a:	b570      	push	{r4, r5, r6, lr}
 800549c:	4604      	mov	r4, r0
 800549e:	d051      	beq.n	8005544 <_reclaim_reent+0xb0>
 80054a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054a2:	b143      	cbz	r3, 80054b6 <_reclaim_reent+0x22>
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d14a      	bne.n	8005540 <_reclaim_reent+0xac>
 80054aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ac:	6819      	ldr	r1, [r3, #0]
 80054ae:	b111      	cbz	r1, 80054b6 <_reclaim_reent+0x22>
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 f857 	bl	8005564 <_free_r>
 80054b6:	6961      	ldr	r1, [r4, #20]
 80054b8:	b111      	cbz	r1, 80054c0 <_reclaim_reent+0x2c>
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 f852 	bl	8005564 <_free_r>
 80054c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054c2:	b111      	cbz	r1, 80054ca <_reclaim_reent+0x36>
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 f84d 	bl	8005564 <_free_r>
 80054ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054cc:	b111      	cbz	r1, 80054d4 <_reclaim_reent+0x40>
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 f848 	bl	8005564 <_free_r>
 80054d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80054d6:	b111      	cbz	r1, 80054de <_reclaim_reent+0x4a>
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 f843 	bl	8005564 <_free_r>
 80054de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054e0:	b111      	cbz	r1, 80054e8 <_reclaim_reent+0x54>
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 f83e 	bl	8005564 <_free_r>
 80054e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054ea:	b111      	cbz	r1, 80054f2 <_reclaim_reent+0x5e>
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 f839 	bl	8005564 <_free_r>
 80054f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80054f4:	b111      	cbz	r1, 80054fc <_reclaim_reent+0x68>
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f834 	bl	8005564 <_free_r>
 80054fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054fe:	b111      	cbz	r1, 8005506 <_reclaim_reent+0x72>
 8005500:	4620      	mov	r0, r4
 8005502:	f000 f82f 	bl	8005564 <_free_r>
 8005506:	69a3      	ldr	r3, [r4, #24]
 8005508:	b1e3      	cbz	r3, 8005544 <_reclaim_reent+0xb0>
 800550a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800550c:	4620      	mov	r0, r4
 800550e:	4798      	blx	r3
 8005510:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005512:	b1b9      	cbz	r1, 8005544 <_reclaim_reent+0xb0>
 8005514:	4620      	mov	r0, r4
 8005516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800551a:	f7ff bfad 	b.w	8005478 <cleanup_glue>
 800551e:	5949      	ldr	r1, [r1, r5]
 8005520:	b941      	cbnz	r1, 8005534 <_reclaim_reent+0xa0>
 8005522:	3504      	adds	r5, #4
 8005524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005526:	2d80      	cmp	r5, #128	; 0x80
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	d1f8      	bne.n	800551e <_reclaim_reent+0x8a>
 800552c:	4620      	mov	r0, r4
 800552e:	f000 f819 	bl	8005564 <_free_r>
 8005532:	e7ba      	b.n	80054aa <_reclaim_reent+0x16>
 8005534:	680e      	ldr	r6, [r1, #0]
 8005536:	4620      	mov	r0, r4
 8005538:	f000 f814 	bl	8005564 <_free_r>
 800553c:	4631      	mov	r1, r6
 800553e:	e7ef      	b.n	8005520 <_reclaim_reent+0x8c>
 8005540:	2500      	movs	r5, #0
 8005542:	e7ef      	b.n	8005524 <_reclaim_reent+0x90>
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	bf00      	nop
 8005548:	20000010 	.word	0x20000010

0800554c <__malloc_lock>:
 800554c:	4801      	ldr	r0, [pc, #4]	; (8005554 <__malloc_lock+0x8>)
 800554e:	f7ff bf7b 	b.w	8005448 <__retarget_lock_acquire_recursive>
 8005552:	bf00      	nop
 8005554:	20000f24 	.word	0x20000f24

08005558 <__malloc_unlock>:
 8005558:	4801      	ldr	r0, [pc, #4]	; (8005560 <__malloc_unlock+0x8>)
 800555a:	f7ff bf76 	b.w	800544a <__retarget_lock_release_recursive>
 800555e:	bf00      	nop
 8005560:	20000f24 	.word	0x20000f24

08005564 <_free_r>:
 8005564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005566:	2900      	cmp	r1, #0
 8005568:	d044      	beq.n	80055f4 <_free_r+0x90>
 800556a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556e:	9001      	str	r0, [sp, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f1a1 0404 	sub.w	r4, r1, #4
 8005576:	bfb8      	it	lt
 8005578:	18e4      	addlt	r4, r4, r3
 800557a:	f7ff ffe7 	bl	800554c <__malloc_lock>
 800557e:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <_free_r+0x94>)
 8005580:	9801      	ldr	r0, [sp, #4]
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	b933      	cbnz	r3, 8005594 <_free_r+0x30>
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	6014      	str	r4, [r2, #0]
 800558a:	b003      	add	sp, #12
 800558c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005590:	f7ff bfe2 	b.w	8005558 <__malloc_unlock>
 8005594:	42a3      	cmp	r3, r4
 8005596:	d908      	bls.n	80055aa <_free_r+0x46>
 8005598:	6825      	ldr	r5, [r4, #0]
 800559a:	1961      	adds	r1, r4, r5
 800559c:	428b      	cmp	r3, r1
 800559e:	bf01      	itttt	eq
 80055a0:	6819      	ldreq	r1, [r3, #0]
 80055a2:	685b      	ldreq	r3, [r3, #4]
 80055a4:	1949      	addeq	r1, r1, r5
 80055a6:	6021      	streq	r1, [r4, #0]
 80055a8:	e7ed      	b.n	8005586 <_free_r+0x22>
 80055aa:	461a      	mov	r2, r3
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	b10b      	cbz	r3, 80055b4 <_free_r+0x50>
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	d9fa      	bls.n	80055aa <_free_r+0x46>
 80055b4:	6811      	ldr	r1, [r2, #0]
 80055b6:	1855      	adds	r5, r2, r1
 80055b8:	42a5      	cmp	r5, r4
 80055ba:	d10b      	bne.n	80055d4 <_free_r+0x70>
 80055bc:	6824      	ldr	r4, [r4, #0]
 80055be:	4421      	add	r1, r4
 80055c0:	1854      	adds	r4, r2, r1
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	6011      	str	r1, [r2, #0]
 80055c6:	d1e0      	bne.n	800558a <_free_r+0x26>
 80055c8:	681c      	ldr	r4, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	6053      	str	r3, [r2, #4]
 80055ce:	4421      	add	r1, r4
 80055d0:	6011      	str	r1, [r2, #0]
 80055d2:	e7da      	b.n	800558a <_free_r+0x26>
 80055d4:	d902      	bls.n	80055dc <_free_r+0x78>
 80055d6:	230c      	movs	r3, #12
 80055d8:	6003      	str	r3, [r0, #0]
 80055da:	e7d6      	b.n	800558a <_free_r+0x26>
 80055dc:	6825      	ldr	r5, [r4, #0]
 80055de:	1961      	adds	r1, r4, r5
 80055e0:	428b      	cmp	r3, r1
 80055e2:	bf04      	itt	eq
 80055e4:	6819      	ldreq	r1, [r3, #0]
 80055e6:	685b      	ldreq	r3, [r3, #4]
 80055e8:	6063      	str	r3, [r4, #4]
 80055ea:	bf04      	itt	eq
 80055ec:	1949      	addeq	r1, r1, r5
 80055ee:	6021      	streq	r1, [r4, #0]
 80055f0:	6054      	str	r4, [r2, #4]
 80055f2:	e7ca      	b.n	800558a <_free_r+0x26>
 80055f4:	b003      	add	sp, #12
 80055f6:	bd30      	pop	{r4, r5, pc}
 80055f8:	20000f28 	.word	0x20000f28

080055fc <_init>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	bf00      	nop
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr

08005608 <_fini>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr
