
010_FreeRTOS_vTaskDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c0  080059c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080059c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000049f8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a0c  20004a0c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bd5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000318b  00000000  00000000  00037c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  0003ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001308  00000000  00000000  0003c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035cd  00000000  00000000  0003d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d37  00000000  00000000  00040a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3dff  00000000  00000000  000567d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a5d3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000551c  00000000  00000000  0012a624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005940 	.word	0x08005940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005940 	.word	0x08005940

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vTaskFunction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vTaskFunction(void *pvParameters)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	char *pcTaskName;
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
 80004ec:	23fa      	movs	r3, #250	; 0xfa
 80004ee:	60fb      	str	r3, [r7, #12]
	pcTaskName = (char *)pvParameters;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	60bb      	str	r3, [r7, #8]

	for(;;)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)pcTaskName, strlen(pcTaskName), HAL_MAX_DELAY);
 80004f4:	68b8      	ldr	r0, [r7, #8]
 80004f6:	f7ff fe6b 	bl	80001d0 <strlen>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	68b9      	ldr	r1, [r7, #8]
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <vTaskFunction+0x30>)
 8000506:	f001 fdb4 	bl	8002072 <HAL_UART_Transmit>
		vTaskDelay(xDelay250ms);
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f003 fcfe 	bl	8003f0c <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcTaskName, strlen(pcTaskName), HAL_MAX_DELAY);
 8000510:	e7f0      	b.n	80004f4 <vTaskFunction+0x10>
 8000512:	bf00      	nop
 8000514:	20000030 	.word	0x20000030

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fa77 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f819 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f8ab 	bl	8000680 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f87f 	bl	800062c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTaskFunction, "Task1", 1000, (void *)pcTextForTask1, 1, NULL);
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <main+0x34>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2200      	movs	r2, #0
 8000534:	9201      	str	r2, [sp, #4]
 8000536:	2201      	movs	r2, #1
 8000538:	9200      	str	r2, [sp, #0]
 800053a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800053e:	4904      	ldr	r1, [pc, #16]	; (8000550 <main+0x38>)
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <main+0x3c>)
 8000542:	f003 fb9e 	bl	8003c82 <xTaskCreate>
  vTaskStartScheduler();
 8000546:	f003 fd15 	bl	8003f74 <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x32>
 800054c:	20000000 	.word	0x20000000
 8000550:	08005958 	.word	0x08005958
 8000554:	080004e5 	.word	0x080004e5

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f9e2 	bl	8005930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fd82 	bl	80010e8 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ea:	f000 f8ad 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2105      	movs	r1, #5
 800060c:	4618      	mov	r0, r3
 800060e:	f000 ffe3 	bl	80015d8 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000618:	f000 f896 	bl	8000748 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_USART2_UART_Init+0x50>)
 8000634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000664:	f001 fcb8 	bl	8001fd8 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066e:	f000 f86b 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000030 	.word	0x20000030
 800067c:	40004400 	.word	0x40004400

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_GPIO_Init+0x9c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a1f      	ldr	r2, [pc, #124]	; (800071c <MX_GPIO_Init+0x9c>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_GPIO_Init+0x9c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_GPIO_Init+0x9c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_GPIO_Init+0x9c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_GPIO_Init+0x9c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_GPIO_Init+0x9c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <MX_GPIO_Init+0x9c>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_GPIO_Init+0xa0>)
 80006f2:	f000 fcdf 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_GPIO_Init+0xa0>)
 8000710:	f000 fb34 	bl	8000d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00

08000724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000736:	f000 f98d 	bl	8000a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40002000 	.word	0x40002000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_MspInit+0x54>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <HAL_MspInit+0x54>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x54>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_MspInit+0x54>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_MspInit+0x54>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_MspInit+0x54>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	210f      	movs	r1, #15
 8000796:	f06f 0001 	mvn.w	r0, #1
 800079a:	f000 fa33 	bl	8000c04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <HAL_UART_MspInit+0x94>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d133      	bne.n	8000836 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_UART_MspInit+0x98>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <HAL_UART_MspInit+0x98>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_UART_MspInit+0x98>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_UART_MspInit+0x98>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_UART_MspInit+0x98>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_UART_MspInit+0x98>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000806:	230c      	movs	r3, #12
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000816:	2307      	movs	r3, #7
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <HAL_UART_MspInit+0x9c>)
 8000822:	f000 faab 	bl	8000d7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2105      	movs	r1, #5
 800082a:	2026      	movs	r0, #38	; 0x26
 800082c:	f000 f9ea 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000830:	2026      	movs	r0, #38	; 0x26
 8000832:	f000 fa03 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000

0800084c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4b33      	ldr	r3, [pc, #204]	; (8000930 <HAL_InitTick+0xe4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a32      	ldr	r2, [pc, #200]	; (8000930 <HAL_InitTick+0xe4>)
 8000866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b30      	ldr	r3, [pc, #192]	; (8000930 <HAL_InitTick+0xe4>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000878:	f107 0210 	add.w	r2, r7, #16
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f8c8 	bl	8001a18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	2b00      	cmp	r3, #0
 8000890:	d103      	bne.n	800089a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000892:	f001 f899 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 8000896:	6378      	str	r0, [r7, #52]	; 0x34
 8000898:	e004      	b.n	80008a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800089a:	f001 f895 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 800089e:	4603      	mov	r3, r0
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <HAL_InitTick+0xe8>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	0c9b      	lsrs	r3, r3, #18
 80008ae:	3b01      	subs	r3, #1
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <HAL_InitTick+0xec>)
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <HAL_InitTick+0xf0>)
 80008b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <HAL_InitTick+0xec>)
 80008ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008be:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <HAL_InitTick+0xec>)
 80008c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_InitTick+0xec>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <HAL_InitTick+0xec>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_InitTick+0xec>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80008d8:	4817      	ldr	r0, [pc, #92]	; (8000938 <HAL_InitTick+0xec>)
 80008da:	f001 f8cf 	bl	8001a7c <HAL_TIM_Base_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d11b      	bne.n	8000924 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80008ec:	4812      	ldr	r0, [pc, #72]	; (8000938 <HAL_InitTick+0xec>)
 80008ee:	f001 f91f 	bl	8001b30 <HAL_TIM_Base_Start_IT>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d111      	bne.n	8000924 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000900:	202d      	movs	r0, #45	; 0x2d
 8000902:	f000 f99b 	bl	8000c3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d808      	bhi.n	800091e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	202d      	movs	r0, #45	; 0x2d
 8000912:	f000 f977 	bl	8000c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_InitTick+0xf4>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	e002      	b.n	8000924 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000924:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000928:	4618      	mov	r0, r3
 800092a:	3738      	adds	r7, #56	; 0x38
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	431bde83 	.word	0x431bde83
 8000938:	20000074 	.word	0x20000074
 800093c:	40002000 	.word	0x40002000
 8000940:	20000008 	.word	0x20000008

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <USART2_IRQHandler+0x10>)
 8000976:	f001 fc0f 	bl	8002198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000030 	.word	0x20000030

08000984 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800098a:	f001 f941 	bl	8001c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000074 	.word	0x20000074

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f004 ff6f 	bl	80058cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fd93 	bl	8000518 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a00:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 8000a04:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a08:	20004a0c 	.word	0x20004a0c

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f8d8 	bl	8000bee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f7ff ff04 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fe86 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000000c 	.word	0x2000000c
 8000a78:	200000bc 	.word	0x200000bc

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200000bc 	.word	0x200000bc

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff4c 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c16:	f7ff ff61 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff ffb1 	bl	8000b88 <NVIC_EncodePriority>
 8000c26:	4602      	mov	r2, r0
 8000c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff80 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff54 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c66:	f7ff ff09 	bl	8000a7c <HAL_GetTick>
 8000c6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d008      	beq.n	8000c8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e052      	b.n	8000d30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0216 	bic.w	r2, r2, #22
 8000c98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	695a      	ldr	r2, [r3, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ca8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d103      	bne.n	8000cba <HAL_DMA_Abort+0x62>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d007      	beq.n	8000cca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 0208 	bic.w	r2, r2, #8
 8000cc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 0201 	bic.w	r2, r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cda:	e013      	b.n	8000d04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cdc:	f7ff fece 	bl	8000a7c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d90c      	bls.n	8000d04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2220      	movs	r2, #32
 8000cee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e015      	b.n	8000d30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1e4      	bne.n	8000cdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d16:	223f      	movs	r2, #63	; 0x3f
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d004      	beq.n	8000d56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00c      	b.n	8000d70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2205      	movs	r2, #5
 8000d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e16b      	b.n	8001070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 815a 	bne.w	800106a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80b4 	beq.w	800106a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b60      	ldr	r3, [pc, #384]	; (8001088 <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a5f      	ldr	r2, [pc, #380]	; (8001088 <HAL_GPIO_Init+0x30c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <HAL_GPIO_Init+0x30c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	; (800108c <HAL_GPIO_Init+0x310>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a52      	ldr	r2, [pc, #328]	; (8001090 <HAL_GPIO_Init+0x314>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d02b      	beq.n	8000fa2 <HAL_GPIO_Init+0x226>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a51      	ldr	r2, [pc, #324]	; (8001094 <HAL_GPIO_Init+0x318>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d025      	beq.n	8000f9e <HAL_GPIO_Init+0x222>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a50      	ldr	r2, [pc, #320]	; (8001098 <HAL_GPIO_Init+0x31c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d01f      	beq.n	8000f9a <HAL_GPIO_Init+0x21e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	; (800109c <HAL_GPIO_Init+0x320>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d019      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x216>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4d      	ldr	r2, [pc, #308]	; (80010a4 <HAL_GPIO_Init+0x328>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x212>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_GPIO_Init+0x32c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x20e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	; (80010ac <HAL_GPIO_Init+0x330>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x20a>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00e      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f86:	2308      	movs	r3, #8
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	; (800108c <HAL_GPIO_Init+0x310>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe6:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fec:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103a:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_GPIO_Init+0x334>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f ae90 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40021400 	.word	0x40021400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40021c00 	.word	0x40021c00
 80010b0:	40013c00 	.word	0x40013c00

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e267      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d075      	beq.n	80011f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	4b88      	ldr	r3, [pc, #544]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d00c      	beq.n	800112c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001112:	4b85      	ldr	r3, [pc, #532]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d112      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b82      	ldr	r3, [pc, #520]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b7e      	ldr	r3, [pc, #504]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d05b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x108>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d157      	bne.n	80011f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e242      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x74>
 800114e:	4b76      	ldr	r3, [pc, #472]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a75      	ldr	r2, [pc, #468]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x98>
 8001166:	4b70      	ldr	r3, [pc, #448]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6f      	ldr	r2, [pc, #444]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b6d      	ldr	r3, [pc, #436]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6c      	ldr	r2, [pc, #432]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 8001180:	4b69      	ldr	r3, [pc, #420]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a68      	ldr	r2, [pc, #416]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b66      	ldr	r3, [pc, #408]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a65      	ldr	r2, [pc, #404]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc6c 	bl	8000a7c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fc68 	bl	8000a7c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e207      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xc0>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc58 	bl	8000a7c <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fc54 	bl	8000a7c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1f3      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b51      	ldr	r3, [pc, #324]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0xe8>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d063      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b41      	ldr	r3, [pc, #260]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1c7      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e03a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_RCC_OscConfig+0x244>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fc0d 	bl	8000a7c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fc09 	bl	8000a7c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1a8      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4925      	ldr	r1, [pc, #148]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_RCC_OscConfig+0x244>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fbec 	bl	8000a7c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fbe8 	bl	8000a7c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e187      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d036      	beq.n	8001340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_RCC_OscConfig+0x248>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fbcc 	bl	8000a7c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff fbc8 	bl	8000a7c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e167      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80012fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x200>
 8001306:	e01b      	b.n	8001340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_RCC_OscConfig+0x248>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fbb5 	bl	8000a7c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	e00e      	b.n	8001334 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fbb1 	bl	8000a7c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d907      	bls.n	8001334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e150      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001328:	40023800 	.word	0x40023800
 800132c:	42470000 	.word	0x42470000
 8001330:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ea      	bne.n	8001316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8097 	beq.w	800147c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b81      	ldr	r3, [pc, #516]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a7c      	ldr	r2, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b77      	ldr	r3, [pc, #476]	; (800155c <HAL_RCC_OscConfig+0x474>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d118      	bne.n	80013bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b74      	ldr	r3, [pc, #464]	; (800155c <HAL_RCC_OscConfig+0x474>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a73      	ldr	r2, [pc, #460]	; (800155c <HAL_RCC_OscConfig+0x474>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff fb71 	bl	8000a7c <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139e:	f7ff fb6d 	bl	8000a7c <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e10c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_OscConfig+0x474>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x2ea>
 80013c4:	4b64      	ldr	r3, [pc, #400]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	4a63      	ldr	r2, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	; 0x70
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x30c>
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
 80013e6:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013f4:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a57      	ldr	r2, [pc, #348]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	4b55      	ldr	r3, [pc, #340]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a54      	ldr	r2, [pc, #336]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d015      	beq.n	8001440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fb32 	bl	8000a7c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141a:	e00a      	b.n	8001432 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fb2e 	bl	8000a7c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	; 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e0cb      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0ee      	beq.n	800141c <HAL_RCC_OscConfig+0x334>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fb1c 	bl	8000a7c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fb18 	bl	8000a7c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0b5      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a38      	ldr	r2, [pc, #224]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80a1 	beq.w	80015c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d05c      	beq.n	800154c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d141      	bne.n	800151e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff faec 	bl	8000a7c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fae8 	bl	8000a7c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e087      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69da      	ldr	r2, [r3, #28]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	019b      	lsls	r3, r3, #6
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	3b01      	subs	r3, #1
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	491b      	ldr	r1, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fac1 	bl	8000a7c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fabd 	bl	8000a7c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e05c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x416>
 800151c:	e054      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff faaa 	bl	8000a7c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff faa6 	bl	8000a7c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e045      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x444>
 800154a:	e03d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e038      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000
 8001560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x4ec>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d028      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d121      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d11a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800159a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	4293      	cmp	r3, r2
 800159e:	d111      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	3b01      	subs	r3, #1
 80015ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0cc      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d90c      	bls.n	8001614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b65      	ldr	r3, [pc, #404]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800164e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d044      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e067      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4934      	ldr	r1, [pc, #208]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff f9d8 	bl	8000a7c <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff f9d4 	bl	8000a7c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20c      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f864 	bl	800084c <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	080059a0 	.word	0x080059a0
 800179c:	20000004 	.word	0x20000004
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a8:	b094      	sub	sp, #80	; 0x50
 80017aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
 80017b0:	2300      	movs	r3, #0
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017b4:	2300      	movs	r3, #0
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x40>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	f200 80e1 	bhi.w	8001990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x3a>
 80017d6:	e0db      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017dc:	e0db      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_GetSysClockFreq+0x208>)
 80017e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017e2:	e0d8      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d063      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
 8001804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
 8001812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001816:	4622      	mov	r2, r4
 8001818:	462b      	mov	r3, r5
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0159      	lsls	r1, r3, #5
 8001824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001828:	0150      	lsls	r0, r2, #5
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4621      	mov	r1, r4
 8001830:	1a51      	subs	r1, r2, r1
 8001832:	6139      	str	r1, [r7, #16]
 8001834:	4629      	mov	r1, r5
 8001836:	eb63 0301 	sbc.w	r3, r3, r1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001848:	4659      	mov	r1, fp
 800184a:	018b      	lsls	r3, r1, #6
 800184c:	4651      	mov	r1, sl
 800184e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001852:	4651      	mov	r1, sl
 8001854:	018a      	lsls	r2, r1, #6
 8001856:	4651      	mov	r1, sl
 8001858:	ebb2 0801 	subs.w	r8, r2, r1
 800185c:	4659      	mov	r1, fp
 800185e:	eb63 0901 	sbc.w	r9, r3, r1
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800186e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001876:	4690      	mov	r8, r2
 8001878:	4699      	mov	r9, r3
 800187a:	4623      	mov	r3, r4
 800187c:	eb18 0303 	adds.w	r3, r8, r3
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	462b      	mov	r3, r5
 8001884:	eb49 0303 	adc.w	r3, r9, r3
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001896:	4629      	mov	r1, r5
 8001898:	024b      	lsls	r3, r1, #9
 800189a:	4621      	mov	r1, r4
 800189c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a0:	4621      	mov	r1, r4
 80018a2:	024a      	lsls	r2, r1, #9
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018aa:	2200      	movs	r2, #0
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018b4:	f7fe fc94 	bl	80001e0 <__aeabi_uldivmod>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4613      	mov	r3, r2
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018c0:	e058      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	2200      	movs	r2, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	4611      	mov	r1, r2
 80018ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d2:	623b      	str	r3, [r7, #32]
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018dc:	4642      	mov	r2, r8
 80018de:	464b      	mov	r3, r9
 80018e0:	f04f 0000 	mov.w	r0, #0
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	0159      	lsls	r1, r3, #5
 80018ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ee:	0150      	lsls	r0, r2, #5
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4641      	mov	r1, r8
 80018f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018fa:	4649      	mov	r1, r9
 80018fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800190c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001914:	ebb2 040a 	subs.w	r4, r2, sl
 8001918:	eb63 050b 	sbc.w	r5, r3, fp
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	00eb      	lsls	r3, r5, #3
 8001926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192a:	00e2      	lsls	r2, r4, #3
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	4643      	mov	r3, r8
 8001932:	18e3      	adds	r3, r4, r3
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	464b      	mov	r3, r9
 8001938:	eb45 0303 	adc.w	r3, r5, r3
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194a:	4629      	mov	r1, r5
 800194c:	028b      	lsls	r3, r1, #10
 800194e:	4621      	mov	r1, r4
 8001950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001954:	4621      	mov	r1, r4
 8001956:	028a      	lsls	r2, r1, #10
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195e:	2200      	movs	r2, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	61fa      	str	r2, [r7, #28]
 8001964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001968:	f7fe fc3a 	bl	80001e0 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001998:	4618      	mov	r0, r3
 800199a:	3750      	adds	r7, #80	; 0x50
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	007a1200 	.word	0x007a1200

080019b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	080059b0 	.word	0x080059b0

080019f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f4:	f7ff ffdc 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	0b5b      	lsrs	r3, r3, #13
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	; (8001a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	080059b0 	.word	0x080059b0

08001a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	220f      	movs	r2, #15
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0203 	and.w	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_RCC_GetClockConfig+0x60>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0207 	and.w	r2, r3, #7
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e041      	b.n	8001b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f839 	bl	8001b1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 f9d8 	bl	8001e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d001      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e04e      	b.n	8001be6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d022      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x80>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b72:	d01d      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x80>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d018      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x80>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_TIM_Base_Start_IT+0xcc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d013      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x80>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00e      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x80>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d009      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x80>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d004      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x80>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d111      	bne.n	8001bd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d010      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd2:	e007      	b.n	8001be4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40000800 	.word	0x40000800
 8001c00:	40000c00 	.word	0x40000c00
 8001c04:	40010400 	.word	0x40010400
 8001c08:	40014000 	.word	0x40014000
 8001c0c:	40001800 	.word	0x40001800

08001c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d122      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d11b      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0202 	mvn.w	r2, #2
 8001c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8ee 	bl	8001e34 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8e0 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8f1 	bl	8001e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0204 	mvn.w	r2, #4
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8c4 	bl	8001e34 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8b6 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f8c7 	bl	8001e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0208 	mvn.w	r2, #8
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f89a 	bl	8001e34 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f88c 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f89d 	bl	8001e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0210 	mvn.w	r2, #16
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f870 	bl	8001e34 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f862 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f873 	bl	8001e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10e      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0201 	mvn.w	r2, #1
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fcc8 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	2b80      	cmp	r3, #128	; 0x80
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	2b80      	cmp	r3, #128	; 0x80
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f902 	bl	8001fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b40      	cmp	r3, #64	; 0x40
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f838 	bl	8001e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0220 	mvn.w	r2, #32
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8cc 	bl	8001fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a40      	ldr	r2, [pc, #256]	; (8001f84 <TIM_Base_SetConfig+0x114>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d013      	beq.n	8001eb0 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d00f      	beq.n	8001eb0 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3d      	ldr	r2, [pc, #244]	; (8001f88 <TIM_Base_SetConfig+0x118>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00b      	beq.n	8001eb0 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3c      	ldr	r2, [pc, #240]	; (8001f8c <TIM_Base_SetConfig+0x11c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d007      	beq.n	8001eb0 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <TIM_Base_SetConfig+0x120>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d003      	beq.n	8001eb0 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3a      	ldr	r2, [pc, #232]	; (8001f94 <TIM_Base_SetConfig+0x124>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d108      	bne.n	8001ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <TIM_Base_SetConfig+0x114>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed0:	d027      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2c      	ldr	r2, [pc, #176]	; (8001f88 <TIM_Base_SetConfig+0x118>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d023      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <TIM_Base_SetConfig+0x11c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <TIM_Base_SetConfig+0x120>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01b      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <TIM_Base_SetConfig+0x124>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d017      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a28      	ldr	r2, [pc, #160]	; (8001f98 <TIM_Base_SetConfig+0x128>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <TIM_Base_SetConfig+0x12c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00f      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <TIM_Base_SetConfig+0x130>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <TIM_Base_SetConfig+0x134>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <TIM_Base_SetConfig+0x138>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a23      	ldr	r2, [pc, #140]	; (8001fac <TIM_Base_SetConfig+0x13c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d108      	bne.n	8001f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <TIM_Base_SetConfig+0x114>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <TIM_Base_SetConfig+0xf8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <TIM_Base_SetConfig+0x124>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d103      	bne.n	8001f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	615a      	str	r2, [r3, #20]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800
 8001f90:	40000c00 	.word	0x40000c00
 8001f94:	40010400 	.word	0x40010400
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	40014400 	.word	0x40014400
 8001fa0:	40014800 	.word	0x40014800
 8001fa4:	40001800 	.word	0x40001800
 8001fa8:	40001c00 	.word	0x40001c00
 8001fac:	40002000 	.word	0x40002000

08001fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e03f      	b.n	800206a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fbd4 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800201a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fd7b 	bl	8002b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b08a      	sub	sp, #40	; 0x28
 8002076:	af02      	add	r7, sp, #8
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b20      	cmp	r3, #32
 8002090:	d17c      	bne.n	800218c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_UART_Transmit+0x2c>
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e075      	b.n	800218e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_UART_Transmit+0x3e>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e06e      	b.n	800218e <HAL_UART_Transmit+0x11c>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2221      	movs	r2, #33	; 0x21
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020c6:	f7fe fcd9 	bl	8000a7c <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	88fa      	ldrh	r2, [r7, #6]
 80020d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	88fa      	ldrh	r2, [r7, #6]
 80020d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e0:	d108      	bne.n	80020f4 <HAL_UART_Transmit+0x82>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d104      	bne.n	80020f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	e003      	b.n	80020fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002104:	e02a      	b.n	800215c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2200      	movs	r2, #0
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 faf9 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e036      	b.n	800218e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002134:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	3302      	adds	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	e007      	b.n	800214e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	781a      	ldrb	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1cf      	bne.n	8002106 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2200      	movs	r2, #0
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fac9 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e006      	b.n	800218e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0ba      	sub	sp, #232	; 0xe8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10f      	bne.n	80021fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_UART_IRQHandler+0x66>
 80021ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fbd3 	bl	80029a2 <UART_Receive_IT>
      return;
 80021fc:	e256      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80de 	beq.w	80023c4 <HAL_UART_IRQHandler+0x22c>
 8002208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d106      	bne.n	8002222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002218:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80d1 	beq.w	80023c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_UART_IRQHandler+0xae>
 800222e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_UART_IRQHandler+0xd2>
 8002252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800226a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_UART_IRQHandler+0xf6>
 8002276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f043 0204 	orr.w	r2, r3, #4
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800228e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d011      	beq.n	80022be <HAL_UART_IRQHandler+0x126>
 800229a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f043 0208 	orr.w	r2, r3, #8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 81ed 	beq.w	80026a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_UART_IRQHandler+0x14e>
 80022d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fb5e 	bl	80029a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <HAL_UART_IRQHandler+0x17a>
 800230a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d04f      	beq.n	80023b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa66 	bl	80027e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d141      	bne.n	80023aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3314      	adds	r3, #20
 800232c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800233c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3314      	adds	r3, #20
 800234e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800235e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002362:	e841 2300 	strex	r3, r2, [r1]
 8002366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800236a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1d9      	bne.n	8002326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	2b00      	cmp	r3, #0
 8002378:	d013      	beq.n	80023a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	4a7d      	ldr	r2, [pc, #500]	; (8002574 <HAL_UART_IRQHandler+0x3dc>)
 8002380:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fcd6 	bl	8000d38 <HAL_DMA_Abort_IT>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800239c:	4610      	mov	r0, r2
 800239e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a0:	e00e      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f99a 	bl	80026dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	e00a      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f996 	bl	80026dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	e006      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f992 	bl	80026dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023be:	e170      	b.n	80026a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	bf00      	nop
    return;
 80023c2:	e16e      	b.n	80026a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 814a 	bne.w	8002662 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8143 	beq.w	8002662 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 813c 	beq.w	8002662 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	f040 80b4 	bne.w	8002578 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800241c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8140 	beq.w	80026a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800242a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800242e:	429a      	cmp	r2, r3
 8002430:	f080 8139 	bcs.w	80026a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800243a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002446:	f000 8088 	beq.w	800255a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002458:	e853 3f00 	ldrex	r3, [r3]
 800245c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800247a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002482:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002486:	e841 2300 	strex	r3, r2, [r1]
 800248a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800248e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1d9      	bne.n	800244a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3314      	adds	r3, #20
 800249c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a0:	e853 3f00 	ldrex	r3, [r3]
 80024a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3314      	adds	r3, #20
 80024b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024c6:	e841 2300 	strex	r3, r2, [r1]
 80024ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1e1      	bne.n	8002496 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3314      	adds	r3, #20
 80024d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3314      	adds	r3, #20
 80024f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80024fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e3      	bne.n	80024d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002522:	e853 3f00 	ldrex	r3, [r3]
 8002526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800253c:	65ba      	str	r2, [r7, #88]	; 0x58
 800253e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002544:	e841 2300 	strex	r3, r2, [r1]
 8002548:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800254a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e3      	bne.n	8002518 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fb7f 	bl	8000c58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002562:	b29b      	uxth	r3, r3
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	b29b      	uxth	r3, r3
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f8c0 	bl	80026f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002570:	e099      	b.n	80026a6 <HAL_UART_IRQHandler+0x50e>
 8002572:	bf00      	nop
 8002574:	080028ab 	.word	0x080028ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002580:	b29b      	uxth	r3, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 808b 	beq.w	80026aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8086 	beq.w	80026aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	e853 3f00 	ldrex	r3, [r3]
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025c2:	647a      	str	r2, [r7, #68]	; 0x44
 80025c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ca:	e841 2300 	strex	r3, r2, [r1]
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e3      	bne.n	800259e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3314      	adds	r3, #20
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	e853 3f00 	ldrex	r3, [r3]
 80025e4:	623b      	str	r3, [r7, #32]
   return(result);
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3314      	adds	r3, #20
 80025f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80025fa:	633a      	str	r2, [r7, #48]	; 0x30
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e3      	bne.n	80025d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	e853 3f00 	ldrex	r3, [r3]
 800262a:	60fb      	str	r3, [r7, #12]
   return(result);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0310 	bic.w	r3, r3, #16
 8002632:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002640:	61fa      	str	r2, [r7, #28]
 8002642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002644:	69b9      	ldr	r1, [r7, #24]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	617b      	str	r3, [r7, #20]
   return(result);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e3      	bne.n	800261c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f848 	bl	80026f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002660:	e023      	b.n	80026aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_UART_IRQHandler+0x4ea>
 800266e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f929 	bl	80028d2 <UART_Transmit_IT>
    return;
 8002680:	e014      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00e      	beq.n	80026ac <HAL_UART_IRQHandler+0x514>
 800268e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f969 	bl	8002972 <UART_EndTransmit_IT>
    return;
 80026a0:	e004      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
    return;
 80026a2:	bf00      	nop
 80026a4:	e002      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
      return;
 80026a6:	bf00      	nop
 80026a8:	e000      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
      return;
 80026aa:	bf00      	nop
  }
}
 80026ac:	37e8      	adds	r7, #232	; 0xe8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop

080026b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b090      	sub	sp, #64	; 0x40
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002718:	e050      	b.n	80027bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d04c      	beq.n	80027bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <UART_WaitOnFlagUntilTimeout+0x30>
 8002728:	f7fe f9a8 	bl	8000a7c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002734:	429a      	cmp	r2, r3
 8002736:	d241      	bcs.n	80027bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	e853 3f00 	ldrex	r3, [r3]
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002758:	637a      	str	r2, [r7, #52]	; 0x34
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800275e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002760:	e841 2300 	strex	r3, r2, [r1]
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e5      	bne.n	8002738 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3314      	adds	r3, #20
 8002772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	613b      	str	r3, [r7, #16]
   return(result);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	63bb      	str	r3, [r7, #56]	; 0x38
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800278c:	623a      	str	r2, [r7, #32]
 800278e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	69f9      	ldr	r1, [r7, #28]
 8002792:	6a3a      	ldr	r2, [r7, #32]
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	61bb      	str	r3, [r7, #24]
   return(result);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e5      	bne.n	800276c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e00f      	b.n	80027dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4013      	ands	r3, r2
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d09f      	beq.n	800271a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3740      	adds	r7, #64	; 0x40
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b095      	sub	sp, #84	; 0x54
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800280c:	643a      	str	r2, [r7, #64]	; 0x40
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002814:	e841 2300 	strex	r3, r2, [r1]
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e5      	bne.n	80027ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3314      	adds	r3, #20
 8002826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	e853 3f00 	ldrex	r3, [r3]
 800282e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3314      	adds	r3, #20
 800283e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002840:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002848:	e841 2300 	strex	r3, r2, [r1]
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e5      	bne.n	8002820 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2b01      	cmp	r3, #1
 800285a:	d119      	bne.n	8002890 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	e853 3f00 	ldrex	r3, [r3]
 800286a:	60bb      	str	r3, [r7, #8]
   return(result);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f023 0310 	bic.w	r3, r3, #16
 8002872:	647b      	str	r3, [r7, #68]	; 0x44
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	330c      	adds	r3, #12
 800287a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800287c:	61ba      	str	r2, [r7, #24]
 800287e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002880:	6979      	ldr	r1, [r7, #20]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	613b      	str	r3, [r7, #16]
   return(result);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e5      	bne.n	800285c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800289e:	bf00      	nop
 80028a0:	3754      	adds	r7, #84	; 0x54
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff ff09 	bl	80026dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b21      	cmp	r3, #33	; 0x21
 80028e4:	d13e      	bne.n	8002964 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ee:	d114      	bne.n	800291a <UART_Transmit_IT+0x48>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d110      	bne.n	800291a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800290c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	1c9a      	adds	r2, r3, #2
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	621a      	str	r2, [r3, #32]
 8002918:	e008      	b.n	800292c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	1c59      	adds	r1, r3, #1
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6211      	str	r1, [r2, #32]
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29b      	uxth	r3, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4619      	mov	r1, r3
 800293a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10f      	bne.n	8002960 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800295e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002988:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fe8e 	bl	80026b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b08c      	sub	sp, #48	; 0x30
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b22      	cmp	r3, #34	; 0x22
 80029b4:	f040 80ab 	bne.w	8002b0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c0:	d117      	bne.n	80029f2 <UART_Receive_IT+0x50>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d113      	bne.n	80029f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
 80029f0:	e026      	b.n	8002a40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a04:	d007      	beq.n	8002a16 <UART_Receive_IT+0x74>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <UART_Receive_IT+0x82>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e008      	b.n	8002a36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d15a      	bne.n	8002b0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0220 	bic.w	r2, r2, #32
 8002a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d135      	bne.n	8002b00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f023 0310 	bic.w	r3, r3, #16
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	623a      	str	r2, [r7, #32]
 8002abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	69f9      	ldr	r1, [r7, #28]
 8002ac0:	6a3a      	ldr	r2, [r7, #32]
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e5      	bne.n	8002a9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d10a      	bne.n	8002af2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fdf9 	bl	80026f0 <HAL_UARTEx_RxEventCallback>
 8002afe:	e002      	b.n	8002b06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fde1 	bl	80026c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e002      	b.n	8002b10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3730      	adds	r7, #48	; 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b1c:	b0c0      	sub	sp, #256	; 0x100
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	68d9      	ldr	r1, [r3, #12]
 8002b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	ea40 0301 	orr.w	r3, r0, r1
 8002b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b70:	f021 010c 	bic.w	r1, r1, #12
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	6999      	ldr	r1, [r3, #24]
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	ea40 0301 	orr.w	r3, r0, r1
 8002b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <UART_SetConfig+0x2cc>)
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d005      	beq.n	8002bb8 <UART_SetConfig+0xa0>
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b8d      	ldr	r3, [pc, #564]	; (8002de8 <UART_SetConfig+0x2d0>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d104      	bne.n	8002bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bb8:	f7fe ff1a 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8002bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bc0:	e003      	b.n	8002bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc2:	f7fe ff01 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	f040 810c 	bne.w	8002df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bea:	4622      	mov	r2, r4
 8002bec:	462b      	mov	r3, r5
 8002bee:	1891      	adds	r1, r2, r2
 8002bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bf2:	415b      	adcs	r3, r3
 8002bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	eb12 0801 	adds.w	r8, r2, r1
 8002c00:	4629      	mov	r1, r5
 8002c02:	eb43 0901 	adc.w	r9, r3, r1
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c1a:	4690      	mov	r8, r2
 8002c1c:	4699      	mov	r9, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	eb18 0303 	adds.w	r3, r8, r3
 8002c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c28:	462b      	mov	r3, r5
 8002c2a:	eb49 0303 	adc.w	r3, r9, r3
 8002c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c46:	460b      	mov	r3, r1
 8002c48:	18db      	adds	r3, r3, r3
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	eb42 0303 	adc.w	r3, r2, r3
 8002c52:	657b      	str	r3, [r7, #84]	; 0x54
 8002c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c5c:	f7fd fac0 	bl	80001e0 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4b61      	ldr	r3, [pc, #388]	; (8002dec <UART_SetConfig+0x2d4>)
 8002c66:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	011c      	lsls	r4, r3, #4
 8002c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c80:	4642      	mov	r2, r8
 8002c82:	464b      	mov	r3, r9
 8002c84:	1891      	adds	r1, r2, r2
 8002c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c88:	415b      	adcs	r3, r3
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c90:	4641      	mov	r1, r8
 8002c92:	eb12 0a01 	adds.w	sl, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb43 0b01 	adc.w	fp, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cb0:	4692      	mov	sl, r2
 8002cb2:	469b      	mov	fp, r3
 8002cb4:	4643      	mov	r3, r8
 8002cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8002cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8002cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	18db      	adds	r3, r3, r3
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cf2:	f7fd fa75 	bl	80001e0 <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <UART_SetConfig+0x2d4>)
 8002cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2264      	movs	r2, #100	; 0x64
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	1acb      	subs	r3, r1, r3
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <UART_SetConfig+0x2d4>)
 8002d14:	fba3 2302 	umull	r2, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d20:	441c      	add	r4, r3
 8002d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d44:	4641      	mov	r1, r8
 8002d46:	1851      	adds	r1, r2, r1
 8002d48:	6339      	str	r1, [r7, #48]	; 0x30
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	414b      	adcs	r3, r1
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	00cb      	lsls	r3, r1, #3
 8002d60:	4651      	mov	r1, sl
 8002d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d66:	4651      	mov	r1, sl
 8002d68:	00ca      	lsls	r2, r1, #3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4642      	mov	r2, r8
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d78:	464b      	mov	r3, r9
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d98:	460b      	mov	r3, r1
 8002d9a:	18db      	adds	r3, r3, r3
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	4613      	mov	r3, r2
 8002da0:	eb42 0303 	adc.w	r3, r2, r3
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dae:	f7fd fa17 	bl	80001e0 <__aeabi_uldivmod>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <UART_SetConfig+0x2d4>)
 8002db8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	2164      	movs	r1, #100	; 0x64
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	3332      	adds	r3, #50	; 0x32
 8002dca:	4a08      	ldr	r2, [pc, #32]	; (8002dec <UART_SetConfig+0x2d4>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	f003 0207 	and.w	r2, r3, #7
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4422      	add	r2, r4
 8002dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002de0:	e105      	b.n	8002fee <UART_SetConfig+0x4d6>
 8002de2:	bf00      	nop
 8002de4:	40011000 	.word	0x40011000
 8002de8:	40011400 	.word	0x40011400
 8002dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e02:	4642      	mov	r2, r8
 8002e04:	464b      	mov	r3, r9
 8002e06:	1891      	adds	r1, r2, r2
 8002e08:	6239      	str	r1, [r7, #32]
 8002e0a:	415b      	adcs	r3, r3
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e12:	4641      	mov	r1, r8
 8002e14:	1854      	adds	r4, r2, r1
 8002e16:	4649      	mov	r1, r9
 8002e18:	eb43 0501 	adc.w	r5, r3, r1
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	00eb      	lsls	r3, r5, #3
 8002e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2a:	00e2      	lsls	r2, r4, #3
 8002e2c:	4614      	mov	r4, r2
 8002e2e:	461d      	mov	r5, r3
 8002e30:	4643      	mov	r3, r8
 8002e32:	18e3      	adds	r3, r4, r3
 8002e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e38:	464b      	mov	r3, r9
 8002e3a:	eb45 0303 	adc.w	r3, r5, r3
 8002e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e5e:	4629      	mov	r1, r5
 8002e60:	008b      	lsls	r3, r1, #2
 8002e62:	4621      	mov	r1, r4
 8002e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e68:	4621      	mov	r1, r4
 8002e6a:	008a      	lsls	r2, r1, #2
 8002e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e70:	f7fd f9b6 	bl	80001e0 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4b60      	ldr	r3, [pc, #384]	; (8002ffc <UART_SetConfig+0x4e4>)
 8002e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	011c      	lsls	r4, r3, #4
 8002e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e94:	4642      	mov	r2, r8
 8002e96:	464b      	mov	r3, r9
 8002e98:	1891      	adds	r1, r2, r2
 8002e9a:	61b9      	str	r1, [r7, #24]
 8002e9c:	415b      	adcs	r3, r3
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	1851      	adds	r1, r2, r1
 8002ea8:	6139      	str	r1, [r7, #16]
 8002eaa:	4649      	mov	r1, r9
 8002eac:	414b      	adcs	r3, r1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ebc:	4659      	mov	r1, fp
 8002ebe:	00cb      	lsls	r3, r1, #3
 8002ec0:	4651      	mov	r1, sl
 8002ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	00ca      	lsls	r2, r1, #3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	189b      	adds	r3, r3, r2
 8002ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ed8:	464b      	mov	r3, r9
 8002eda:	460a      	mov	r2, r1
 8002edc:	eb42 0303 	adc.w	r3, r2, r3
 8002ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002efc:	4649      	mov	r1, r9
 8002efe:	008b      	lsls	r3, r1, #2
 8002f00:	4641      	mov	r1, r8
 8002f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f06:	4641      	mov	r1, r8
 8002f08:	008a      	lsls	r2, r1, #2
 8002f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f0e:	f7fd f967 	bl	80001e0 <__aeabi_uldivmod>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <UART_SetConfig+0x4e4>)
 8002f18:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	2164      	movs	r1, #100	; 0x64
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	3332      	adds	r3, #50	; 0x32
 8002f2a:	4a34      	ldr	r2, [pc, #208]	; (8002ffc <UART_SetConfig+0x4e4>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f36:	441c      	add	r4, r3
 8002f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f40:	677a      	str	r2, [r7, #116]	; 0x74
 8002f42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f46:	4642      	mov	r2, r8
 8002f48:	464b      	mov	r3, r9
 8002f4a:	1891      	adds	r1, r2, r2
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	415b      	adcs	r3, r3
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f56:	4641      	mov	r1, r8
 8002f58:	1851      	adds	r1, r2, r1
 8002f5a:	6039      	str	r1, [r7, #0]
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	414b      	adcs	r3, r1
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f6e:	4659      	mov	r1, fp
 8002f70:	00cb      	lsls	r3, r1, #3
 8002f72:	4651      	mov	r1, sl
 8002f74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f78:	4651      	mov	r1, sl
 8002f7a:	00ca      	lsls	r2, r1, #3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4603      	mov	r3, r0
 8002f82:	4642      	mov	r2, r8
 8002f84:	189b      	adds	r3, r3, r2
 8002f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f88:	464b      	mov	r3, r9
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	eb42 0303 	adc.w	r3, r2, r3
 8002f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f9c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002faa:	4649      	mov	r1, r9
 8002fac:	008b      	lsls	r3, r1, #2
 8002fae:	4641      	mov	r1, r8
 8002fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	008a      	lsls	r2, r1, #2
 8002fb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fbc:	f7fd f910 	bl	80001e0 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <UART_SetConfig+0x4e4>)
 8002fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2164      	movs	r1, #100	; 0x64
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	3332      	adds	r3, #50	; 0x32
 8002fd8:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <UART_SetConfig+0x4e4>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4422      	add	r2, r4
 8002fec:	609a      	str	r2, [r3, #8]
}
 8002fee:	bf00      	nop
 8002ff0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffa:	bf00      	nop
 8002ffc:	51eb851f 	.word	0x51eb851f

08003000 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <SysTick_Handler+0x1c>)
 8003006:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003008:	f001 fbfc 	bl	8004804 <xTaskGetSchedulerState>
 800300c:	4603      	mov	r3, r0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d001      	beq.n	8003016 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003012:	f002 f9e1 	bl	80053d8 <xPortSysTickHandler>
  }
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000e010 	.word	0xe000e010

08003020 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <vApplicationGetIdleTaskMemory+0x2c>)
 8003030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4a06      	ldr	r2, [pc, #24]	; (8003050 <vApplicationGetIdleTaskMemory+0x30>)
 8003036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	601a      	str	r2, [r3, #0]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	200000c0 	.word	0x200000c0
 8003050:	2000011c 	.word	0x2000011c

08003054 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a07      	ldr	r2, [pc, #28]	; (8003080 <vApplicationGetTimerTaskMemory+0x2c>)
 8003064:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <vApplicationGetTimerTaskMemory+0x30>)
 800306a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	2000031c 	.word	0x2000031c
 8003084:	20000378 	.word	0x20000378

08003088 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f103 0208 	add.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f103 0208 	add.w	r2, r3, #8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f103 0208 	add.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800312a:	b480      	push	{r7}
 800312c:	b085      	sub	sp, #20
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d103      	bne.n	800314a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e00c      	b.n	8003164 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3308      	adds	r3, #8
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e002      	b.n	8003158 <vListInsert+0x2e>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	429a      	cmp	r2, r3
 8003162:	d2f6      	bcs.n	8003152 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	601a      	str	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6892      	ldr	r2, [r2, #8]
 80031b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6852      	ldr	r2, [r2, #4]
 80031bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d103      	bne.n	80031d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1e5a      	subs	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800321a:	f002 f84b 	bl	80052b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	441a      	add	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	3b01      	subs	r3, #1
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	441a      	add	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	22ff      	movs	r2, #255	; 0xff
 800325e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d114      	bne.n	800329a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01a      	beq.n	80032ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3310      	adds	r3, #16
 800327c:	4618      	mov	r0, r3
 800327e:	f001 f903 	bl	8004488 <xTaskRemoveFromEventList>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <xQueueGenericReset+0xcc>)
 800328a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	e009      	b.n	80032ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3310      	adds	r3, #16
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fef2 	bl	8003088 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3324      	adds	r3, #36	; 0x24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff feed 	bl	8003088 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032ae:	f002 f831 	bl	8005314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032b2:	2301      	movs	r3, #1
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08e      	sub	sp, #56	; 0x38
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003302:	bf00      	nop
 8003304:	e7fe      	b.n	8003304 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <xQueueGenericCreateStatic+0x52>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <xQueueGenericCreateStatic+0x56>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <xQueueGenericCreateStatic+0x58>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	623b      	str	r3, [r7, #32]
}
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <xQueueGenericCreateStatic+0x7e>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <xQueueGenericCreateStatic+0x82>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <xQueueGenericCreateStatic+0x84>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	61fb      	str	r3, [r7, #28]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800335e:	2350      	movs	r3, #80	; 0x50
 8003360:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b50      	cmp	r3, #80	; 0x50
 8003366:	d00a      	beq.n	800337e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	61bb      	str	r3, [r7, #24]
}
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800337e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003392:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f805 	bl	80033b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3730      	adds	r7, #48	; 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e002      	b.n	80033d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033de:	2101      	movs	r1, #1
 80033e0:	69b8      	ldr	r0, [r7, #24]
 80033e2:	f7ff ff05 	bl	80031f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08e      	sub	sp, #56	; 0x38
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003406:	2300      	movs	r3, #0
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <xQueueGenericSend+0x32>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d103      	bne.n	8003438 <xQueueGenericSend+0x40>
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <xQueueGenericSend+0x44>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <xQueueGenericSend+0x46>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <xQueueGenericSend+0x60>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d103      	bne.n	8003466 <xQueueGenericSend+0x6e>
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <xQueueGenericSend+0x72>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <xQueueGenericSend+0x74>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xQueueGenericSend+0x8e>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	623b      	str	r3, [r7, #32]
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003486:	f001 f9bd 	bl	8004804 <xTaskGetSchedulerState>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <xQueueGenericSend+0x9e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <xQueueGenericSend+0xa2>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <xQueueGenericSend+0xa4>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	61fb      	str	r3, [r7, #28]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034b6:	f001 fefd 	bl	80052b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <xQueueGenericSend+0xd4>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d129      	bne.n	8003520 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034d2:	f000 fa0b 	bl	80038ec <prvCopyDataToQueue>
 80034d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	3324      	adds	r3, #36	; 0x24
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 ffcf 	bl	8004488 <xTaskRemoveFromEventList>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034f0:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <xQueueGenericSend+0x1f8>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e00a      	b.n	8003518 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003508:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <xQueueGenericSend+0x1f8>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003518:	f001 fefc 	bl	8005314 <vPortExitCritical>
				return pdPASS;
 800351c:	2301      	movs	r3, #1
 800351e:	e063      	b.n	80035e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003526:	f001 fef5 	bl	8005314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800352a:	2300      	movs	r3, #0
 800352c:	e05c      	b.n	80035e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f809 	bl	8004550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800353e:	2301      	movs	r3, #1
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003542:	f001 fee7 	bl	8005314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003546:	f000 fd7b 	bl	8004040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800354a:	f001 feb3 	bl	80052b4 <vPortEnterCritical>
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003554:	b25b      	sxtb	r3, r3
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d103      	bne.n	8003564 <xQueueGenericSend+0x16c>
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800356a:	b25b      	sxtb	r3, r3
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d103      	bne.n	800357a <xQueueGenericSend+0x182>
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800357a:	f001 fecb 	bl	8005314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800357e:	1d3a      	adds	r2, r7, #4
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fff8 	bl	800457c <xTaskCheckForTimeOut>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d124      	bne.n	80035dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003594:	f000 faa2 	bl	8003adc <prvIsQueueFull>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	3310      	adds	r3, #16
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 ff1e 	bl	80043e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ae:	f000 fa2d 	bl	8003a0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035b2:	f000 fd53 	bl	800405c <xTaskResumeAll>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f47f af7c 	bne.w	80034b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <xQueueGenericSend+0x1f8>)
 80035c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	e772      	b.n	80034b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035d2:	f000 fa1b 	bl	8003a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035d6:	f000 fd41 	bl	800405c <xTaskResumeAll>
 80035da:	e76c      	b.n	80034b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035de:	f000 fa15 	bl	8003a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e2:	f000 fd3b 	bl	800405c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3738      	adds	r7, #56	; 0x38
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b090      	sub	sp, #64	; 0x40
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d103      	bne.n	8003630 <xQueueGenericSendFromISR+0x3c>
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <xQueueGenericSendFromISR+0x40>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <xQueueGenericSendFromISR+0x42>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d103      	bne.n	800365e <xQueueGenericSendFromISR+0x6a>
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <xQueueGenericSendFromISR+0x6e>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <xQueueGenericSendFromISR+0x70>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	623b      	str	r3, [r7, #32]
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800367e:	f001 fefb 	bl	8005478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003682:	f3ef 8211 	mrs	r2, BASEPRI
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	61fa      	str	r2, [r7, #28]
 8003698:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800369a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <xQueueGenericSendFromISR+0xbc>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d12f      	bne.n	8003710 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036c6:	f000 f911 	bl	80038ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d112      	bne.n	80036fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d016      	beq.n	800370a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fed1 	bl	8004488 <xTaskRemoveFromEventList>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00e      	beq.n	800370a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e007      	b.n	800370a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036fe:	3301      	adds	r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	b25a      	sxtb	r2, r3
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800370a:	2301      	movs	r3, #1
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800370e:	e001      	b.n	8003714 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003710:	2300      	movs	r3, #0
 8003712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800371e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003722:	4618      	mov	r0, r3
 8003724:	3740      	adds	r7, #64	; 0x40
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003738:	2300      	movs	r3, #0
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <xQueueReceive+0x30>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	623b      	str	r3, [r7, #32]
}
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <xQueueReceive+0x3e>
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <xQueueReceive+0x42>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <xQueueReceive+0x44>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <xQueueReceive+0x5e>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	61fb      	str	r3, [r7, #28]
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800378a:	f001 f83b 	bl	8004804 <xTaskGetSchedulerState>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <xQueueReceive+0x6e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <xQueueReceive+0x72>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <xQueueReceive+0x74>
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <xQueueReceive+0x8e>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61bb      	str	r3, [r7, #24]
}
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ba:	f001 fd7b 	bl	80052b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01f      	beq.n	800380a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ce:	f000 f8f7 	bl	80039c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00f      	beq.n	8003802 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	3310      	adds	r3, #16
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fe4e 	bl	8004488 <xTaskRemoveFromEventList>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037f2:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <xQueueReceive+0x1bc>)
 80037f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003802:	f001 fd87 	bl	8005314 <vPortExitCritical>
				return pdPASS;
 8003806:	2301      	movs	r3, #1
 8003808:	e069      	b.n	80038de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003810:	f001 fd80 	bl	8005314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003814:	2300      	movs	r3, #0
 8003816:	e062      	b.n	80038de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800381e:	f107 0310 	add.w	r3, r7, #16
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fe94 	bl	8004550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800382c:	f001 fd72 	bl	8005314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003830:	f000 fc06 	bl	8004040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003834:	f001 fd3e 	bl	80052b4 <vPortEnterCritical>
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d103      	bne.n	800384e <xQueueReceive+0x122>
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003854:	b25b      	sxtb	r3, r3
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d103      	bne.n	8003864 <xQueueReceive+0x138>
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003864:	f001 fd56 	bl	8005314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003868:	1d3a      	adds	r2, r7, #4
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fe83 	bl	800457c <xTaskCheckForTimeOut>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d123      	bne.n	80038c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800387c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387e:	f000 f917 	bl	8003ab0 <prvIsQueueEmpty>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	3324      	adds	r3, #36	; 0x24
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fda9 	bl	80043e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003898:	f000 f8b8 	bl	8003a0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800389c:	f000 fbde 	bl	800405c <xTaskResumeAll>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d189      	bne.n	80037ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <xQueueReceive+0x1bc>)
 80038a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	e780      	b.n	80037ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ba:	f000 f8a7 	bl	8003a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038be:	f000 fbcd 	bl	800405c <xTaskResumeAll>
 80038c2:	e77a      	b.n	80037ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c6:	f000 f8a1 	bl	8003a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ca:	f000 fbc7 	bl	800405c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d0:	f000 f8ee 	bl	8003ab0 <prvIsQueueEmpty>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f43f af6f 	beq.w	80037ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3730      	adds	r7, #48	; 0x30
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10d      	bne.n	8003926 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d14d      	bne.n	80039ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 ff92 	bl	8004840 <xTaskPriorityDisinherit>
 800391c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	e043      	b.n	80039ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d119      	bne.n	8003960 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6858      	ldr	r0, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	461a      	mov	r2, r3
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	f001 ffec 	bl	8005914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	d32b      	bcc.n	80039ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	e026      	b.n	80039ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68d8      	ldr	r0, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	461a      	mov	r2, r3
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	f001 ffd2 	bl	8005914 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	425b      	negs	r3, r3
 800397a:	441a      	add	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	425b      	negs	r3, r3
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d105      	bne.n	80039ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039b6:	697b      	ldr	r3, [r7, #20]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d303      	bcc.n	80039f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68d9      	ldr	r1, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	461a      	mov	r2, r3
 80039fe:	6838      	ldr	r0, [r7, #0]
 8003a00:	f001 ff88 	bl	8005914 <memcpy>
	}
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a14:	f001 fc4e 	bl	80052b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a20:	e011      	b.n	8003a46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d012      	beq.n	8003a50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3324      	adds	r3, #36	; 0x24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fd2a 	bl	8004488 <xTaskRemoveFromEventList>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a3a:	f000 fe01 	bl	8004640 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	dce9      	bgt.n	8003a22 <prvUnlockQueue+0x16>
 8003a4e:	e000      	b.n	8003a52 <prvUnlockQueue+0x46>
					break;
 8003a50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	22ff      	movs	r2, #255	; 0xff
 8003a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a5a:	f001 fc5b 	bl	8005314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a5e:	f001 fc29 	bl	80052b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a6a:	e011      	b.n	8003a90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d012      	beq.n	8003a9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3310      	adds	r3, #16
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fd05 	bl	8004488 <xTaskRemoveFromEventList>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a84:	f000 fddc 	bl	8004640 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a88:	7bbb      	ldrb	r3, [r7, #14]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dce9      	bgt.n	8003a6c <prvUnlockQueue+0x60>
 8003a98:	e000      	b.n	8003a9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003aa4:	f001 fc36 	bl	8005314 <vPortExitCritical>
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ab8:	f001 fbfc 	bl	80052b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e001      	b.n	8003ace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ace:	f001 fc21 	bl	8005314 <vPortExitCritical>

	return xReturn;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ae4:	f001 fbe6 	bl	80052b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d102      	bne.n	8003afa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e001      	b.n	8003afe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003afe:	f001 fc09 	bl	8005314 <vPortExitCritical>

	return xReturn;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e014      	b.n	8003b46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <vQueueAddToRegistry+0x50>)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b28:	490c      	ldr	r1, [pc, #48]	; (8003b5c <vQueueAddToRegistry+0x50>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <vQueueAddToRegistry+0x50>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b3e:	e006      	b.n	8003b4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d9e7      	bls.n	8003b1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000778 	.word	0x20000778

08003b60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b70:	f001 fba0 	bl	80052b4 <vPortEnterCritical>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b7a:	b25b      	sxtb	r3, r3
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d103      	bne.n	8003b8a <vQueueWaitForMessageRestricted+0x2a>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b90:	b25b      	sxtb	r3, r3
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d103      	bne.n	8003ba0 <vQueueWaitForMessageRestricted+0x40>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ba0:	f001 fbb8 	bl	8005314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3324      	adds	r3, #36	; 0x24
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fc3b 	bl	8004430 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	f7ff ff26 	bl	8003a0c <prvUnlockQueue>
	}
 8003bc0:	bf00      	nop
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08e      	sub	sp, #56	; 0x38
 8003bcc:	af04      	add	r7, sp, #16
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	623b      	str	r3, [r7, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <xTaskCreateStatic+0x46>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	61fb      	str	r3, [r7, #28]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c0e:	235c      	movs	r3, #92	; 0x5c
 8003c10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b5c      	cmp	r3, #92	; 0x5c
 8003c16:	d00a      	beq.n	8003c2e <xTaskCreateStatic+0x66>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	61bb      	str	r3, [r7, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01e      	beq.n	8003c74 <xTaskCreateStatic+0xac>
 8003c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01b      	beq.n	8003c74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c4e:	2300      	movs	r3, #0
 8003c50:	9303      	str	r3, [sp, #12]
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	9302      	str	r3, [sp, #8]
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f850 	bl	8003d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6e:	f000 f8dd 	bl	8003e2c <prvAddNewTaskToReadyList>
 8003c72:	e001      	b.n	8003c78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c78:	697b      	ldr	r3, [r7, #20]
	}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b08c      	sub	sp, #48	; 0x30
 8003c86:	af04      	add	r7, sp, #16
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 fc2e 	bl	80054f8 <pvPortMalloc>
 8003c9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00e      	beq.n	8003cc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ca4:	205c      	movs	r0, #92	; 0x5c
 8003ca6:	f001 fc27 	bl	80054f8 <pvPortMalloc>
 8003caa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb8:	e005      	b.n	8003cc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cba:	6978      	ldr	r0, [r7, #20]
 8003cbc:	f001 fce8 	bl	8005690 <vPortFree>
 8003cc0:	e001      	b.n	8003cc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d017      	beq.n	8003cfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9303      	str	r3, [sp, #12]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	9302      	str	r3, [sp, #8]
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f80e 	bl	8003d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cf0:	69f8      	ldr	r0, [r7, #28]
 8003cf2:	f000 f89b 	bl	8003e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e002      	b.n	8003d02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d02:	69bb      	ldr	r3, [r7, #24]
	}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	461a      	mov	r2, r3
 8003d24:	21a5      	movs	r1, #165	; 0xa5
 8003d26:	f001 fe03 	bl	8005930 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d34:	3b01      	subs	r3, #1
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	617b      	str	r3, [r7, #20]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01f      	beq.n	8003daa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e012      	b.n	8003d96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	7819      	ldrb	r1, [r3, #0]
 8003d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3334      	adds	r3, #52	; 0x34
 8003d80:	460a      	mov	r2, r1
 8003d82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d006      	beq.n	8003d9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3301      	adds	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2b0f      	cmp	r3, #15
 8003d9a:	d9e9      	bls.n	8003d70 <prvInitialiseNewTask+0x64>
 8003d9c:	e000      	b.n	8003da0 <prvInitialiseNewTask+0x94>
			{
				break;
 8003d9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da8:	e003      	b.n	8003db2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	2b37      	cmp	r3, #55	; 0x37
 8003db6:	d901      	bls.n	8003dbc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003db8:	2337      	movs	r3, #55	; 0x37
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	2200      	movs	r2, #0
 8003dcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff f978 	bl	80030c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	3318      	adds	r3, #24
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff f973 	bl	80030c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	69b8      	ldr	r0, [r7, #24]
 8003e0c:	f001 f928 	bl	8005060 <pxPortInitialiseStack>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e22:	bf00      	nop
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e34:	f001 fa3e 	bl	80052b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e38:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <prvAddNewTaskToReadyList+0xc4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <prvAddNewTaskToReadyList+0xc4>)
 8003e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e42:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e4a:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <prvAddNewTaskToReadyList+0xc4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d110      	bne.n	8003e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e58:	f000 fc16 	bl	8004688 <prvInitialiseTaskLists>
 8003e5c:	e00d      	b.n	8003e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e5e:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <prvAddNewTaskToReadyList+0xcc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e66:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d802      	bhi.n	8003e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e74:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e7a:	4b20      	ldr	r3, [pc, #128]	; (8003efc <prvAddNewTaskToReadyList+0xd0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	4a1e      	ldr	r2, [pc, #120]	; (8003efc <prvAddNewTaskToReadyList+0xd0>)
 8003e82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e84:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <prvAddNewTaskToReadyList+0xd0>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <prvAddNewTaskToReadyList+0xd4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d903      	bls.n	8003ea0 <prvAddNewTaskToReadyList+0x74>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <prvAddNewTaskToReadyList+0xd4>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <prvAddNewTaskToReadyList+0xd8>)
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7ff f913 	bl	80030e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ebc:	f001 fa2a 	bl	8005314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <prvAddNewTaskToReadyList+0xcc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d207      	bcs.n	8003ee6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <prvAddNewTaskToReadyList+0xdc>)
 8003ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000c8c 	.word	0x20000c8c
 8003ef4:	200007b8 	.word	0x200007b8
 8003ef8:	20000c98 	.word	0x20000c98
 8003efc:	20000ca8 	.word	0x20000ca8
 8003f00:	20000c94 	.word	0x20000c94
 8003f04:	200007bc 	.word	0x200007bc
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d017      	beq.n	8003f4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <vTaskDelay+0x60>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <vTaskDelay+0x30>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60bb      	str	r3, [r7, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f3c:	f000 f880 	bl	8004040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f40:	2100      	movs	r1, #0
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fcea 	bl	800491c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f48:	f000 f888 	bl	800405c <xTaskResumeAll>
 8003f4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <vTaskDelay+0x64>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000cb4 	.word	0x20000cb4
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f82:	463a      	mov	r2, r7
 8003f84:	1d39      	adds	r1, r7, #4
 8003f86:	f107 0308 	add.w	r3, r7, #8
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f848 	bl	8003020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f90:	6839      	ldr	r1, [r7, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	9202      	str	r2, [sp, #8]
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	4921      	ldr	r1, [pc, #132]	; (8004028 <vTaskStartScheduler+0xb4>)
 8003fa4:	4821      	ldr	r0, [pc, #132]	; (800402c <vTaskStartScheduler+0xb8>)
 8003fa6:	f7ff fe0f 	bl	8003bc8 <xTaskCreateStatic>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a20      	ldr	r2, [pc, #128]	; (8004030 <vTaskStartScheduler+0xbc>)
 8003fae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <vTaskStartScheduler+0xbc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e001      	b.n	8003fc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d102      	bne.n	8003fce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fc8:	f000 fcfc 	bl	80049c4 <xTimerCreateTimerTask>
 8003fcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d116      	bne.n	8004002 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	613b      	str	r3, [r7, #16]
}
 8003fe6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <vTaskStartScheduler+0xc0>)
 8003fea:	f04f 32ff 	mov.w	r2, #4294967295
 8003fee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <vTaskStartScheduler+0xc4>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <vTaskStartScheduler+0xc8>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ffc:	f001 f8b8 	bl	8005170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004000:	e00e      	b.n	8004020 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d10a      	bne.n	8004020 <vTaskStartScheduler+0xac>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	60fb      	str	r3, [r7, #12]
}
 800401c:	bf00      	nop
 800401e:	e7fe      	b.n	800401e <vTaskStartScheduler+0xaa>
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	08005988 	.word	0x08005988
 800402c:	08004659 	.word	0x08004659
 8004030:	20000cb0 	.word	0x20000cb0
 8004034:	20000cac 	.word	0x20000cac
 8004038:	20000c98 	.word	0x20000c98
 800403c:	20000c90 	.word	0x20000c90

08004040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004044:	4b04      	ldr	r3, [pc, #16]	; (8004058 <vTaskSuspendAll+0x18>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	4a03      	ldr	r2, [pc, #12]	; (8004058 <vTaskSuspendAll+0x18>)
 800404c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	20000cb4 	.word	0x20000cb4

0800405c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800406a:	4b42      	ldr	r3, [pc, #264]	; (8004174 <xTaskResumeAll+0x118>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <xTaskResumeAll+0x2c>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	603b      	str	r3, [r7, #0]
}
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004088:	f001 f914 	bl	80052b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800408c:	4b39      	ldr	r3, [pc, #228]	; (8004174 <xTaskResumeAll+0x118>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3b01      	subs	r3, #1
 8004092:	4a38      	ldr	r2, [pc, #224]	; (8004174 <xTaskResumeAll+0x118>)
 8004094:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <xTaskResumeAll+0x118>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d162      	bne.n	8004164 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <xTaskResumeAll+0x11c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d05e      	beq.n	8004164 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a6:	e02f      	b.n	8004108 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a8:	4b34      	ldr	r3, [pc, #208]	; (800417c <xTaskResumeAll+0x120>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3318      	adds	r3, #24
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff f871 	bl	800319c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3304      	adds	r3, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff f86c 	bl	800319c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <xTaskResumeAll+0x124>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d903      	bls.n	80040d8 <xTaskResumeAll+0x7c>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	4a2a      	ldr	r2, [pc, #168]	; (8004180 <xTaskResumeAll+0x124>)
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4a27      	ldr	r2, [pc, #156]	; (8004184 <xTaskResumeAll+0x128>)
 80040e6:	441a      	add	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f7fe fff7 	bl	80030e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4b23      	ldr	r3, [pc, #140]	; (8004188 <xTaskResumeAll+0x12c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <xTaskResumeAll+0x130>)
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004108:	4b1c      	ldr	r3, [pc, #112]	; (800417c <xTaskResumeAll+0x120>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1cb      	bne.n	80040a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004116:	f000 fb55 	bl	80047c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <xTaskResumeAll+0x134>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d010      	beq.n	8004148 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004126:	f000 f847 	bl	80041b8 <xTaskIncrementTick>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004130:	4b16      	ldr	r3, [pc, #88]	; (800418c <xTaskResumeAll+0x130>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3b01      	subs	r3, #1
 800413a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f1      	bne.n	8004126 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <xTaskResumeAll+0x134>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <xTaskResumeAll+0x130>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <xTaskResumeAll+0x138>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004164:	f001 f8d6 	bl	8005314 <vPortExitCritical>

	return xAlreadyYielded;
 8004168:	68bb      	ldr	r3, [r7, #8]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000cb4 	.word	0x20000cb4
 8004178:	20000c8c 	.word	0x20000c8c
 800417c:	20000c4c 	.word	0x20000c4c
 8004180:	20000c94 	.word	0x20000c94
 8004184:	200007bc 	.word	0x200007bc
 8004188:	200007b8 	.word	0x200007b8
 800418c:	20000ca0 	.word	0x20000ca0
 8004190:	20000c9c 	.word	0x20000c9c
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <xTaskGetTickCount+0x1c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041a4:	687b      	ldr	r3, [r7, #4]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000c90 	.word	0x20000c90

080041b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c2:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <xTaskIncrementTick+0x148>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 808f 	bne.w	80042ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041cc:	4b4d      	ldr	r3, [pc, #308]	; (8004304 <xTaskIncrementTick+0x14c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041d4:	4a4b      	ldr	r2, [pc, #300]	; (8004304 <xTaskIncrementTick+0x14c>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d120      	bne.n	8004222 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041e0:	4b49      	ldr	r3, [pc, #292]	; (8004308 <xTaskIncrementTick+0x150>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <xTaskIncrementTick+0x48>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	603b      	str	r3, [r7, #0]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <xTaskIncrementTick+0x46>
 8004200:	4b41      	ldr	r3, [pc, #260]	; (8004308 <xTaskIncrementTick+0x150>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4b41      	ldr	r3, [pc, #260]	; (800430c <xTaskIncrementTick+0x154>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3f      	ldr	r2, [pc, #252]	; (8004308 <xTaskIncrementTick+0x150>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4a3f      	ldr	r2, [pc, #252]	; (800430c <xTaskIncrementTick+0x154>)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <xTaskIncrementTick+0x158>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	4a3d      	ldr	r2, [pc, #244]	; (8004310 <xTaskIncrementTick+0x158>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	f000 fad1 	bl	80047c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004222:	4b3c      	ldr	r3, [pc, #240]	; (8004314 <xTaskIncrementTick+0x15c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d349      	bcc.n	80042c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <xTaskIncrementTick+0x150>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004236:	4b37      	ldr	r3, [pc, #220]	; (8004314 <xTaskIncrementTick+0x15c>)
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	601a      	str	r2, [r3, #0]
					break;
 800423e:	e03f      	b.n	80042c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <xTaskIncrementTick+0x150>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d203      	bcs.n	8004260 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004258:	4a2e      	ldr	r2, [pc, #184]	; (8004314 <xTaskIncrementTick+0x15c>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800425e:	e02f      	b.n	80042c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	3304      	adds	r3, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe ff99 	bl	800319c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	3318      	adds	r3, #24
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe ff90 	bl	800319c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <xTaskIncrementTick+0x160>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d903      	bls.n	8004290 <xTaskIncrementTick+0xd8>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	4a22      	ldr	r2, [pc, #136]	; (8004318 <xTaskIncrementTick+0x160>)
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4a1f      	ldr	r2, [pc, #124]	; (800431c <xTaskIncrementTick+0x164>)
 800429e:	441a      	add	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f7fe ff1b 	bl	80030e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <xTaskIncrementTick+0x168>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d3b8      	bcc.n	800422c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042ba:	2301      	movs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042be:	e7b5      	b.n	800422c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <xTaskIncrementTick+0x168>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c6:	4915      	ldr	r1, [pc, #84]	; (800431c <xTaskIncrementTick+0x164>)
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d901      	bls.n	80042dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <xTaskIncrementTick+0x16c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e004      	b.n	80042f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <xTaskIncrementTick+0x170>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <xTaskIncrementTick+0x170>)
 80042f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042f4:	697b      	ldr	r3, [r7, #20]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000cb4 	.word	0x20000cb4
 8004304:	20000c90 	.word	0x20000c90
 8004308:	20000c44 	.word	0x20000c44
 800430c:	20000c48 	.word	0x20000c48
 8004310:	20000ca4 	.word	0x20000ca4
 8004314:	20000cac 	.word	0x20000cac
 8004318:	20000c94 	.word	0x20000c94
 800431c:	200007bc 	.word	0x200007bc
 8004320:	200007b8 	.word	0x200007b8
 8004324:	20000ca0 	.word	0x20000ca0
 8004328:	20000c9c 	.word	0x20000c9c

0800432c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004332:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <vTaskSwitchContext+0xa8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <vTaskSwitchContext+0xac>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004340:	e041      	b.n	80043c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004342:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <vTaskSwitchContext+0xac>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004348:	4b24      	ldr	r3, [pc, #144]	; (80043dc <vTaskSwitchContext+0xb0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e010      	b.n	8004372 <vTaskSwitchContext+0x46>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <vTaskSwitchContext+0x40>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	607b      	str	r3, [r7, #4]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <vTaskSwitchContext+0x3e>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3b01      	subs	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	491b      	ldr	r1, [pc, #108]	; (80043e0 <vTaskSwitchContext+0xb4>)
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0e4      	beq.n	8004350 <vTaskSwitchContext+0x24>
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <vTaskSwitchContext+0xb4>)
 8004392:	4413      	add	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	3308      	adds	r3, #8
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d104      	bne.n	80043b6 <vTaskSwitchContext+0x8a>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <vTaskSwitchContext+0xb8>)
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4a06      	ldr	r2, [pc, #24]	; (80043dc <vTaskSwitchContext+0xb0>)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6013      	str	r3, [r2, #0]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000cb4 	.word	0x20000cb4
 80043d8:	20000ca0 	.word	0x20000ca0
 80043dc:	20000c94 	.word	0x20000c94
 80043e0:	200007bc 	.word	0x200007bc
 80043e4:	200007b8 	.word	0x200007b8

080043e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	60fb      	str	r3, [r7, #12]
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <vTaskPlaceOnEventList+0x44>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3318      	adds	r3, #24
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe fe87 	bl	800312a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800441c:	2101      	movs	r1, #1
 800441e:	6838      	ldr	r0, [r7, #0]
 8004420:	f000 fa7c 	bl	800491c <prvAddCurrentTaskToDelayedList>
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	200007b8 	.word	0x200007b8

08004430 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	617b      	str	r3, [r7, #20]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <vTaskPlaceOnEventListRestricted+0x54>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3318      	adds	r3, #24
 800445e:	4619      	mov	r1, r3
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7fe fe3e 	bl	80030e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	68b8      	ldr	r0, [r7, #8]
 8004476:	f000 fa51 	bl	800491c <prvAddCurrentTaskToDelayedList>
	}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	200007b8 	.word	0x200007b8

08004488 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60fb      	str	r3, [r7, #12]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	3318      	adds	r3, #24
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe fe6f 	bl	800319c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044be:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <xTaskRemoveFromEventList+0xb0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11d      	bne.n	8004502 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fe66 	bl	800319c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	4b19      	ldr	r3, [pc, #100]	; (800453c <xTaskRemoveFromEventList+0xb4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d903      	bls.n	80044e4 <xTaskRemoveFromEventList+0x5c>
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4a16      	ldr	r2, [pc, #88]	; (800453c <xTaskRemoveFromEventList+0xb4>)
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4a13      	ldr	r2, [pc, #76]	; (8004540 <xTaskRemoveFromEventList+0xb8>)
 80044f2:	441a      	add	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f7fe fdf1 	bl	80030e2 <vListInsertEnd>
 8004500:	e005      	b.n	800450e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3318      	adds	r3, #24
 8004506:	4619      	mov	r1, r3
 8004508:	480e      	ldr	r0, [pc, #56]	; (8004544 <xTaskRemoveFromEventList+0xbc>)
 800450a:	f7fe fdea 	bl	80030e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <xTaskRemoveFromEventList+0xc0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	429a      	cmp	r2, r3
 800451a:	d905      	bls.n	8004528 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <xTaskRemoveFromEventList+0xc4>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e001      	b.n	800452c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800452c:	697b      	ldr	r3, [r7, #20]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000cb4 	.word	0x20000cb4
 800453c:	20000c94 	.word	0x20000c94
 8004540:	200007bc 	.word	0x200007bc
 8004544:	20000c4c 	.word	0x20000c4c
 8004548:	200007b8 	.word	0x200007b8
 800454c:	20000ca0 	.word	0x20000ca0

08004550 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <vTaskInternalSetTimeOutState+0x24>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <vTaskInternalSetTimeOutState+0x28>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000ca4 	.word	0x20000ca4
 8004578:	20000c90 	.word	0x20000c90

0800457c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	613b      	str	r3, [r7, #16]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045be:	f000 fe79 	bl	80052b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045c2:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <xTaskCheckForTimeOut+0xbc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d102      	bne.n	80045e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	e023      	b.n	800462a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <xTaskCheckForTimeOut+0xc0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d007      	beq.n	80045fe <xTaskCheckForTimeOut+0x82>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e015      	b.n	800462a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	429a      	cmp	r2, r3
 8004606:	d20b      	bcs.n	8004620 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	1ad2      	subs	r2, r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff9b 	bl	8004550 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	e004      	b.n	800462a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004626:	2301      	movs	r3, #1
 8004628:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800462a:	f000 fe73 	bl	8005314 <vPortExitCritical>

	return xReturn;
 800462e:	69fb      	ldr	r3, [r7, #28]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000c90 	.word	0x20000c90
 800463c:	20000ca4 	.word	0x20000ca4

08004640 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <vTaskMissedYield+0x14>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	bf00      	nop
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	20000ca0 	.word	0x20000ca0

08004658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004660:	f000 f852 	bl	8004708 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <prvIdleTask+0x28>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d9f9      	bls.n	8004660 <prvIdleTask+0x8>
			{
				taskYIELD();
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <prvIdleTask+0x2c>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800467c:	e7f0      	b.n	8004660 <prvIdleTask+0x8>
 800467e:	bf00      	nop
 8004680:	200007bc 	.word	0x200007bc
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	e00c      	b.n	80046ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <prvInitialiseTaskLists+0x60>)
 80046a0:	4413      	add	r3, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fcf0 	bl	8003088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3301      	adds	r3, #1
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b37      	cmp	r3, #55	; 0x37
 80046b2:	d9ef      	bls.n	8004694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046b4:	480d      	ldr	r0, [pc, #52]	; (80046ec <prvInitialiseTaskLists+0x64>)
 80046b6:	f7fe fce7 	bl	8003088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ba:	480d      	ldr	r0, [pc, #52]	; (80046f0 <prvInitialiseTaskLists+0x68>)
 80046bc:	f7fe fce4 	bl	8003088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046c0:	480c      	ldr	r0, [pc, #48]	; (80046f4 <prvInitialiseTaskLists+0x6c>)
 80046c2:	f7fe fce1 	bl	8003088 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046c6:	480c      	ldr	r0, [pc, #48]	; (80046f8 <prvInitialiseTaskLists+0x70>)
 80046c8:	f7fe fcde 	bl	8003088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046cc:	480b      	ldr	r0, [pc, #44]	; (80046fc <prvInitialiseTaskLists+0x74>)
 80046ce:	f7fe fcdb 	bl	8003088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <prvInitialiseTaskLists+0x78>)
 80046d4:	4a05      	ldr	r2, [pc, #20]	; (80046ec <prvInitialiseTaskLists+0x64>)
 80046d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <prvInitialiseTaskLists+0x7c>)
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <prvInitialiseTaskLists+0x68>)
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200007bc 	.word	0x200007bc
 80046ec:	20000c1c 	.word	0x20000c1c
 80046f0:	20000c30 	.word	0x20000c30
 80046f4:	20000c4c 	.word	0x20000c4c
 80046f8:	20000c60 	.word	0x20000c60
 80046fc:	20000c78 	.word	0x20000c78
 8004700:	20000c44 	.word	0x20000c44
 8004704:	20000c48 	.word	0x20000c48

08004708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800470e:	e019      	b.n	8004744 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004710:	f000 fdd0 	bl	80052b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004714:	4b10      	ldr	r3, [pc, #64]	; (8004758 <prvCheckTasksWaitingTermination+0x50>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fd3b 	bl	800319c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <prvCheckTasksWaitingTermination+0x54>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3b01      	subs	r3, #1
 800472c:	4a0b      	ldr	r2, [pc, #44]	; (800475c <prvCheckTasksWaitingTermination+0x54>)
 800472e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <prvCheckTasksWaitingTermination+0x58>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <prvCheckTasksWaitingTermination+0x58>)
 8004738:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800473a:	f000 fdeb 	bl	8005314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f810 	bl	8004764 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <prvCheckTasksWaitingTermination+0x58>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e1      	bne.n	8004710 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000c60 	.word	0x20000c60
 800475c:	20000c8c 	.word	0x20000c8c
 8004760:	20000c74 	.word	0x20000c74

08004764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	4618      	mov	r0, r3
 800477c:	f000 ff88 	bl	8005690 <vPortFree>
				vPortFree( pxTCB );
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 ff85 	bl	8005690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004786:	e018      	b.n	80047ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800478e:	2b01      	cmp	r3, #1
 8004790:	d103      	bne.n	800479a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 ff7c 	bl	8005690 <vPortFree>
	}
 8004798:	e00f      	b.n	80047ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d00a      	beq.n	80047ba <prvDeleteTCB+0x56>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	60fb      	str	r3, [r7, #12]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <prvDeleteTCB+0x54>
	}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <prvResetNextTaskUnblockTime+0x38>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <prvResetNextTaskUnblockTime+0x3c>)
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047dc:	e008      	b.n	80047f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <prvResetNextTaskUnblockTime+0x38>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <prvResetNextTaskUnblockTime+0x3c>)
 80047ee:	6013      	str	r3, [r2, #0]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	20000c44 	.word	0x20000c44
 8004800:	20000cac 	.word	0x20000cac

08004804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <xTaskGetSchedulerState+0x34>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004812:	2301      	movs	r3, #1
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	e008      	b.n	800482a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <xTaskGetSchedulerState+0x38>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004820:	2302      	movs	r3, #2
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	e001      	b.n	800482a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800482a:	687b      	ldr	r3, [r7, #4]
	}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	20000c98 	.word	0x20000c98
 800483c:	20000cb4 	.word	0x20000cb4

08004840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d056      	beq.n	8004904 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004856:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <xTaskPriorityDisinherit+0xd0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	429a      	cmp	r2, r3
 800485e:	d00a      	beq.n	8004876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60fb      	str	r3, [r7, #12]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	60bb      	str	r3, [r7, #8]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004898:	1e5a      	subs	r2, r3, #1
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d02c      	beq.n	8004904 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d128      	bne.n	8004904 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fc70 	bl	800319c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <xTaskPriorityDisinherit+0xd4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d903      	bls.n	80048e4 <xTaskPriorityDisinherit+0xa4>
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <xTaskPriorityDisinherit+0xd4>)
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4a09      	ldr	r2, [pc, #36]	; (8004918 <xTaskPriorityDisinherit+0xd8>)
 80048f2:	441a      	add	r2, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f7fe fbf1 	bl	80030e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004904:	697b      	ldr	r3, [r7, #20]
	}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200007b8 	.word	0x200007b8
 8004914:	20000c94 	.word	0x20000c94
 8004918:	200007bc 	.word	0x200007bc

0800491c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004926:	4b21      	ldr	r3, [pc, #132]	; (80049ac <prvAddCurrentTaskToDelayedList+0x90>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800492c:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3304      	adds	r3, #4
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fc32 	bl	800319c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d10a      	bne.n	8004956 <prvAddCurrentTaskToDelayedList+0x3a>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4819      	ldr	r0, [pc, #100]	; (80049b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004950:	f7fe fbc7 	bl	80030e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004954:	e026      	b.n	80049a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4413      	add	r3, r2
 800495c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800495e:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	429a      	cmp	r2, r3
 800496c:	d209      	bcs.n	8004982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f7fe fbd5 	bl	800312a <vListInsert>
}
 8004980:	e010      	b.n	80049a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f7fe fbcb 	bl	800312a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d202      	bcs.n	80049a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6013      	str	r3, [r2, #0]
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000c90 	.word	0x20000c90
 80049b0:	200007b8 	.word	0x200007b8
 80049b4:	20000c78 	.word	0x20000c78
 80049b8:	20000c48 	.word	0x20000c48
 80049bc:	20000c44 	.word	0x20000c44
 80049c0:	20000cac 	.word	0x20000cac

080049c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	; 0x28
 80049c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049ce:	f000 fb07 	bl	8004fe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <xTimerCreateTimerTask+0x80>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d021      	beq.n	8004a1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049e2:	1d3a      	adds	r2, r7, #4
 80049e4:	f107 0108 	add.w	r1, r7, #8
 80049e8:	f107 030c 	add.w	r3, r7, #12
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fb31 	bl	8003054 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	9202      	str	r2, [sp, #8]
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	2302      	movs	r3, #2
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	460a      	mov	r2, r1
 8004a04:	4910      	ldr	r1, [pc, #64]	; (8004a48 <xTimerCreateTimerTask+0x84>)
 8004a06:	4811      	ldr	r0, [pc, #68]	; (8004a4c <xTimerCreateTimerTask+0x88>)
 8004a08:	f7ff f8de 	bl	8003bc8 <xTaskCreateStatic>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <xTimerCreateTimerTask+0x8c>)
 8004a10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <xTimerCreateTimerTask+0x8c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	613b      	str	r3, [r7, #16]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a3a:	697b      	ldr	r3, [r7, #20]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000ce8 	.word	0x20000ce8
 8004a48:	08005990 	.word	0x08005990
 8004a4c:	08004b89 	.word	0x08004b89
 8004a50:	20000cec 	.word	0x20000cec

08004a54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	623b      	str	r3, [r7, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <xTimerGenericCommand+0x98>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d02a      	beq.n	8004ae0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	dc18      	bgt.n	8004ace <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a9c:	f7ff feb2 	bl	8004804 <xTaskGetSchedulerState>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d109      	bne.n	8004aba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <xTimerGenericCommand+0x98>)
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	f107 0110 	add.w	r1, r7, #16
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	f7fe fca1 	bl	80033f8 <xQueueGenericSend>
 8004ab6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ab8:	e012      	b.n	8004ae0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004aba:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <xTimerGenericCommand+0x98>)
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	f107 0110 	add.w	r1, r7, #16
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f7fe fc97 	bl	80033f8 <xQueueGenericSend>
 8004aca:	6278      	str	r0, [r7, #36]	; 0x24
 8004acc:	e008      	b.n	8004ae0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <xTimerGenericCommand+0x98>)
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f107 0110 	add.w	r1, r7, #16
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	f7fe fd8b 	bl	80035f4 <xQueueGenericSendFromISR>
 8004ade:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3728      	adds	r7, #40	; 0x28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000ce8 	.word	0x20000ce8

08004af0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afa:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <prvProcessExpiredTimer+0x94>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fb47 	bl	800319c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d022      	beq.n	8004b62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	18d1      	adds	r1, r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	6978      	ldr	r0, [r7, #20]
 8004b2a:	f000 f8d1 	bl	8004cd0 <prvInsertTimerInActiveList>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01f      	beq.n	8004b74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b34:	2300      	movs	r3, #0
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	6978      	ldr	r0, [r7, #20]
 8004b40:	f7ff ff88 	bl	8004a54 <xTimerGenericCommand>
 8004b44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d113      	bne.n	8004b74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60fb      	str	r3, [r7, #12]
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	6978      	ldr	r0, [r7, #20]
 8004b7a:	4798      	blx	r3
}
 8004b7c:	bf00      	nop
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000ce0 	.word	0x20000ce0

08004b88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b90:	f107 0308 	add.w	r3, r7, #8
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f857 	bl	8004c48 <prvGetNextExpireTime>
 8004b9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f803 	bl	8004bac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ba6:	f000 f8d5 	bl	8004d54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004baa:	e7f1      	b.n	8004b90 <prvTimerTask+0x8>

08004bac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bb6:	f7ff fa43 	bl	8004040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bba:	f107 0308 	add.w	r3, r7, #8
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f866 	bl	8004c90 <prvSampleTimeNow>
 8004bc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d130      	bne.n	8004c2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <prvProcessTimerOrBlockTask+0x3c>
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d806      	bhi.n	8004be8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bda:	f7ff fa3f 	bl	800405c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff85 	bl	8004af0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004be6:	e024      	b.n	8004c32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bee:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <prvProcessTimerOrBlockTask+0x90>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <prvProcessTimerOrBlockTask+0x50>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <prvProcessTimerOrBlockTask+0x52>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <prvProcessTimerOrBlockTask+0x94>)
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f7fe ffa7 	bl	8003b60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c12:	f7ff fa23 	bl	800405c <xTaskResumeAll>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <prvProcessTimerOrBlockTask+0x98>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
}
 8004c2c:	e001      	b.n	8004c32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c2e:	f7ff fa15 	bl	800405c <xTaskResumeAll>
}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000ce4 	.word	0x20000ce4
 8004c40:	20000ce8 	.word	0x20000ce8
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <prvGetNextExpireTime+0x44>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <prvGetNextExpireTime+0x16>
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	e000      	b.n	8004c60 <prvGetNextExpireTime+0x18>
 8004c5e:	2200      	movs	r2, #0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d105      	bne.n	8004c78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <prvGetNextExpireTime+0x44>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e001      	b.n	8004c7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000ce0 	.word	0x20000ce0

08004c90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c98:	f7ff fa7e 	bl	8004198 <xTaskGetTickCount>
 8004c9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <prvSampleTimeNow+0x3c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d205      	bcs.n	8004cb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ca8:	f000 f936 	bl	8004f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e002      	b.n	8004cba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cba:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <prvSampleTimeNow+0x3c>)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000cf0 	.word	0x20000cf0

08004cd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d812      	bhi.n	8004d1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	1ad2      	subs	r2, r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d302      	bcc.n	8004d0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d04:	2301      	movs	r3, #1
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	e01b      	b.n	8004d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d0a:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <prvInsertTimerInActiveList+0x7c>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f7fe fa08 	bl	800312a <vListInsert>
 8004d1a:	e012      	b.n	8004d42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d206      	bcs.n	8004d32 <prvInsertTimerInActiveList+0x62>
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e007      	b.n	8004d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <prvInsertTimerInActiveList+0x80>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f7fe f9f4 	bl	800312a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d42:	697b      	ldr	r3, [r7, #20]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000ce4 	.word	0x20000ce4
 8004d50:	20000ce0 	.word	0x20000ce0

08004d54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08e      	sub	sp, #56	; 0x38
 8004d58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d5a:	e0ca      	b.n	8004ef2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da18      	bge.n	8004d94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d62:	1d3b      	adds	r3, r7, #4
 8004d64:	3304      	adds	r3, #4
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	61fb      	str	r3, [r7, #28]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8a:	6850      	ldr	r0, [r2, #4]
 8004d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8e:	6892      	ldr	r2, [r2, #8]
 8004d90:	4611      	mov	r1, r2
 8004d92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f2c0 80aa 	blt.w	8004ef0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	3304      	adds	r3, #4
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe f9f5 	bl	800319c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004db2:	463b      	mov	r3, r7
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff ff6b 	bl	8004c90 <prvSampleTimeNow>
 8004dba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b09      	cmp	r3, #9
 8004dc0:	f200 8097 	bhi.w	8004ef2 <prvProcessReceivedCommands+0x19e>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <prvProcessReceivedCommands+0x78>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004df5 	.word	0x08004df5
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004df5 	.word	0x08004df5
 8004dd8:	08004e69 	.word	0x08004e69
 8004ddc:	08004e7d 	.word	0x08004e7d
 8004de0:	08004ec7 	.word	0x08004ec7
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004df5 	.word	0x08004df5
 8004dec:	08004e69 	.word	0x08004e69
 8004df0:	08004e7d 	.word	0x08004e7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	18d1      	adds	r1, r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e14:	f7ff ff5c 	bl	8004cd0 <prvInsertTimerInActiveList>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d069      	beq.n	8004ef2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05e      	beq.n	8004ef2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	441a      	add	r2, r3
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	2100      	movs	r1, #0
 8004e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e46:	f7ff fe05 	bl	8004a54 <xTimerGenericCommand>
 8004e4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d14f      	bne.n	8004ef2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	61bb      	str	r3, [r7, #24]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e7a:	e03a      	b.n	8004ef2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	617b      	str	r3, [r7, #20]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	18d1      	adds	r1, r2, r3
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec0:	f7ff ff06 	bl	8004cd0 <prvInsertTimerInActiveList>
					break;
 8004ec4:	e015      	b.n	8004ef2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed6:	f000 fbdb 	bl	8005690 <vPortFree>
 8004eda:	e00a      	b.n	8004ef2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004eee:	e000      	b.n	8004ef2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <prvProcessReceivedCommands+0x1c0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1d39      	adds	r1, r7, #4
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fc16 	bl	800372c <xQueueReceive>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f47f af2a 	bne.w	8004d5c <prvProcessReceivedCommands+0x8>
	}
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3730      	adds	r7, #48	; 0x30
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000ce8 	.word	0x20000ce8

08004f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f1e:	e048      	b.n	8004fb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f20:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe f92f 	bl	800319c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02e      	beq.n	8004fb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d90e      	bls.n	8004f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f72:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe f8d4 	bl	800312a <vListInsert>
 8004f82:	e016      	b.n	8004fb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fd60 	bl	8004a54 <xTimerGenericCommand>
 8004f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	603b      	str	r3, [r7, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1b1      	bne.n	8004f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004fc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fca:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20000ce0 	.word	0x20000ce0
 8004fdc:	20000ce4 	.word	0x20000ce4

08004fe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fe6:	f000 f965 	bl	80052b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <prvCheckForValidListAndQueue+0x60>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d120      	bne.n	8005034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ff2:	4814      	ldr	r0, [pc, #80]	; (8005044 <prvCheckForValidListAndQueue+0x64>)
 8004ff4:	f7fe f848 	bl	8003088 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ff8:	4813      	ldr	r0, [pc, #76]	; (8005048 <prvCheckForValidListAndQueue+0x68>)
 8004ffa:	f7fe f845 	bl	8003088 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <prvCheckForValidListAndQueue+0x6c>)
 8005000:	4a10      	ldr	r2, [pc, #64]	; (8005044 <prvCheckForValidListAndQueue+0x64>)
 8005002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005004:	4b12      	ldr	r3, [pc, #72]	; (8005050 <prvCheckForValidListAndQueue+0x70>)
 8005006:	4a10      	ldr	r2, [pc, #64]	; (8005048 <prvCheckForValidListAndQueue+0x68>)
 8005008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800500a:	2300      	movs	r3, #0
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <prvCheckForValidListAndQueue+0x74>)
 8005010:	4a11      	ldr	r2, [pc, #68]	; (8005058 <prvCheckForValidListAndQueue+0x78>)
 8005012:	2110      	movs	r1, #16
 8005014:	200a      	movs	r0, #10
 8005016:	f7fe f953 	bl	80032c0 <xQueueGenericCreateStatic>
 800501a:	4603      	mov	r3, r0
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <prvCheckForValidListAndQueue+0x60>)
 800501e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <prvCheckForValidListAndQueue+0x60>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <prvCheckForValidListAndQueue+0x60>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	490b      	ldr	r1, [pc, #44]	; (800505c <prvCheckForValidListAndQueue+0x7c>)
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fd6c 	bl	8003b0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005034:	f000 f96e 	bl	8005314 <vPortExitCritical>
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000ce8 	.word	0x20000ce8
 8005044:	20000cb8 	.word	0x20000cb8
 8005048:	20000ccc 	.word	0x20000ccc
 800504c:	20000ce0 	.word	0x20000ce0
 8005050:	20000ce4 	.word	0x20000ce4
 8005054:	20000d94 	.word	0x20000d94
 8005058:	20000cf4 	.word	0x20000cf4
 800505c:	08005998 	.word	0x08005998

08005060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b04      	subs	r3, #4
 8005070:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b04      	subs	r3, #4
 800507e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b04      	subs	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005090:	4a0c      	ldr	r2, [pc, #48]	; (80050c4 <pxPortInitialiseStack+0x64>)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3b14      	subs	r3, #20
 800509a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3b04      	subs	r3, #4
 80050a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f06f 0202 	mvn.w	r2, #2
 80050ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3b20      	subs	r3, #32
 80050b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050b6:	68fb      	ldr	r3, [r7, #12]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	080050c9 	.word	0x080050c9

080050c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <prvTaskExitError+0x54>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d00a      	beq.n	80050f2 <prvTaskExitError+0x2a>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60fb      	str	r3, [r7, #12]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <prvTaskExitError+0x28>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	60bb      	str	r3, [r7, #8]
}
 8005104:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005106:	bf00      	nop
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0fc      	beq.n	8005108 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000010 	.word	0x20000010

08005120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <pxCurrentTCBConst2>)
 8005122:	6819      	ldr	r1, [r3, #0]
 8005124:	6808      	ldr	r0, [r1, #0]
 8005126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512a:	f380 8809 	msr	PSP, r0
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f380 8811 	msr	BASEPRI, r0
 800513a:	4770      	bx	lr
 800513c:	f3af 8000 	nop.w

08005140 <pxCurrentTCBConst2>:
 8005140:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005148:	4808      	ldr	r0, [pc, #32]	; (800516c <prvPortStartFirstTask+0x24>)
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	6800      	ldr	r0, [r0, #0]
 800514e:	f380 8808 	msr	MSP, r0
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f380 8814 	msr	CONTROL, r0
 800515a:	b662      	cpsie	i
 800515c:	b661      	cpsie	f
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	df00      	svc	0
 8005168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800516a:	bf00      	nop
 800516c:	e000ed08 	.word	0xe000ed08

08005170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005176:	4b46      	ldr	r3, [pc, #280]	; (8005290 <xPortStartScheduler+0x120>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a46      	ldr	r2, [pc, #280]	; (8005294 <xPortStartScheduler+0x124>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10a      	bne.n	8005196 <xPortStartScheduler+0x26>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	613b      	str	r3, [r7, #16]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005196:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <xPortStartScheduler+0x120>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3f      	ldr	r2, [pc, #252]	; (8005298 <xPortStartScheduler+0x128>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10a      	bne.n	80051b6 <xPortStartScheduler+0x46>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60fb      	str	r3, [r7, #12]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051b6:	4b39      	ldr	r3, [pc, #228]	; (800529c <xPortStartScheduler+0x12c>)
 80051b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	22ff      	movs	r2, #255	; 0xff
 80051c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <xPortStartScheduler+0x130>)
 80051dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051de:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <xPortStartScheduler+0x134>)
 80051e0:	2207      	movs	r2, #7
 80051e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051e4:	e009      	b.n	80051fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80051e6:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <xPortStartScheduler+0x134>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	4a2d      	ldr	r2, [pc, #180]	; (80052a4 <xPortStartScheduler+0x134>)
 80051ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005202:	2b80      	cmp	r3, #128	; 0x80
 8005204:	d0ef      	beq.n	80051e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005206:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <xPortStartScheduler+0x134>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1c3 0307 	rsb	r3, r3, #7
 800520e:	2b04      	cmp	r3, #4
 8005210:	d00a      	beq.n	8005228 <xPortStartScheduler+0xb8>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60bb      	str	r3, [r7, #8]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005228:	4b1e      	ldr	r3, [pc, #120]	; (80052a4 <xPortStartScheduler+0x134>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <xPortStartScheduler+0x134>)
 8005230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005232:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <xPortStartScheduler+0x134>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800523a:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <xPortStartScheduler+0x134>)
 800523c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005246:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <xPortStartScheduler+0x138>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <xPortStartScheduler+0x138>)
 800524c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <xPortStartScheduler+0x138>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <xPortStartScheduler+0x138>)
 8005258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800525c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800525e:	f000 f8dd 	bl	800541c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <xPortStartScheduler+0x13c>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005268:	f000 f8fc 	bl	8005464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800526c:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <xPortStartScheduler+0x140>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0f      	ldr	r2, [pc, #60]	; (80052b0 <xPortStartScheduler+0x140>)
 8005272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005278:	f7ff ff66 	bl	8005148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800527c:	f7ff f856 	bl	800432c <vTaskSwitchContext>
	prvTaskExitError();
 8005280:	f7ff ff22 	bl	80050c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	e000ed00 	.word	0xe000ed00
 8005294:	410fc271 	.word	0x410fc271
 8005298:	410fc270 	.word	0x410fc270
 800529c:	e000e400 	.word	0xe000e400
 80052a0:	20000de4 	.word	0x20000de4
 80052a4:	20000de8 	.word	0x20000de8
 80052a8:	e000ed20 	.word	0xe000ed20
 80052ac:	20000010 	.word	0x20000010
 80052b0:	e000ef34 	.word	0xe000ef34

080052b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	607b      	str	r3, [r7, #4]
}
 80052cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <vPortEnterCritical+0x58>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a0d      	ldr	r2, [pc, #52]	; (800530c <vPortEnterCritical+0x58>)
 80052d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <vPortEnterCritical+0x58>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10f      	bne.n	8005300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <vPortEnterCritical+0x5c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <vPortEnterCritical+0x4c>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	603b      	str	r3, [r7, #0]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <vPortEnterCritical+0x4a>
	}
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20000010 	.word	0x20000010
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800531a:	4b12      	ldr	r3, [pc, #72]	; (8005364 <vPortExitCritical+0x50>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <vPortExitCritical+0x24>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	607b      	str	r3, [r7, #4]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <vPortExitCritical+0x50>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3b01      	subs	r3, #1
 800533e:	4a09      	ldr	r2, [pc, #36]	; (8005364 <vPortExitCritical+0x50>)
 8005340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <vPortExitCritical+0x50>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <vPortExitCritical+0x42>
 800534a:	2300      	movs	r3, #0
 800534c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	f383 8811 	msr	BASEPRI, r3
}
 8005354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000010 	.word	0x20000010
	...

08005370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005370:	f3ef 8009 	mrs	r0, PSP
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <pxCurrentTCBConst>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	f01e 0f10 	tst.w	lr, #16
 8005380:	bf08      	it	eq
 8005382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	6010      	str	r0, [r2, #0]
 800538c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005394:	f380 8811 	msr	BASEPRI, r0
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f7fe ffc4 	bl	800432c <vTaskSwitchContext>
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	f380 8811 	msr	BASEPRI, r0
 80053ac:	bc09      	pop	{r0, r3}
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	6808      	ldr	r0, [r1, #0]
 80053b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b6:	f01e 0f10 	tst.w	lr, #16
 80053ba:	bf08      	it	eq
 80053bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053c0:	f380 8809 	msr	PSP, r0
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w

080053d0 <pxCurrentTCBConst>:
 80053d0:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
}
 80053f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053f2:	f7fe fee1 	bl	80041b8 <xTaskIncrementTick>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <xPortSysTickHandler+0x40>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	2300      	movs	r3, #0
 8005406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f383 8811 	msr	BASEPRI, r3
}
 800540e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <vPortSetupTimerInterrupt+0x34>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <vPortSetupTimerInterrupt+0x38>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <vPortSetupTimerInterrupt+0x3c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0a      	ldr	r2, [pc, #40]	; (800545c <vPortSetupTimerInterrupt+0x40>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	099b      	lsrs	r3, r3, #6
 8005438:	4a09      	ldr	r2, [pc, #36]	; (8005460 <vPortSetupTimerInterrupt+0x44>)
 800543a:	3b01      	subs	r3, #1
 800543c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800543e:	4b04      	ldr	r3, [pc, #16]	; (8005450 <vPortSetupTimerInterrupt+0x34>)
 8005440:	2207      	movs	r2, #7
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	e000e010 	.word	0xe000e010
 8005454:	e000e018 	.word	0xe000e018
 8005458:	20000004 	.word	0x20000004
 800545c:	10624dd3 	.word	0x10624dd3
 8005460:	e000e014 	.word	0xe000e014

08005464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005474 <vPortEnableVFP+0x10>
 8005468:	6801      	ldr	r1, [r0, #0]
 800546a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800546e:	6001      	str	r1, [r0, #0]
 8005470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005472:	bf00      	nop
 8005474:	e000ed88 	.word	0xe000ed88

08005478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800547e:	f3ef 8305 	mrs	r3, IPSR
 8005482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b0f      	cmp	r3, #15
 8005488:	d914      	bls.n	80054b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <vPortValidateInterruptPriority+0x70>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <vPortValidateInterruptPriority+0x74>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	7afa      	ldrb	r2, [r7, #11]
 800549a:	429a      	cmp	r2, r3
 800549c:	d20a      	bcs.n	80054b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <vPortValidateInterruptPriority+0x78>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054bc:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <vPortValidateInterruptPriority+0x7c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d90a      	bls.n	80054da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	603b      	str	r3, [r7, #0]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <vPortValidateInterruptPriority+0x60>
	}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	e000e3f0 	.word	0xe000e3f0
 80054ec:	20000de4 	.word	0x20000de4
 80054f0:	e000ed0c 	.word	0xe000ed0c
 80054f4:	20000de8 	.word	0x20000de8

080054f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005504:	f7fe fd9c 	bl	8004040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005508:	4b5b      	ldr	r3, [pc, #364]	; (8005678 <pvPortMalloc+0x180>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005510:	f000 f920 	bl	8005754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005514:	4b59      	ldr	r3, [pc, #356]	; (800567c <pvPortMalloc+0x184>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	f040 8093 	bne.w	8005648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01d      	beq.n	8005564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005528:	2208      	movs	r2, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	2b00      	cmp	r3, #0
 8005538:	d014      	beq.n	8005564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f023 0307 	bic.w	r3, r3, #7
 8005540:	3308      	adds	r3, #8
 8005542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <pvPortMalloc+0x6c>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	617b      	str	r3, [r7, #20]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d06e      	beq.n	8005648 <pvPortMalloc+0x150>
 800556a:	4b45      	ldr	r3, [pc, #276]	; (8005680 <pvPortMalloc+0x188>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d869      	bhi.n	8005648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005574:	4b43      	ldr	r3, [pc, #268]	; (8005684 <pvPortMalloc+0x18c>)
 8005576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005578:	4b42      	ldr	r3, [pc, #264]	; (8005684 <pvPortMalloc+0x18c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800557e:	e004      	b.n	800558a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d903      	bls.n	800559c <pvPortMalloc+0xa4>
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f1      	bne.n	8005580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800559c:	4b36      	ldr	r3, [pc, #216]	; (8005678 <pvPortMalloc+0x180>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d050      	beq.n	8005648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2208      	movs	r2, #8
 80055ac:	4413      	add	r3, r2
 80055ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	2308      	movs	r3, #8
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d91f      	bls.n	8005608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <pvPortMalloc+0xf8>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	613b      	str	r3, [r7, #16]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005602:	69b8      	ldr	r0, [r7, #24]
 8005604:	f000 f908 	bl	8005818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005608:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <pvPortMalloc+0x188>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <pvPortMalloc+0x188>)
 8005614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005616:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <pvPortMalloc+0x188>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <pvPortMalloc+0x190>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d203      	bcs.n	800562a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <pvPortMalloc+0x188>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <pvPortMalloc+0x190>)
 8005628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <pvPortMalloc+0x184>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	431a      	orrs	r2, r3
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800563e:	4b13      	ldr	r3, [pc, #76]	; (800568c <pvPortMalloc+0x194>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a11      	ldr	r2, [pc, #68]	; (800568c <pvPortMalloc+0x194>)
 8005646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005648:	f7fe fd08 	bl	800405c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <pvPortMalloc+0x174>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60fb      	str	r3, [r7, #12]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <pvPortMalloc+0x172>
	return pvReturn;
 800566c:	69fb      	ldr	r3, [r7, #28]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3728      	adds	r7, #40	; 0x28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	200049f4 	.word	0x200049f4
 800567c:	20004a08 	.word	0x20004a08
 8005680:	200049f8 	.word	0x200049f8
 8005684:	200049ec 	.word	0x200049ec
 8005688:	200049fc 	.word	0x200049fc
 800568c:	20004a00 	.word	0x20004a00

08005690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d04d      	beq.n	800573e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056a2:	2308      	movs	r3, #8
 80056a4:	425b      	negs	r3, r3
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	4b24      	ldr	r3, [pc, #144]	; (8005748 <vPortFree+0xb8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <vPortFree+0x44>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60fb      	str	r3, [r7, #12]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <vPortFree+0x62>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60bb      	str	r3, [r7, #8]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <vPortFree+0xb8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01e      	beq.n	800573e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11a      	bne.n	800573e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <vPortFree+0xb8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005718:	f7fe fc92 	bl	8004040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <vPortFree+0xbc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4413      	add	r3, r2
 8005726:	4a09      	ldr	r2, [pc, #36]	; (800574c <vPortFree+0xbc>)
 8005728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f000 f874 	bl	8005818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <vPortFree+0xc0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	4a06      	ldr	r2, [pc, #24]	; (8005750 <vPortFree+0xc0>)
 8005738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800573a:	f7fe fc8f 	bl	800405c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20004a08 	.word	0x20004a08
 800574c:	200049f8 	.word	0x200049f8
 8005750:	20004a04 	.word	0x20004a04

08005754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800575a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800575e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <prvHeapInit+0xac>)
 8005762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00c      	beq.n	8005788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3307      	adds	r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0307 	bic.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <prvHeapInit+0xac>)
 8005784:	4413      	add	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <prvHeapInit+0xb0>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005792:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <prvHeapInit+0xb0>)
 8005794:	2200      	movs	r2, #0
 8005796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4413      	add	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057a0:	2208      	movs	r2, #8
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <prvHeapInit+0xb4>)
 80057b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <prvHeapInit+0xb4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <prvHeapInit+0xb4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <prvHeapInit+0xb4>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4a0a      	ldr	r2, [pc, #40]	; (800580c <prvHeapInit+0xb8>)
 80057e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4a09      	ldr	r2, [pc, #36]	; (8005810 <prvHeapInit+0xbc>)
 80057ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <prvHeapInit+0xc0>)
 80057ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000dec 	.word	0x20000dec
 8005804:	200049ec 	.word	0x200049ec
 8005808:	200049f4 	.word	0x200049f4
 800580c:	200049fc 	.word	0x200049fc
 8005810:	200049f8 	.word	0x200049f8
 8005814:	20004a08 	.word	0x20004a08

08005818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005820:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <prvInsertBlockIntoFreeList+0xac>)
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e002      	b.n	800582c <prvInsertBlockIntoFreeList+0x14>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d8f7      	bhi.n	8005826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d108      	bne.n	800585a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	441a      	add	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d118      	bne.n	80058a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d00d      	beq.n	8005896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	441a      	add	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e008      	b.n	80058a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e003      	b.n	80058a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d002      	beq.n	80058b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	200049ec 	.word	0x200049ec
 80058c8:	200049f4 	.word	0x200049f4

080058cc <__libc_init_array>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	4d0d      	ldr	r5, [pc, #52]	; (8005904 <__libc_init_array+0x38>)
 80058d0:	4c0d      	ldr	r4, [pc, #52]	; (8005908 <__libc_init_array+0x3c>)
 80058d2:	1b64      	subs	r4, r4, r5
 80058d4:	10a4      	asrs	r4, r4, #2
 80058d6:	2600      	movs	r6, #0
 80058d8:	42a6      	cmp	r6, r4
 80058da:	d109      	bne.n	80058f0 <__libc_init_array+0x24>
 80058dc:	4d0b      	ldr	r5, [pc, #44]	; (800590c <__libc_init_array+0x40>)
 80058de:	4c0c      	ldr	r4, [pc, #48]	; (8005910 <__libc_init_array+0x44>)
 80058e0:	f000 f82e 	bl	8005940 <_init>
 80058e4:	1b64      	subs	r4, r4, r5
 80058e6:	10a4      	asrs	r4, r4, #2
 80058e8:	2600      	movs	r6, #0
 80058ea:	42a6      	cmp	r6, r4
 80058ec:	d105      	bne.n	80058fa <__libc_init_array+0x2e>
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f4:	4798      	blx	r3
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7ee      	b.n	80058d8 <__libc_init_array+0xc>
 80058fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fe:	4798      	blx	r3
 8005900:	3601      	adds	r6, #1
 8005902:	e7f2      	b.n	80058ea <__libc_init_array+0x1e>
 8005904:	080059c0 	.word	0x080059c0
 8005908:	080059c0 	.word	0x080059c0
 800590c:	080059c0 	.word	0x080059c0
 8005910:	080059c4 	.word	0x080059c4

08005914 <memcpy>:
 8005914:	440a      	add	r2, r1
 8005916:	4291      	cmp	r1, r2
 8005918:	f100 33ff 	add.w	r3, r0, #4294967295
 800591c:	d100      	bne.n	8005920 <memcpy+0xc>
 800591e:	4770      	bx	lr
 8005920:	b510      	push	{r4, lr}
 8005922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800592a:	4291      	cmp	r1, r2
 800592c:	d1f9      	bne.n	8005922 <memcpy+0xe>
 800592e:	bd10      	pop	{r4, pc}

08005930 <memset>:
 8005930:	4402      	add	r2, r0
 8005932:	4603      	mov	r3, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	d100      	bne.n	800593a <memset+0xa>
 8005938:	4770      	bx	lr
 800593a:	f803 1b01 	strb.w	r1, [r3], #1
 800593e:	e7f9      	b.n	8005934 <memset+0x4>

08005940 <_init>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr

0800594c <_fini>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr
