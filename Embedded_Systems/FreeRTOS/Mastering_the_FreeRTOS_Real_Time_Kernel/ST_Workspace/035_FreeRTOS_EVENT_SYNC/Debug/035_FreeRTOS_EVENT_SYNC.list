
035_FreeRTOS_EVENT_SYNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007838  08007838  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007840  08007840  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00004ad0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b50  20004b50  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa14  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000380e  00000000  00000000  0003aac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  0003e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001438  00000000  00000000  0003f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004934  00000000  00000000  00040c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017848  00000000  00000000  000455c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6979  00000000  00000000  0005ce0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133785  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006584  00000000  00000000  001337d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800765c 	.word	0x0800765c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800765c 	.word	0x0800765c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vSyncingTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void vSyncingTask(void *pvParameters)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0a2      	sub	sp, #136	; 0x88
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	const TickType_t xMaxDelay = pdMS_TO_TICKS(4000UL);
 800058c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const TickType_t xMinDelay = pdMS_TO_TICKS(2000UL);
 8000594:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000598:	67fb      	str	r3, [r7, #124]	; 0x7c
	char outputBuffer[100];

	TickType_t xDelayTime;
	EventBits_t uxThisTasksSyncBit;
	//const EventBits_t uxAllSyncBits = (mainFIRST_TASK_BIT | mainSECOND_TASK_BIT | mainTHIRD_TASK_BIT);
	const EventBits_t uxAllSyncBits = 0x07;
 800059a:	2307      	movs	r3, #7
 800059c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t taskIndex = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uxThisTasksSyncBit = (EventBits_t) pvParameters;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	677b      	str	r3, [r7, #116]	; 0x74

	if(uxThisTasksSyncBit == 0x01){taskIndex = 0;}
 80005a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d102      	bne.n	80005b4 <vSyncingTask+0x30>
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if(uxThisTasksSyncBit == 0x02){taskIndex = 1;}
 80005b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d102      	bne.n	80005c0 <vSyncingTask+0x3c>
 80005ba:	2301      	movs	r3, #1
 80005bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if(uxThisTasksSyncBit == 0x04){taskIndex = 2;}
 80005c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d102      	bne.n	80005cc <vSyncingTask+0x48>
 80005c6:	2302      	movs	r3, #2
 80005c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	EventBits_t uxReturn;
	for(;;)
	{
		xDelayTime = (rand() % xMaxDelay) + xMinDelay;
 80005cc:	f005 ff64 	bl	8006498 <rand>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80005d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80005da:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80005de:	fb01 f202 	mul.w	r2, r1, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80005e6:	4413      	add	r3, r2
 80005e8:	673b      	str	r3, [r7, #112]	; 0x70


		sprintf(outputBuffer, "%s reached sync point!\r\n", taskName[taskIndex]);
 80005ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <vSyncingTask+0xf8>)
 80005f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	4921      	ldr	r1, [pc, #132]	; (8000680 <vSyncingTask+0xfc>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f006 f804 	bl	8006608 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)outputBuffer, strlen(outputBuffer), HAL_MAX_DELAY);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fde3 	bl	80001d0 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	f107 0108 	add.w	r1, r7, #8
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	481b      	ldr	r0, [pc, #108]	; (8000684 <vSyncingTask+0x100>)
 8000618:	f001 ff0f 	bl	800243a <HAL_UART_Transmit>

		uxReturn = xEventGroupSync(xEventGroup, uxThisTasksSyncBit, uxAllSyncBits, portMAX_DELAY);
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <vSyncingTask+0x104>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000626:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000628:	f002 ff2c 	bl	8003484 <xEventGroupSync>
 800062c:	66f8      	str	r0, [r7, #108]	; 0x6c
		if((uxThisTasksSyncBit == 0x01)&&((uxReturn & uxAllSyncBits) == uxAllSyncBits))
 800062e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000630:	2b01      	cmp	r3, #1
 8000632:	d11e      	bne.n	8000672 <vSyncingTask+0xee>
 8000634:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000638:	4013      	ands	r3, r2
 800063a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800063c:	429a      	cmp	r2, r3
 800063e:	d118      	bne.n	8000672 <vSyncingTask+0xee>
		{
			sprintf(outputBuffer, "%s exited sync point!\r\n", taskName[taskIndex]);
 8000640:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <vSyncingTask+0xf8>)
 8000646:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	490f      	ldr	r1, [pc, #60]	; (800068c <vSyncingTask+0x108>)
 8000650:	4618      	mov	r0, r3
 8000652:	f005 ffd9 	bl	8006608 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)outputBuffer, strlen(outputBuffer), HAL_MAX_DELAY);
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdb8 	bl	80001d0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f107 0108 	add.w	r1, r7, #8
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <vSyncingTask+0x100>)
 800066e:	f001 fee4 	bl	800243a <HAL_UART_Transmit>
		}
		vTaskDelay(xDelayTime);
 8000672:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000674:	f003 ff98 	bl	80045a8 <vTaskDelay>
		xDelayTime = (rand() % xMaxDelay) + xMinDelay;
 8000678:	e7a8      	b.n	80005cc <vSyncingTask+0x48>
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000
 8000680:	0800768c 	.word	0x0800768c
 8000684:	2000009c 	.word	0x2000009c
 8000688:	200000e0 	.word	0x200000e0
 800068c:	080076a8 	.word	0x080076a8

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fb7b 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f837 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f8c9 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a2:	f000 f89d 	bl	80007e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xEventGroup = xEventGroupCreate();
 80006a6:	f002 fed3 	bl	8003450 <xEventGroupCreate>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <main+0x68>)
 80006ae:	6013      	str	r3, [r2, #0]

  xTaskCreate(vSyncingTask, "Task 1", 1200, (void *)mainFIRST_TASK_BIT, 2, NULL);
 80006b0:	2300      	movs	r3, #0
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2302      	movs	r3, #2
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80006be:	490f      	ldr	r1, [pc, #60]	; (80006fc <main+0x6c>)
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <main+0x70>)
 80006c2:	f003 fe16 	bl	80042f2 <xTaskCreate>
  xTaskCreate(vSyncingTask, "Task 2", 1200, (void *)mainSECOND_TASK_BIT, 2, NULL);
 80006c6:	2300      	movs	r3, #0
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2302      	movs	r3, #2
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2302      	movs	r3, #2
 80006d0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80006d4:	490b      	ldr	r1, [pc, #44]	; (8000704 <main+0x74>)
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <main+0x70>)
 80006d8:	f003 fe0b 	bl	80042f2 <xTaskCreate>
  xTaskCreate(vSyncingTask, "Task 3", 1200, (void *)mainTHIRD_TASK_BIT, 2, NULL);
 80006dc:	2300      	movs	r3, #0
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2302      	movs	r3, #2
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2304      	movs	r3, #4
 80006e6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80006ea:	4907      	ldr	r1, [pc, #28]	; (8000708 <main+0x78>)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <main+0x70>)
 80006ee:	f003 fe00 	bl	80042f2 <xTaskCreate>

  vTaskStartScheduler();
 80006f2:	f003 ff8d 	bl	8004610 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <main+0x66>
 80006f8:	200000e0 	.word	0x200000e0
 80006fc:	08007674 	.word	0x08007674
 8000700:	08000585 	.word	0x08000585
 8000704:	0800767c 	.word	0x0800767c
 8000708:	08007684 	.word	0x08007684

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 fe1f 	bl	800635e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a27      	ldr	r2, [pc, #156]	; (80007d8 <SystemClock_Config+0xcc>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <SystemClock_Config+0xd0>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000780:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800078a:	2307      	movs	r3, #7
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fe8c 	bl	80014b0 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079e:	f000 f8c5 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2105      	movs	r1, #5
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 f8ed 	bl	80019a0 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007cc:	f000 f8ae 	bl	800092c <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	; 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_USART2_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000818:	f001 fdc2 	bl	80023a0 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f883 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000009c 	.word	0x2000009c
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_GPIO_Init+0xc8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_GPIO_Init+0xc8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a23      	ldr	r2, [pc, #140]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <MX_GPIO_Init+0xc8>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008a4:	4816      	ldr	r0, [pc, #88]	; (8000900 <MX_GPIO_Init+0xcc>)
 80008a6:	f000 fdc5 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008aa:	2301      	movs	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_GPIO_Init+0xd0>)
 80008c0:	f000 fc1c 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4619      	mov	r1, r3
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <MX_GPIO_Init+0xcc>)
 80008de:	f000 fc0d 	bl	80010fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2105      	movs	r1, #5
 80008e6:	2006      	movs	r0, #6
 80008e8:	f000 fb4c 	bl	8000f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ec:	2006      	movs	r0, #6
 80008ee:	f000 fb65 	bl	8000fbc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40020000 	.word	0x40020000

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 fa5b 	bl	8000dd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40002000 	.word	0x40002000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_MspInit+0x54>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <HAL_MspInit+0x54>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_MspInit+0x54>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_MspInit+0x54>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	210f      	movs	r1, #15
 800097a:	f06f 0001 	mvn.w	r0, #1
 800097e:	f000 fb01 	bl	8000f84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <HAL_UART_MspInit+0x94>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d133      	bne.n	8000a1a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_UART_MspInit+0x98>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <HAL_UART_MspInit+0x98>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x98>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x98>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0x98>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_UART_MspInit+0x98>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ea:	230c      	movs	r3, #12
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fa:	2307      	movs	r3, #7
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <HAL_UART_MspInit+0x9c>)
 8000a06:	f000 fb79 	bl	80010fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	2026      	movs	r0, #38	; 0x26
 8000a10:	f000 fab8 	bl	8000f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a14:	2026      	movs	r0, #38	; 0x26
 8000a16:	f000 fad1 	bl	8000fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a32      	ldr	r2, [pc, #200]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f9ba 	bl	8001de0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d103      	bne.n	8000a7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a76:	f001 f98b 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8000a7a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a7c:	e004      	b.n	8000a88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a7e:	f001 f987 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8000a82:	4603      	mov	r3, r0
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8a:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_InitTick+0xe8>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	0c9b      	lsrs	r3, r3, #18
 8000a92:	3b01      	subs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <HAL_InitTick+0xec>)
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_InitTick+0xf0>)
 8000a9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_InitTick+0xec>)
 8000a9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <HAL_InitTick+0xec>)
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_InitTick+0xec>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_InitTick+0xec>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_InitTick+0xec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000abc:	4817      	ldr	r0, [pc, #92]	; (8000b1c <HAL_InitTick+0xec>)
 8000abe:	f001 f9c1 	bl	8001e44 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d11b      	bne.n	8000b08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <HAL_InitTick+0xec>)
 8000ad2:	f001 fa11 	bl	8001ef8 <HAL_TIM_Base_Start_IT>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d111      	bne.n	8000b08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ae4:	202d      	movs	r0, #45	; 0x2d
 8000ae6:	f000 fa69 	bl	8000fbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d808      	bhi.n	8000b02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	202d      	movs	r0, #45	; 0x2d
 8000af6:	f000 fa45 	bl	8000f84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_InitTick+0xf4>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e002      	b.n	8000b08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3738      	adds	r7, #56	; 0x38
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	200000e4 	.word	0x200000e4
 8000b20:	40002000 	.word	0x40002000
 8000b24:	20000010 	.word	0x20000010

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f000 fc85 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <USART2_IRQHandler+0x10>)
 8000b6a:	f001 fcf9 	bl	8002560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000009c 	.word	0x2000009c

08000b78 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b7e:	f001 fa2b 	bl	8001fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000e4 	.word	0x200000e4

08000b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_kill>:

int _kill(int pid, int sig)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ba6:	f005 faa9 	bl	80060fc <__errno>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2216      	movs	r2, #22
 8000bae:	601a      	str	r2, [r3, #0]
  return -1;
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_exit>:

void _exit (int status)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ffe7 	bl	8000b9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bce:	e7fe      	b.n	8000bce <_exit+0x12>

08000bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e00a      	b.n	8000bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000be2:	f3af 8000 	nop.w
 8000be6:	4601      	mov	r1, r0
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	60ba      	str	r2, [r7, #8]
 8000bee:	b2ca      	uxtb	r2, r1
 8000bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbf0      	blt.n	8000be2 <_read+0x12>
  }

  return len;
 8000c00:	687b      	ldr	r3, [r7, #4]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e009      	b.n	8000c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbf1      	blt.n	8000c1c <_write+0x12>
  }
  return len;
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_close>:

int _close(int file)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_isatty>:

int _isatty(int file)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f005 fa0e 	bl	80060fc <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20020000 	.word	0x20020000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	2000012c 	.word	0x2000012c
 8000d14:	20004b50 	.word	0x20004b50

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffd7 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f005 fac3 	bl	80062f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fc8f 	bl	8000690 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d80:	08007848 	.word	0x08007848
  ldr r2, =_sbss
 8000d84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d88:	20004b50 	.word	0x20004b50

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f8d8 	bl	8000f6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f7ff fe36 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fdb8 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000014 	.word	0x20000014
 8000df8:	20000130 	.word	0x20000130

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000130 	.word	0x20000130

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff4c 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f96:	f7ff ff61 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000f9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	6978      	ldr	r0, [r7, #20]
 8000fa2:	f7ff ffb1 	bl	8000f08 <NVIC_EncodePriority>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff80 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff54 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fe6:	f7ff ff09 	bl	8000dfc <HAL_GetTick>
 8000fea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d008      	beq.n	800100a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e052      	b.n	80010b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0216 	bic.w	r2, r2, #22
 8001018:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001028:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d103      	bne.n	800103a <HAL_DMA_Abort+0x62>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0208 	bic.w	r2, r2, #8
 8001048:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800105a:	e013      	b.n	8001084 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800105c:	f7ff fece 	bl	8000dfc <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b05      	cmp	r3, #5
 8001068:	d90c      	bls.n	8001084 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2220      	movs	r2, #32
 800106e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e015      	b.n	80010b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1e4      	bne.n	800105c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001096:	223f      	movs	r2, #63	; 0x3f
 8001098:	409a      	lsls	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d004      	beq.n	80010d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00c      	b.n	80010f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2205      	movs	r2, #5
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e16b      	b.n	80013f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 815a 	bne.w	80013ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d005      	beq.n	800114e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	2b02      	cmp	r3, #2
 800114c:	d130      	bne.n	80011b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 0201 	and.w	r2, r3, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d017      	beq.n	80011ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80b4 	beq.w	80013ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b60      	ldr	r3, [pc, #384]	; (8001408 <HAL_GPIO_Init+0x30c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a5f      	ldr	r2, [pc, #380]	; (8001408 <HAL_GPIO_Init+0x30c>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <HAL_GPIO_Init+0x30c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129e:	4a5b      	ldr	r2, [pc, #364]	; (800140c <HAL_GPIO_Init+0x310>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_GPIO_Init+0x314>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d02b      	beq.n	8001322 <HAL_GPIO_Init+0x226>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <HAL_GPIO_Init+0x318>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x222>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a50      	ldr	r2, [pc, #320]	; (8001418 <HAL_GPIO_Init+0x31c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x21e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4f      	ldr	r2, [pc, #316]	; (800141c <HAL_GPIO_Init+0x320>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x21a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4e      	ldr	r2, [pc, #312]	; (8001420 <HAL_GPIO_Init+0x324>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x216>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4d      	ldr	r2, [pc, #308]	; (8001424 <HAL_GPIO_Init+0x328>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x212>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_GPIO_Init+0x32c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x20e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4b      	ldr	r2, [pc, #300]	; (800142c <HAL_GPIO_Init+0x330>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x20a>
 8001302:	2307      	movs	r3, #7
 8001304:	e00e      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001306:	2308      	movs	r3, #8
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800130a:	2306      	movs	r3, #6
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x310>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_GPIO_Init+0x334>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_GPIO_Init+0x334>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_GPIO_Init+0x334>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_GPIO_Init+0x334>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_GPIO_Init+0x334>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_GPIO_Init+0x334>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x334>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_GPIO_Init+0x334>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f ae90 	bls.w	8001118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40021c00 	.word	0x40021c00
 8001430:	40013c00 	.word	0x40013c00

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f806 	bl	8001498 <HAL_GPIO_EXTI_Callback>
  }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e267      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d00c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d112      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f2:	d10b      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d05b      	beq.n	80015b8 <HAL_RCC_OscConfig+0x108>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d157      	bne.n	80015b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e242      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x74>
 8001516:	4b76      	ldr	r3, [pc, #472]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a75      	ldr	r2, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6f      	ldr	r2, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6c      	ldr	r2, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001548:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a68      	ldr	r2, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b66      	ldr	r3, [pc, #408]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a65      	ldr	r2, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fc48 	bl	8000dfc <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fc44 	bl	8000dfc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e207      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xc0>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fc34 	bl	8000dfc <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fc30 	bl	8000dfc <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1f3      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0xe8>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d063      	beq.n	800168e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d11c      	bne.n	8001618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015de:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d116      	bne.n	8001618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x152>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1c7      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4937      	ldr	r1, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	e03a      	b.n	800168e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x244>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fbe9 	bl	8000dfc <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fbe5 	bl	8000dfc <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1a8      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4925      	ldr	r1, [pc, #148]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x244>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fbc8 	bl	8000dfc <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fbc4 	bl	8000dfc <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e187      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d036      	beq.n	8001708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d016      	beq.n	80016d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x248>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fba8 	bl	8000dfc <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b0:	f7ff fba4 	bl	8000dfc <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e167      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x200>
 80016ce:	e01b      	b.n	8001708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_OscConfig+0x248>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb91 	bl	8000dfc <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	e00e      	b.n	80016fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fb8d 	bl	8000dfc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d907      	bls.n	80016fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e150      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
 80016f0:	40023800 	.word	0x40023800
 80016f4:	42470000 	.word	0x42470000
 80016f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fc:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ea      	bne.n	80016de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8097 	beq.w	8001844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171a:	4b81      	ldr	r3, [pc, #516]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a7c      	ldr	r2, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a73      	ldr	r2, [pc, #460]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff fb4d 	bl	8000dfc <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff fb49 	bl	8000dfc <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e10c      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x2ea>
 800178c:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a63      	ldr	r2, [pc, #396]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x324>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x30c>
 80017a2:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a5e      	ldr	r2, [pc, #376]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
 80017ae:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a5b      	ldr	r2, [pc, #364]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0x324>
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d015      	beq.n	8001808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fb0e 	bl	8000dfc <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff fb0a 	bl	8000dfc <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0cb      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	4b49      	ldr	r3, [pc, #292]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0ee      	beq.n	80017e4 <HAL_RCC_OscConfig+0x334>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff faf8 	bl	8000dfc <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff faf4 	bl	8000dfc <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0b5      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ee      	bne.n	8001810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a38      	ldr	r2, [pc, #224]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a1 	beq.w	8001990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d05c      	beq.n	8001914 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d141      	bne.n	80018e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fac8 	bl	8000dfc <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fac4 	bl	8000dfc <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e087      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	3b01      	subs	r3, #1
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	491b      	ldr	r1, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fa9d 	bl	8000dfc <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fa99 	bl	8000dfc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e05c      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x416>
 80018e4:	e054      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fa86 	bl	8000dfc <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fa82 	bl	8000dfc <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e045      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x444>
 8001912:	e03d      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e038      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000
 8001928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4ec>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d028      	beq.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d121      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d11a      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800195c:	4013      	ands	r3, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001964:	4293      	cmp	r3, r2
 8001966:	d111      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	3b01      	subs	r3, #1
 8001976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d107      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0cc      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d90c      	bls.n	80019dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b65      	ldr	r3, [pc, #404]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b8      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	494d      	ldr	r1, [pc, #308]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d044      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d119      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e07f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e067      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4934      	ldr	r1, [pc, #208]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a90:	f7ff f9b4 	bl	8000dfc <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7ff f9b0 	bl	8000dfc <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d20c      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e032      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4916      	ldr	r1, [pc, #88]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b26:	f000 f821 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	490a      	ldr	r1, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe ff72 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	080076d8 	.word	0x080076d8
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	20000010 	.word	0x20000010

08001b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b70:	b094      	sub	sp, #80	; 0x50
 8001b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b84:	4b79      	ldr	r3, [pc, #484]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d00d      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x40>
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	f200 80e1 	bhi.w	8001d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b9e:	e0db      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b73      	ldr	r3, [pc, #460]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ba4:	e0db      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001baa:	e0d8      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bde:	4622      	mov	r2, r4
 8001be0:	462b      	mov	r3, r5
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	0159      	lsls	r1, r3, #5
 8001bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf0:	0150      	lsls	r0, r2, #5
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	1a51      	subs	r1, r2, r1
 8001bfa:	6139      	str	r1, [r7, #16]
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c10:	4659      	mov	r1, fp
 8001c12:	018b      	lsls	r3, r1, #6
 8001c14:	4651      	mov	r1, sl
 8001c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1a:	4651      	mov	r1, sl
 8001c1c:	018a      	lsls	r2, r1, #6
 8001c1e:	4651      	mov	r1, sl
 8001c20:	ebb2 0801 	subs.w	r8, r2, r1
 8001c24:	4659      	mov	r1, fp
 8001c26:	eb63 0901 	sbc.w	r9, r3, r1
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3e:	4690      	mov	r8, r2
 8001c40:	4699      	mov	r9, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	eb18 0303 	adds.w	r3, r8, r3
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	462b      	mov	r3, r5
 8001c4c:	eb49 0303 	adc.w	r3, r9, r3
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c5e:	4629      	mov	r1, r5
 8001c60:	024b      	lsls	r3, r1, #9
 8001c62:	4621      	mov	r1, r4
 8001c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c68:	4621      	mov	r1, r4
 8001c6a:	024a      	lsls	r2, r1, #9
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c72:	2200      	movs	r2, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c7c:	f7fe fb00 	bl	8000280 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c88:	e058      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	2200      	movs	r2, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	4611      	mov	r1, r2
 8001c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0159      	lsls	r1, r3, #5
 8001cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb6:	0150      	lsls	r0, r2, #5
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	00eb      	lsls	r3, r5, #3
 8001cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf2:	00e2      	lsls	r2, r4, #3
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	461d      	mov	r5, r3
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	18e3      	adds	r3, r4, r3
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	464b      	mov	r3, r9
 8001d00:	eb45 0303 	adc.w	r3, r5, r3
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d12:	4629      	mov	r1, r5
 8001d14:	028b      	lsls	r3, r1, #10
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	028a      	lsls	r2, r1, #10
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2200      	movs	r2, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	61fa      	str	r2, [r7, #28]
 8001d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d30:	f7fe faa6 	bl	8000280 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3750      	adds	r7, #80	; 0x50
 8001d64:	46bd      	mov	sp, r7
 8001d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2000000c 	.word	0x2000000c

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	080076e8 	.word	0x080076e8

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff ffdc 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	080076e8 	.word	0x080076e8

08001de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	220f      	movs	r2, #15
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCC_GetClockConfig+0x60>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0207 	and.w	r2, r3, #7
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e041      	b.n	8001eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f839 	bl	8001ee2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 f9d8 	bl	8002238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d001      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e04e      	b.n	8001fae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_TIM_Base_Start_IT+0xc4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d022      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d01d      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d018      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d013      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00e      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d010      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f9a:	e007      	b.n	8001fac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40000c00 	.word	0x40000c00
 8001fcc:	40010400 	.word	0x40010400
 8001fd0:	40014000 	.word	0x40014000
 8001fd4:	40001800 	.word	0x40001800

08001fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d122      	bne.n	8002034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0202 	mvn.w	r2, #2
 8002004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8ee 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8e0 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f8f1 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b04      	cmp	r3, #4
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0204 	mvn.w	r2, #4
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8c4 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8b6 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8c7 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b08      	cmp	r3, #8
 8002094:	d122      	bne.n	80020dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d11b      	bne.n	80020dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0208 	mvn.w	r2, #8
 80020ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2204      	movs	r2, #4
 80020b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f89a 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f88c 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f89d 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d122      	bne.n	8002130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d11b      	bne.n	8002130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0210 	mvn.w	r2, #16
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2208      	movs	r2, #8
 8002106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f870 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f862 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f873 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10e      	bne.n	800215c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0201 	mvn.w	r2, #1
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fbd6 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	2b80      	cmp	r3, #128	; 0x80
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f902 	bl	800238c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	2b40      	cmp	r3, #64	; 0x40
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b40      	cmp	r3, #64	; 0x40
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f838 	bl	8002224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d107      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0220 	mvn.w	r2, #32
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8cc 	bl	8002378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a40      	ldr	r2, [pc, #256]	; (800234c <TIM_Base_SetConfig+0x114>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002256:	d00f      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3d      	ldr	r2, [pc, #244]	; (8002350 <TIM_Base_SetConfig+0x118>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00b      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <TIM_Base_SetConfig+0x11c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <TIM_Base_SetConfig+0x120>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3a      	ldr	r2, [pc, #232]	; (800235c <TIM_Base_SetConfig+0x124>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d108      	bne.n	800228a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2f      	ldr	r2, [pc, #188]	; (800234c <TIM_Base_SetConfig+0x114>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d027      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <TIM_Base_SetConfig+0x118>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d023      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2b      	ldr	r2, [pc, #172]	; (8002354 <TIM_Base_SetConfig+0x11c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2a      	ldr	r2, [pc, #168]	; (8002358 <TIM_Base_SetConfig+0x120>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <TIM_Base_SetConfig+0x124>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d017      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <TIM_Base_SetConfig+0x128>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a27      	ldr	r2, [pc, #156]	; (8002364 <TIM_Base_SetConfig+0x12c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00f      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <TIM_Base_SetConfig+0x130>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a25      	ldr	r2, [pc, #148]	; (800236c <TIM_Base_SetConfig+0x134>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a24      	ldr	r2, [pc, #144]	; (8002370 <TIM_Base_SetConfig+0x138>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a23      	ldr	r2, [pc, #140]	; (8002374 <TIM_Base_SetConfig+0x13c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d108      	bne.n	80022fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <TIM_Base_SetConfig+0x114>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d003      	beq.n	8002330 <TIM_Base_SetConfig+0xf8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <TIM_Base_SetConfig+0x124>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d103      	bne.n	8002338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	615a      	str	r2, [r3, #20]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800
 8002358:	40000c00 	.word	0x40000c00
 800235c:	40010400 	.word	0x40010400
 8002360:	40014000 	.word	0x40014000
 8002364:	40014400 	.word	0x40014400
 8002368:	40014800 	.word	0x40014800
 800236c:	40001800 	.word	0x40001800
 8002370:	40001c00 	.word	0x40001c00
 8002374:	40002000 	.word	0x40002000

08002378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e03f      	b.n	8002432 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe fae2 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2224      	movs	r2, #36	; 0x24
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fd7b 	bl	8002ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b08a      	sub	sp, #40	; 0x28
 800243e:	af02      	add	r7, sp, #8
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b20      	cmp	r3, #32
 8002458:	d17c      	bne.n	8002554 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_UART_Transmit+0x2c>
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e075      	b.n	8002556 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_UART_Transmit+0x3e>
 8002474:	2302      	movs	r3, #2
 8002476:	e06e      	b.n	8002556 <HAL_UART_Transmit+0x11c>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2221      	movs	r2, #33	; 0x21
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800248e:	f7fe fcb5 	bl	8000dfc <HAL_GetTick>
 8002492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	88fa      	ldrh	r2, [r7, #6]
 800249e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a8:	d108      	bne.n	80024bc <HAL_UART_Transmit+0x82>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	e003      	b.n	80024c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024cc:	e02a      	b.n	8002524 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 faf9 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e036      	b.n	8002556 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10b      	bne.n	8002506 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	3302      	adds	r3, #2
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e007      	b.n	8002516 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	3301      	adds	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1cf      	bne.n	80024ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2200      	movs	r2, #0
 8002536:	2140      	movs	r1, #64	; 0x40
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fac9 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e006      	b.n	8002556 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002554:	2302      	movs	r3, #2
  }
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0ba      	sub	sp, #232	; 0xe8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800259e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_UART_IRQHandler+0x66>
 80025b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fbd3 	bl	8002d6a <UART_Receive_IT>
      return;
 80025c4:	e256      	b.n	8002a74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80de 	beq.w	800278c <HAL_UART_IRQHandler+0x22c>
 80025d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80d1 	beq.w	800278c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_UART_IRQHandler+0xae>
 80025f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_UART_IRQHandler+0xd2>
 800261a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_UART_IRQHandler+0xf6>
 800263e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d011      	beq.n	8002686 <HAL_UART_IRQHandler+0x126>
 8002662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800266e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f043 0208 	orr.w	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 81ed 	beq.w	8002a6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_UART_IRQHandler+0x14e>
 800269c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fb5e 	bl	8002d6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d103      	bne.n	80026da <HAL_UART_IRQHandler+0x17a>
 80026d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d04f      	beq.n	800277a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa66 	bl	8002bac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d141      	bne.n	8002772 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3314      	adds	r3, #20
 80026f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026fc:	e853 3f00 	ldrex	r3, [r3]
 8002700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3314      	adds	r3, #20
 8002716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800271a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800271e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800272a:	e841 2300 	strex	r3, r2, [r1]
 800272e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1d9      	bne.n	80026ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	2b00      	cmp	r3, #0
 8002740:	d013      	beq.n	800276a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	4a7d      	ldr	r2, [pc, #500]	; (800293c <HAL_UART_IRQHandler+0x3dc>)
 8002748:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fcb2 	bl	80010b8 <HAL_DMA_Abort_IT>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002764:	4610      	mov	r0, r2
 8002766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	e00e      	b.n	8002788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f99a 	bl	8002aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	e00a      	b.n	8002788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f996 	bl	8002aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002778:	e006      	b.n	8002788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f992 	bl	8002aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002786:	e170      	b.n	8002a6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002788:	bf00      	nop
    return;
 800278a:	e16e      	b.n	8002a6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 814a 	bne.w	8002a2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8143 	beq.w	8002a2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 813c 	beq.w	8002a2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	f040 80b4 	bne.w	8002940 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8140 	beq.w	8002a6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027f6:	429a      	cmp	r2, r3
 80027f8:	f080 8139 	bcs.w	8002a6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002802:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280e:	f000 8088 	beq.w	8002922 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800282c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800283e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800284a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1d9      	bne.n	8002812 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800286e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3314      	adds	r3, #20
 800287e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002882:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002886:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002888:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800288a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800288e:	e841 2300 	strex	r3, r2, [r1]
 8002892:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e1      	bne.n	800285e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3314      	adds	r3, #20
 80028a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a4:	e853 3f00 	ldrex	r3, [r3]
 80028a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3314      	adds	r3, #20
 80028ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e3      	bne.n	800289a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ea:	e853 3f00 	ldrex	r3, [r3]
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f2:	f023 0310 	bic.w	r3, r3, #16
 80028f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002904:	65ba      	str	r2, [r7, #88]	; 0x58
 8002906:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800290a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800290c:	e841 2300 	strex	r3, r2, [r1]
 8002910:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1e3      	bne.n	80028e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fb5b 	bl	8000fd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800292a:	b29b      	uxth	r3, r3
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	b29b      	uxth	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8c0 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002938:	e099      	b.n	8002a6e <HAL_UART_IRQHandler+0x50e>
 800293a:	bf00      	nop
 800293c:	08002c73 	.word	0x08002c73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002948:	b29b      	uxth	r3, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 808b 	beq.w	8002a72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800295c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8086 	beq.w	8002a72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800297c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800298a:	647a      	str	r2, [r7, #68]	; 0x44
 800298c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1e3      	bne.n	8002966 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3314      	adds	r3, #20
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	e853 3f00 	ldrex	r3, [r3]
 80029ac:	623b      	str	r3, [r7, #32]
   return(result);
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3314      	adds	r3, #20
 80029be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029c2:	633a      	str	r2, [r7, #48]	; 0x30
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ca:	e841 2300 	strex	r3, r2, [r1]
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1e3      	bne.n	800299e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	e853 3f00 	ldrex	r3, [r3]
 80029f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0310 	bic.w	r3, r3, #16
 80029fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	330c      	adds	r3, #12
 8002a04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a08:	61fa      	str	r2, [r7, #28]
 8002a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	69b9      	ldr	r1, [r7, #24]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	617b      	str	r3, [r7, #20]
   return(result);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e3      	bne.n	80029e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f848 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a28:	e023      	b.n	8002a72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_UART_IRQHandler+0x4ea>
 8002a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f929 	bl	8002c9a <UART_Transmit_IT>
    return;
 8002a48:	e014      	b.n	8002a74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <HAL_UART_IRQHandler+0x514>
 8002a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f969 	bl	8002d3a <UART_EndTransmit_IT>
    return;
 8002a68:	e004      	b.n	8002a74 <HAL_UART_IRQHandler+0x514>
    return;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <HAL_UART_IRQHandler+0x514>
      return;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <HAL_UART_IRQHandler+0x514>
      return;
 8002a72:	bf00      	nop
  }
}
 8002a74:	37e8      	adds	r7, #232	; 0xe8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop

08002a7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b090      	sub	sp, #64	; 0x40
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae0:	e050      	b.n	8002b84 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d04c      	beq.n	8002b84 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8002af0:	f7fe f984 	bl	8000dfc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d241      	bcs.n	8002b84 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b20:	637a      	str	r2, [r7, #52]	; 0x34
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e5      	bne.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3314      	adds	r3, #20
 8002b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	e853 3f00 	ldrex	r3, [r3]
 8002b42:	613b      	str	r3, [r7, #16]
   return(result);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3314      	adds	r3, #20
 8002b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b54:	623a      	str	r2, [r7, #32]
 8002b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	69f9      	ldr	r1, [r7, #28]
 8002b5a:	6a3a      	ldr	r2, [r7, #32]
 8002b5c:	e841 2300 	strex	r3, r2, [r1]
 8002b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e00f      	b.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d09f      	beq.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3740      	adds	r7, #64	; 0x40
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b095      	sub	sp, #84	; 0x54
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	e853 3f00 	ldrex	r3, [r3]
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd4:	643a      	str	r2, [r7, #64]	; 0x40
 8002bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e5      	bne.n	8002bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3314      	adds	r3, #20
 8002bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e5      	bne.n	8002be8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d119      	bne.n	8002c58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f023 0310 	bic.w	r3, r3, #16
 8002c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c44:	61ba      	str	r2, [r7, #24]
 8002c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6979      	ldr	r1, [r7, #20]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	613b      	str	r3, [r7, #16]
   return(result);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e5      	bne.n	8002c24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c66:	bf00      	nop
 8002c68:	3754      	adds	r7, #84	; 0x54
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff ff09 	bl	8002aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b21      	cmp	r3, #33	; 0x21
 8002cac:	d13e      	bne.n	8002d2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	d114      	bne.n	8002ce2 <UART_Transmit_IT+0x48>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d110      	bne.n	8002ce2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	1c9a      	adds	r2, r3, #2
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	621a      	str	r2, [r3, #32]
 8002ce0:	e008      	b.n	8002cf4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6211      	str	r1, [r2, #32]
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4619      	mov	r1, r3
 8002d02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10f      	bne.n	8002d28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fe8e 	bl	8002a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08c      	sub	sp, #48	; 0x30
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b22      	cmp	r3, #34	; 0x22
 8002d7c:	f040 80ab 	bne.w	8002ed6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d117      	bne.n	8002dba <UART_Receive_IT+0x50>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	1c9a      	adds	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
 8002db8:	e026      	b.n	8002e08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dcc:	d007      	beq.n	8002dde <UART_Receive_IT+0x74>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <UART_Receive_IT+0x82>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e008      	b.n	8002dfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4619      	mov	r1, r3
 8002e16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d15a      	bne.n	8002ed2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0220 	bic.w	r2, r2, #32
 8002e2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d135      	bne.n	8002ec8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	613b      	str	r3, [r7, #16]
   return(result);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f023 0310 	bic.w	r3, r3, #16
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e82:	623a      	str	r2, [r7, #32]
 8002e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	69f9      	ldr	r1, [r7, #28]
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d10a      	bne.n	8002eba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff fdf9 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
 8002ec6:	e002      	b.n	8002ece <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fde1 	bl	8002a90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e002      	b.n	8002ed8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3730      	adds	r7, #48	; 0x30
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b0c0      	sub	sp, #256	; 0x100
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	68d9      	ldr	r1, [r3, #12]
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	ea40 0301 	orr.w	r3, r0, r1
 8002f08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f38:	f021 010c 	bic.w	r1, r1, #12
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f46:	430b      	orrs	r3, r1
 8002f48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5a:	6999      	ldr	r1, [r3, #24]
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	ea40 0301 	orr.w	r3, r0, r1
 8002f66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b8f      	ldr	r3, [pc, #572]	; (80031ac <UART_SetConfig+0x2cc>)
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d005      	beq.n	8002f80 <UART_SetConfig+0xa0>
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b8d      	ldr	r3, [pc, #564]	; (80031b0 <UART_SetConfig+0x2d0>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d104      	bne.n	8002f8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f80:	f7fe ff1a 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8002f84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f88:	e003      	b.n	8002f92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f8a:	f7fe ff01 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002f8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9c:	f040 810c 	bne.w	80031b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002faa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	1891      	adds	r1, r2, r2
 8002fb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fba:	415b      	adcs	r3, r3
 8002fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	eb12 0801 	adds.w	r8, r2, r1
 8002fc8:	4629      	mov	r1, r5
 8002fca:	eb43 0901 	adc.w	r9, r3, r1
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe2:	4690      	mov	r8, r2
 8002fe4:	4699      	mov	r9, r3
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	eb18 0303 	adds.w	r3, r8, r3
 8002fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	eb49 0303 	adc.w	r3, r9, r3
 8002ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003006:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800300a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800300e:	460b      	mov	r3, r1
 8003010:	18db      	adds	r3, r3, r3
 8003012:	653b      	str	r3, [r7, #80]	; 0x50
 8003014:	4613      	mov	r3, r2
 8003016:	eb42 0303 	adc.w	r3, r2, r3
 800301a:	657b      	str	r3, [r7, #84]	; 0x54
 800301c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003020:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003024:	f7fd f92c 	bl	8000280 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <UART_SetConfig+0x2d4>)
 800302e:	fba3 2302 	umull	r2, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	011c      	lsls	r4, r3, #4
 8003036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003040:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003044:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	1891      	adds	r1, r2, r2
 800304e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003050:	415b      	adcs	r3, r3
 8003052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003054:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003058:	4641      	mov	r1, r8
 800305a:	eb12 0a01 	adds.w	sl, r2, r1
 800305e:	4649      	mov	r1, r9
 8003060:	eb43 0b01 	adc.w	fp, r3, r1
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003070:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003078:	4692      	mov	sl, r2
 800307a:	469b      	mov	fp, r3
 800307c:	4643      	mov	r3, r8
 800307e:	eb1a 0303 	adds.w	r3, sl, r3
 8003082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003086:	464b      	mov	r3, r9
 8003088:	eb4b 0303 	adc.w	r3, fp, r3
 800308c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800309c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030a4:	460b      	mov	r3, r1
 80030a6:	18db      	adds	r3, r3, r3
 80030a8:	643b      	str	r3, [r7, #64]	; 0x40
 80030aa:	4613      	mov	r3, r2
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
 80030b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030ba:	f7fd f8e1 	bl	8000280 <__aeabi_uldivmod>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <UART_SetConfig+0x2d4>)
 80030c6:	fba3 2301 	umull	r2, r3, r3, r1
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2264      	movs	r2, #100	; 0x64
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	1acb      	subs	r3, r1, r3
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030da:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <UART_SetConfig+0x2d4>)
 80030dc:	fba3 2302 	umull	r2, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030e8:	441c      	add	r4, r3
 80030ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	1891      	adds	r1, r2, r2
 8003102:	63b9      	str	r1, [r7, #56]	; 0x38
 8003104:	415b      	adcs	r3, r3
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800310c:	4641      	mov	r1, r8
 800310e:	1851      	adds	r1, r2, r1
 8003110:	6339      	str	r1, [r7, #48]	; 0x30
 8003112:	4649      	mov	r1, r9
 8003114:	414b      	adcs	r3, r1
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003124:	4659      	mov	r1, fp
 8003126:	00cb      	lsls	r3, r1, #3
 8003128:	4651      	mov	r1, sl
 800312a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312e:	4651      	mov	r1, sl
 8003130:	00ca      	lsls	r2, r1, #3
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	4603      	mov	r3, r0
 8003138:	4642      	mov	r2, r8
 800313a:	189b      	adds	r3, r3, r2
 800313c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003140:	464b      	mov	r3, r9
 8003142:	460a      	mov	r2, r1
 8003144:	eb42 0303 	adc.w	r3, r2, r3
 8003148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003158:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800315c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003160:	460b      	mov	r3, r1
 8003162:	18db      	adds	r3, r3, r3
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
 8003166:	4613      	mov	r3, r2
 8003168:	eb42 0303 	adc.w	r3, r2, r3
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003172:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003176:	f7fd f883 	bl	8000280 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <UART_SetConfig+0x2d4>)
 8003180:	fba3 1302 	umull	r1, r3, r3, r2
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	2164      	movs	r1, #100	; 0x64
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	3332      	adds	r3, #50	; 0x32
 8003192:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <UART_SetConfig+0x2d4>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	f003 0207 	and.w	r2, r3, #7
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4422      	add	r2, r4
 80031a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031a8:	e105      	b.n	80033b6 <UART_SetConfig+0x4d6>
 80031aa:	bf00      	nop
 80031ac:	40011000 	.word	0x40011000
 80031b0:	40011400 	.word	0x40011400
 80031b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031bc:	2200      	movs	r2, #0
 80031be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ca:	4642      	mov	r2, r8
 80031cc:	464b      	mov	r3, r9
 80031ce:	1891      	adds	r1, r2, r2
 80031d0:	6239      	str	r1, [r7, #32]
 80031d2:	415b      	adcs	r3, r3
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031da:	4641      	mov	r1, r8
 80031dc:	1854      	adds	r4, r2, r1
 80031de:	4649      	mov	r1, r9
 80031e0:	eb43 0501 	adc.w	r5, r3, r1
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	00eb      	lsls	r3, r5, #3
 80031ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f2:	00e2      	lsls	r2, r4, #3
 80031f4:	4614      	mov	r4, r2
 80031f6:	461d      	mov	r5, r3
 80031f8:	4643      	mov	r3, r8
 80031fa:	18e3      	adds	r3, r4, r3
 80031fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003200:	464b      	mov	r3, r9
 8003202:	eb45 0303 	adc.w	r3, r5, r3
 8003206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003216:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003226:	4629      	mov	r1, r5
 8003228:	008b      	lsls	r3, r1, #2
 800322a:	4621      	mov	r1, r4
 800322c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003230:	4621      	mov	r1, r4
 8003232:	008a      	lsls	r2, r1, #2
 8003234:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003238:	f7fd f822 	bl	8000280 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4b60      	ldr	r3, [pc, #384]	; (80033c4 <UART_SetConfig+0x4e4>)
 8003242:	fba3 2302 	umull	r2, r3, r3, r2
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	011c      	lsls	r4, r3, #4
 800324a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003254:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003258:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800325c:	4642      	mov	r2, r8
 800325e:	464b      	mov	r3, r9
 8003260:	1891      	adds	r1, r2, r2
 8003262:	61b9      	str	r1, [r7, #24]
 8003264:	415b      	adcs	r3, r3
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800326c:	4641      	mov	r1, r8
 800326e:	1851      	adds	r1, r2, r1
 8003270:	6139      	str	r1, [r7, #16]
 8003272:	4649      	mov	r1, r9
 8003274:	414b      	adcs	r3, r1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003284:	4659      	mov	r1, fp
 8003286:	00cb      	lsls	r3, r1, #3
 8003288:	4651      	mov	r1, sl
 800328a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328e:	4651      	mov	r1, sl
 8003290:	00ca      	lsls	r2, r1, #3
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	4603      	mov	r3, r0
 8003298:	4642      	mov	r2, r8
 800329a:	189b      	adds	r3, r3, r2
 800329c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a0:	464b      	mov	r3, r9
 80032a2:	460a      	mov	r2, r1
 80032a4:	eb42 0303 	adc.w	r3, r2, r3
 80032a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80032b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032c4:	4649      	mov	r1, r9
 80032c6:	008b      	lsls	r3, r1, #2
 80032c8:	4641      	mov	r1, r8
 80032ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ce:	4641      	mov	r1, r8
 80032d0:	008a      	lsls	r2, r1, #2
 80032d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032d6:	f7fc ffd3 	bl	8000280 <__aeabi_uldivmod>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <UART_SetConfig+0x4e4>)
 80032e0:	fba3 1302 	umull	r1, r3, r3, r2
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	2164      	movs	r1, #100	; 0x64
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	3332      	adds	r3, #50	; 0x32
 80032f2:	4a34      	ldr	r2, [pc, #208]	; (80033c4 <UART_SetConfig+0x4e4>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fe:	441c      	add	r4, r3
 8003300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003304:	2200      	movs	r2, #0
 8003306:	673b      	str	r3, [r7, #112]	; 0x70
 8003308:	677a      	str	r2, [r7, #116]	; 0x74
 800330a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800330e:	4642      	mov	r2, r8
 8003310:	464b      	mov	r3, r9
 8003312:	1891      	adds	r1, r2, r2
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	415b      	adcs	r3, r3
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800331e:	4641      	mov	r1, r8
 8003320:	1851      	adds	r1, r2, r1
 8003322:	6039      	str	r1, [r7, #0]
 8003324:	4649      	mov	r1, r9
 8003326:	414b      	adcs	r3, r1
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003336:	4659      	mov	r1, fp
 8003338:	00cb      	lsls	r3, r1, #3
 800333a:	4651      	mov	r1, sl
 800333c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003340:	4651      	mov	r1, sl
 8003342:	00ca      	lsls	r2, r1, #3
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	4603      	mov	r3, r0
 800334a:	4642      	mov	r2, r8
 800334c:	189b      	adds	r3, r3, r2
 800334e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003350:	464b      	mov	r3, r9
 8003352:	460a      	mov	r2, r1
 8003354:	eb42 0303 	adc.w	r3, r2, r3
 8003358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	663b      	str	r3, [r7, #96]	; 0x60
 8003364:	667a      	str	r2, [r7, #100]	; 0x64
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003372:	4649      	mov	r1, r9
 8003374:	008b      	lsls	r3, r1, #2
 8003376:	4641      	mov	r1, r8
 8003378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800337c:	4641      	mov	r1, r8
 800337e:	008a      	lsls	r2, r1, #2
 8003380:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003384:	f7fc ff7c 	bl	8000280 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <UART_SetConfig+0x4e4>)
 800338e:	fba3 1302 	umull	r1, r3, r3, r2
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2164      	movs	r1, #100	; 0x64
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	3332      	adds	r3, #50	; 0x32
 80033a0:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <UART_SetConfig+0x4e4>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4422      	add	r2, r4
 80033b4:	609a      	str	r2, [r3, #8]
}
 80033b6:	bf00      	nop
 80033b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c2:	bf00      	nop
 80033c4:	51eb851f 	.word	0x51eb851f

080033c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <SysTick_Handler+0x1c>)
 80033ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80033d0:	f001 fe18 	bl	8005004 <xTaskGetSchedulerState>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80033da:	f002 fc15 	bl	8005c08 <xPortSysTickHandler>
  }
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <vApplicationGetIdleTaskMemory+0x2c>)
 80033f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4a06      	ldr	r2, [pc, #24]	; (8003418 <vApplicationGetIdleTaskMemory+0x30>)
 80033fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	601a      	str	r2, [r3, #0]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000134 	.word	0x20000134
 8003418:	200001f0 	.word	0x200001f0

0800341c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <vApplicationGetTimerTaskMemory+0x2c>)
 800342c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4a06      	ldr	r2, [pc, #24]	; (800344c <vApplicationGetTimerTaskMemory+0x30>)
 8003432:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343a:	601a      	str	r2, [r3, #0]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	200003f0 	.word	0x200003f0
 800344c:	200004ac 	.word	0x200004ac

08003450 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003456:	2020      	movs	r0, #32
 8003458:	f002 fc66 	bl	8005d28 <pvPortMalloc>
 800345c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f941 	bl	80036f6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800347a:	687b      	ldr	r3, [r7, #4]
	}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08c      	sub	sp, #48	; 0x30
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <xEventGroupSync+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	61bb      	str	r3, [r7, #24]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <xEventGroupSync+0x34>
	configASSERT( uxBitsToWaitFor != 0 );
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <xEventGroupSync+0x52>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	617b      	str	r3, [r7, #20]
}
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <xEventGroupSync+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d6:	f001 fd95 	bl	8005004 <xTaskGetSchedulerState>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <xEventGroupSync+0x62>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <xEventGroupSync+0x66>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <xEventGroupSync+0x68>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <xEventGroupSync+0x82>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	613b      	str	r3, [r7, #16]
}
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <xEventGroupSync+0x80>
	}
	#endif

	vTaskSuspendAll();
 8003506:	f001 f8f3 	bl	80046f0 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	623b      	str	r3, [r7, #32]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f864 	bl	80035e0 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003518:	6a3a      	ldr	r2, [r7, #32]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d10d      	bne.n	8003544 <xEventGroupSync+0xc0>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4313      	orrs	r3, r2
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	43db      	mvns	r3, r3
 8003538:	401a      	ands	r2, r3
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	601a      	str	r2, [r3, #0]

			xTicksToWait = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	e013      	b.n	800356c <xEventGroupSync+0xe8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <xEventGroupSync+0xde>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	1d18      	adds	r0, r3, #4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	f001 fac8 	bl	8004aec <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003560:	e004      	b.n	800356c <xEventGroupSync+0xe8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
				xTimeoutOccurred = pdTRUE;
 8003568:	2301      	movs	r3, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800356c:	f001 f8ce 	bl	800470c <xTaskResumeAll>
 8003570:	61f8      	str	r0, [r7, #28]

	if( xTicksToWait != ( TickType_t ) 0 )
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02c      	beq.n	80035d2 <xEventGroupSync+0x14e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <xEventGroupSync+0x10a>
		{
			portYIELD_WITHIN_API();
 800357e:	4b17      	ldr	r3, [pc, #92]	; (80035dc <xEventGroupSync+0x158>)
 8003580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800358e:	f001 fdc5 	bl	800511c <uxTaskResetEventItemValue>
 8003592:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d115      	bne.n	80035ca <xEventGroupSync+0x146>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 800359e:	f002 faa1 	bl	8005ae4 <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80035a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d106      	bne.n	80035c2 <xEventGroupSync+0x13e>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	401a      	ands	r2, r3
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80035c2:	f002 fabf 	bl	8005b44 <vPortExitCritical>

			xTimeoutOccurred = pdTRUE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3730      	adds	r7, #48	; 0x30
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08e      	sub	sp, #56	; 0x38
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80035ea:	2300      	movs	r3, #0
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xEventGroupSetBits+0x32>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	613b      	str	r3, [r7, #16]
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <xEventGroupSetBits+0x52>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	60fb      	str	r3, [r7, #12]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	3304      	adds	r3, #4
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	3308      	adds	r3, #8
 800363c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800363e:	f001 f857 	bl	80046f0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	431a      	orrs	r2, r3
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003654:	e03c      	b.n	80036d0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800366c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003674:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d108      	bne.n	8003692 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00b      	beq.n	80036a4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003690:	e008      	b.n	80036a4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	429a      	cmp	r2, r3
 800369e:	d101      	bne.n	80036a4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80036b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036c4:	4619      	mov	r1, r3
 80036c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036c8:	f001 fadc 	bl	8004c84 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80036d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1be      	bne.n	8003656 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	43db      	mvns	r3, r3
 80036e0:	401a      	ands	r2, r3
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80036e6:	f001 f811 	bl	800470c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	681b      	ldr	r3, [r3, #0]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3738      	adds	r7, #56	; 0x38
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f103 0208 	add.w	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f04f 32ff 	mov.w	r2, #4294967295
 800370e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f103 0208 	add.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f103 0208 	add.w	r2, r3, #8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d103      	bne.n	80037b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e00c      	b.n	80037d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3308      	adds	r3, #8
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e002      	b.n	80037c6 <vListInsert+0x2e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d2f6      	bcs.n	80037c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	601a      	str	r2, [r3, #0]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6892      	ldr	r2, [r2, #8]
 8003820:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6852      	ldr	r2, [r2, #4]
 800382a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d103      	bne.n	800383e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	1e5a      	subs	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <xQueueGenericReset+0x2a>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	60bb      	str	r3, [r7, #8]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800388a:	f002 f92b 	bl	8005ae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	441a      	add	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	3b01      	subs	r3, #1
 80038bc:	68f9      	ldr	r1, [r7, #12]
 80038be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	441a      	add	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d114      	bne.n	800390a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01a      	beq.n	800391e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3310      	adds	r3, #16
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 f965 	bl	8004bbc <xTaskRemoveFromEventList>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <xQueueGenericReset+0xcc>)
 80038fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	e009      	b.n	800391e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3310      	adds	r3, #16
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fef1 	bl	80036f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3324      	adds	r3, #36	; 0x24
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff feec 	bl	80036f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800391e:	f002 f911 	bl	8005b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003922:	2301      	movs	r3, #1
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	; 0x38
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <xQueueGenericCreateStatic+0x52>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <xQueueGenericCreateStatic+0x56>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <xQueueGenericCreateStatic+0x58>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	623b      	str	r3, [r7, #32]
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <xQueueGenericCreateStatic+0x7e>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <xQueueGenericCreateStatic+0x82>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <xQueueGenericCreateStatic+0x84>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	61fb      	str	r3, [r7, #28]
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039ce:	2350      	movs	r3, #80	; 0x50
 80039d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b50      	cmp	r3, #80	; 0x50
 80039d6:	d00a      	beq.n	80039ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	61bb      	str	r3, [r7, #24]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f805 	bl	8003a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3730      	adds	r7, #48	; 0x30
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e002      	b.n	8003a42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a4e:	2101      	movs	r1, #1
 8003a50:	69b8      	ldr	r0, [r7, #24]
 8003a52:	f7ff ff05 	bl	8003860 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueGenericSend+0x32>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <xQueueGenericSend+0x40>
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <xQueueGenericSend+0x44>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <xQueueGenericSend+0x46>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <xQueueGenericSend+0x60>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ac4:	bf00      	nop
 8003ac6:	e7fe      	b.n	8003ac6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d103      	bne.n	8003ad6 <xQueueGenericSend+0x6e>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <xQueueGenericSend+0x72>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <xQueueGenericSend+0x74>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	623b      	str	r3, [r7, #32]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af6:	f001 fa85 	bl	8005004 <xTaskGetSchedulerState>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xQueueGenericSend+0x9e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <xQueueGenericSend+0xa2>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xQueueGenericSend+0xa4>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <xQueueGenericSend+0xbe>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	61fb      	str	r3, [r7, #28]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b26:	f001 ffdd 	bl	8005ae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <xQueueGenericSend+0xd4>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d129      	bne.n	8003b90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b42:	f000 fa0b 	bl	8003f5c <prvCopyDataToQueue>
 8003b46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	3324      	adds	r3, #36	; 0x24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 f831 	bl	8004bbc <xTaskRemoveFromEventList>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b60:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <xQueueGenericSend+0x1f8>)
 8003b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	e00a      	b.n	8003b88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <xQueueGenericSend+0x1f8>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b88:	f001 ffdc 	bl	8005b44 <vPortExitCritical>
				return pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e063      	b.n	8003c58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b96:	f001 ffd5 	bl	8005b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e05c      	b.n	8003c58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 f8cd 	bl	8004d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb2:	f001 ffc7 	bl	8005b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bb6:	f000 fd9b 	bl	80046f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bba:	f001 ff93 	bl	8005ae4 <vPortEnterCritical>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bc4:	b25b      	sxtb	r3, r3
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d103      	bne.n	8003bd4 <xQueueGenericSend+0x16c>
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d103      	bne.n	8003bea <xQueueGenericSend+0x182>
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bea:	f001 ffab 	bl	8005b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bee:	1d3a      	adds	r2, r7, #4
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 f8bc 	bl	8004d74 <xTaskCheckForTimeOut>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d124      	bne.n	8003c4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c04:	f000 faa2 	bl	800414c <prvIsQueueFull>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	3310      	adds	r3, #16
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 ff44 	bl	8004aa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c1e:	f000 fa2d 	bl	800407c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c22:	f000 fd73 	bl	800470c <xTaskResumeAll>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f af7c 	bne.w	8003b26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <xQueueGenericSend+0x1f8>)
 8003c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	e772      	b.n	8003b26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c42:	f000 fa1b 	bl	800407c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c46:	f000 fd61 	bl	800470c <xTaskResumeAll>
 8003c4a:	e76c      	b.n	8003b26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4e:	f000 fa15 	bl	800407c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c52:	f000 fd5b 	bl	800470c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3738      	adds	r7, #56	; 0x38
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b090      	sub	sp, #64	; 0x40
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <xQueueGenericSendFromISR+0x3c>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <xQueueGenericSendFromISR+0x40>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <xQueueGenericSendFromISR+0x42>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d103      	bne.n	8003cce <xQueueGenericSendFromISR+0x6a>
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <xQueueGenericSendFromISR+0x6e>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <xQueueGenericSendFromISR+0x70>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	623b      	str	r3, [r7, #32]
}
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cee:	f001 ffdb 	bl	8005ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	61fa      	str	r2, [r7, #28]
 8003d08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <xQueueGenericSendFromISR+0xbc>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d12f      	bne.n	8003d80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d36:	f000 f911 	bl	8003f5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d112      	bne.n	8003d6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d016      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	3324      	adds	r3, #36	; 0x24
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 ff33 	bl	8004bbc <xTaskRemoveFromEventList>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00e      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e007      	b.n	8003d7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	b25a      	sxtb	r2, r3
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d7e:	e001      	b.n	8003d84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3740      	adds	r7, #64	; 0x40
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	; 0x30
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <xQueueReceive+0x30>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	623b      	str	r3, [r7, #32]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <xQueueReceive+0x3e>
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <xQueueReceive+0x42>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueReceive+0x44>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xQueueReceive+0x5e>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	61fb      	str	r3, [r7, #28]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dfa:	f001 f903 	bl	8005004 <xTaskGetSchedulerState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <xQueueReceive+0x6e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <xQueueReceive+0x72>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueReceive+0x74>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <xQueueReceive+0x8e>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	61bb      	str	r3, [r7, #24]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e2a:	f001 fe5b 	bl	8005ae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01f      	beq.n	8003e7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3e:	f000 f8f7 	bl	8004030 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00f      	beq.n	8003e72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	3310      	adds	r3, #16
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 feb0 	bl	8004bbc <xTaskRemoveFromEventList>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e62:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <xQueueReceive+0x1bc>)
 8003e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e72:	f001 fe67 	bl	8005b44 <vPortExitCritical>
				return pdPASS;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e069      	b.n	8003f4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e80:	f001 fe60 	bl	8005b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e062      	b.n	8003f4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e8e:	f107 0310 	add.w	r3, r7, #16
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 ff58 	bl	8004d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e9c:	f001 fe52 	bl	8005b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea0:	f000 fc26 	bl	80046f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ea4:	f001 fe1e 	bl	8005ae4 <vPortEnterCritical>
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d103      	bne.n	8003ebe <xQueueReceive+0x122>
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec4:	b25b      	sxtb	r3, r3
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d103      	bne.n	8003ed4 <xQueueReceive+0x138>
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed4:	f001 fe36 	bl	8005b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed8:	1d3a      	adds	r2, r7, #4
 8003eda:	f107 0310 	add.w	r3, r7, #16
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 ff47 	bl	8004d74 <xTaskCheckForTimeOut>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d123      	bne.n	8003f34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eee:	f000 f917 	bl	8004120 <prvIsQueueEmpty>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	3324      	adds	r3, #36	; 0x24
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fdcf 	bl	8004aa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f08:	f000 f8b8 	bl	800407c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f0c:	f000 fbfe 	bl	800470c <xTaskResumeAll>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d189      	bne.n	8003e2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <xQueueReceive+0x1bc>)
 8003f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	e780      	b.n	8003e2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2a:	f000 f8a7 	bl	800407c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f2e:	f000 fbed 	bl	800470c <xTaskResumeAll>
 8003f32:	e77a      	b.n	8003e2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f36:	f000 f8a1 	bl	800407c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f3a:	f000 fbe7 	bl	800470c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f40:	f000 f8ee 	bl	8004120 <prvIsQueueEmpty>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f43f af6f 	beq.w	8003e2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3730      	adds	r7, #48	; 0x30
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d14d      	bne.n	800401e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 f85a 	bl	8005040 <xTaskPriorityDisinherit>
 8003f8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	e043      	b.n	800401e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d119      	bne.n	8003fd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6858      	ldr	r0, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	f002 f9cb 	bl	8006342 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d32b      	bcc.n	800401e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	e026      	b.n	800401e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68d8      	ldr	r0, [r3, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	f002 f9b1 	bl	8006342 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	425b      	negs	r3, r3
 8003fea:	441a      	add	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d207      	bcs.n	800400c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	425b      	negs	r3, r3
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d105      	bne.n	800401e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3b01      	subs	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004026:	697b      	ldr	r3, [r7, #20]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d018      	beq.n	8004074 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	441a      	add	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	d303      	bcc.n	8004064 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68d9      	ldr	r1, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	461a      	mov	r2, r3
 800406e:	6838      	ldr	r0, [r7, #0]
 8004070:	f002 f967 	bl	8006342 <memcpy>
	}
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004084:	f001 fd2e 	bl	8005ae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800408e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004090:	e011      	b.n	80040b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d012      	beq.n	80040c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3324      	adds	r3, #36	; 0x24
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fd8c 	bl	8004bbc <xTaskRemoveFromEventList>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040aa:	f000 fec5 	bl	8004e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dce9      	bgt.n	8004092 <prvUnlockQueue+0x16>
 80040be:	e000      	b.n	80040c2 <prvUnlockQueue+0x46>
					break;
 80040c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040ca:	f001 fd3b 	bl	8005b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040ce:	f001 fd09 	bl	8005ae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040da:	e011      	b.n	8004100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3310      	adds	r3, #16
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fd67 	bl	8004bbc <xTaskRemoveFromEventList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040f4:	f000 fea0 	bl	8004e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004104:	2b00      	cmp	r3, #0
 8004106:	dce9      	bgt.n	80040dc <prvUnlockQueue+0x60>
 8004108:	e000      	b.n	800410c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800410a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	22ff      	movs	r2, #255	; 0xff
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004114:	f001 fd16 	bl	8005b44 <vPortExitCritical>
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004128:	f001 fcdc 	bl	8005ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e001      	b.n	800413e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f001 fd01 	bl	8005b44 <vPortExitCritical>

	return xReturn;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004154:	f001 fcc6 	bl	8005ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	429a      	cmp	r2, r3
 8004162:	d102      	bne.n	800416a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e001      	b.n	800416e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800416e:	f001 fce9 	bl	8005b44 <vPortExitCritical>

	return xReturn;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e014      	b.n	80041b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800418c:	4a0f      	ldr	r2, [pc, #60]	; (80041cc <vQueueAddToRegistry+0x50>)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004198:	490c      	ldr	r1, [pc, #48]	; (80041cc <vQueueAddToRegistry+0x50>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <vQueueAddToRegistry+0x50>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041ae:	e006      	b.n	80041be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b07      	cmp	r3, #7
 80041ba:	d9e7      	bls.n	800418c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	200008ac 	.word	0x200008ac

080041d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041e0:	f001 fc80 	bl	8005ae4 <vPortEnterCritical>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d103      	bne.n	80041fa <vQueueWaitForMessageRestricted+0x2a>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004200:	b25b      	sxtb	r3, r3
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d103      	bne.n	8004210 <vQueueWaitForMessageRestricted+0x40>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004210:	f001 fc98 	bl	8005b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	3324      	adds	r3, #36	; 0x24
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fc9d 	bl	8004b64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f7ff ff26 	bl	800407c <prvUnlockQueue>
	}
 8004230:	bf00      	nop
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08e      	sub	sp, #56	; 0x38
 800423c:	af04      	add	r7, sp, #16
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	623b      	str	r3, [r7, #32]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xTaskCreateStatic+0x46>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61fb      	str	r3, [r7, #28]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800427e:	23bc      	movs	r3, #188	; 0xbc
 8004280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2bbc      	cmp	r3, #188	; 0xbc
 8004286:	d00a      	beq.n	800429e <xTaskCreateStatic+0x66>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	61bb      	str	r3, [r7, #24]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800429e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01e      	beq.n	80042e4 <xTaskCreateStatic+0xac>
 80042a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01b      	beq.n	80042e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042be:	2300      	movs	r3, #0
 80042c0:	9303      	str	r3, [sp, #12]
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	9302      	str	r3, [sp, #8]
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f850 	bl	800437c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042de:	f000 f8f3 	bl	80044c8 <prvAddNewTaskToReadyList>
 80042e2:	e001      	b.n	80042e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042e8:	697b      	ldr	r3, [r7, #20]
	}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3728      	adds	r7, #40	; 0x28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08c      	sub	sp, #48	; 0x30
 80042f6:	af04      	add	r7, sp, #16
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fd0e 	bl	8005d28 <pvPortMalloc>
 800430c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00e      	beq.n	8004332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004314:	20bc      	movs	r0, #188	; 0xbc
 8004316:	f001 fd07 	bl	8005d28 <pvPortMalloc>
 800431a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
 8004328:	e005      	b.n	8004336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f001 fdc8 	bl	8005ec0 <vPortFree>
 8004330:	e001      	b.n	8004336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d017      	beq.n	800436c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	2300      	movs	r3, #0
 8004348:	9303      	str	r3, [sp, #12]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	9302      	str	r3, [sp, #8]
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f80e 	bl	800437c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004360:	69f8      	ldr	r0, [r7, #28]
 8004362:	f000 f8b1 	bl	80044c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e002      	b.n	8004372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800436c:	f04f 33ff 	mov.w	r3, #4294967295
 8004370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004372:	69bb      	ldr	r3, [r7, #24]
	}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	461a      	mov	r2, r3
 8004394:	21a5      	movs	r1, #165	; 0xa5
 8004396:	f001 ffe2 	bl	800635e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043a4:	3b01      	subs	r3, #1
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	617b      	str	r3, [r7, #20]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01f      	beq.n	800441a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e012      	b.n	8004406 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	7819      	ldrb	r1, [r3, #0]
 80043e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	3334      	adds	r3, #52	; 0x34
 80043f0:	460a      	mov	r2, r1
 80043f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d006      	beq.n	800440e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	3301      	adds	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b0f      	cmp	r3, #15
 800440a:	d9e9      	bls.n	80043e0 <prvInitialiseNewTask+0x64>
 800440c:	e000      	b.n	8004410 <prvInitialiseNewTask+0x94>
			{
				break;
 800440e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004418:	e003      	b.n	8004422 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	2b37      	cmp	r3, #55	; 0x37
 8004426:	d901      	bls.n	800442c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004428:	2337      	movs	r3, #55	; 0x37
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004430:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004436:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	2200      	movs	r2, #0
 800443c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff f977 	bl	8003736 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	3318      	adds	r3, #24
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff f972 	bl	8003736 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004466:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	2200      	movs	r2, #0
 8004474:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	3354      	adds	r3, #84	; 0x54
 800447c:	2260      	movs	r2, #96	; 0x60
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f001 ff6c 	bl	800635e <memset>
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	4a0c      	ldr	r2, [pc, #48]	; (80044bc <prvInitialiseNewTask+0x140>)
 800448a:	659a      	str	r2, [r3, #88]	; 0x58
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <prvInitialiseNewTask+0x144>)
 8004490:	65da      	str	r2, [r3, #92]	; 0x5c
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <prvInitialiseNewTask+0x148>)
 8004496:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	69b8      	ldr	r0, [r7, #24]
 800449e:	f001 f9f7 	bl	8005890 <pxPortInitialiseStack>
 80044a2:	4602      	mov	r2, r0
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044b4:	bf00      	nop
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	08007710 	.word	0x08007710
 80044c0:	08007730 	.word	0x08007730
 80044c4:	080076f0 	.word	0x080076f0

080044c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044d0:	f001 fb08 	bl	8005ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044d4:	4b2d      	ldr	r3, [pc, #180]	; (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044de:	4b2c      	ldr	r3, [pc, #176]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044e6:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d110      	bne.n	8004516 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044f4:	f000 fcc4 	bl	8004e80 <prvInitialiseTaskLists>
 80044f8:	e00d      	b.n	8004516 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044fa:	4b26      	ldr	r3, [pc, #152]	; (8004594 <prvAddNewTaskToReadyList+0xcc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d802      	bhi.n	8004516 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004510:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <prvAddNewTaskToReadyList+0xd0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <prvAddNewTaskToReadyList+0xd0>)
 800451e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <prvAddNewTaskToReadyList+0xd0>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <prvAddNewTaskToReadyList+0xd4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d903      	bls.n	800453c <prvAddNewTaskToReadyList+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	4a18      	ldr	r2, [pc, #96]	; (800459c <prvAddNewTaskToReadyList+0xd4>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <prvAddNewTaskToReadyList+0xd8>)
 800454a:	441a      	add	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7ff f8fc 	bl	8003750 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004558:	f001 faf4 	bl	8005b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <prvAddNewTaskToReadyList+0xcc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00e      	beq.n	8004582 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	429a      	cmp	r2, r3
 8004570:	d207      	bcs.n	8004582 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <prvAddNewTaskToReadyList+0xdc>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000dc0 	.word	0x20000dc0
 8004590:	200008ec 	.word	0x200008ec
 8004594:	20000dcc 	.word	0x20000dcc
 8004598:	20000ddc 	.word	0x20000ddc
 800459c:	20000dc8 	.word	0x20000dc8
 80045a0:	200008f0 	.word	0x200008f0
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d017      	beq.n	80045ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <vTaskDelay+0x60>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <vTaskDelay+0x30>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60bb      	str	r3, [r7, #8]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045d8:	f000 f88a 	bl	80046f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045dc:	2100      	movs	r1, #0
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fdb4 	bl	800514c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045e4:	f000 f892 	bl	800470c <xTaskResumeAll>
 80045e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <vTaskDelay+0x64>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000de8 	.word	0x20000de8
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800461e:	463a      	mov	r2, r7
 8004620:	1d39      	adds	r1, r7, #4
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fede 	bl	80033e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	9202      	str	r2, [sp, #8]
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	460a      	mov	r2, r1
 800463e:	4924      	ldr	r1, [pc, #144]	; (80046d0 <vTaskStartScheduler+0xc0>)
 8004640:	4824      	ldr	r0, [pc, #144]	; (80046d4 <vTaskStartScheduler+0xc4>)
 8004642:	f7ff fdf9 	bl	8004238 <xTaskCreateStatic>
 8004646:	4603      	mov	r3, r0
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <vTaskStartScheduler+0xc8>)
 800464a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800464c:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <vTaskStartScheduler+0xc8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004654:	2301      	movs	r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e001      	b.n	800465e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d102      	bne.n	800466a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004664:	f000 fdc6 	bl	80051f4 <xTimerCreateTimerTask>
 8004668:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d11b      	bne.n	80046a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004684:	4b15      	ldr	r3, [pc, #84]	; (80046dc <vTaskStartScheduler+0xcc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3354      	adds	r3, #84	; 0x54
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <vTaskStartScheduler+0xd0>)
 800468c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <vTaskStartScheduler+0xd4>)
 8004690:	f04f 32ff 	mov.w	r2, #4294967295
 8004694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <vTaskStartScheduler+0xd8>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800469c:	4b13      	ldr	r3, [pc, #76]	; (80046ec <vTaskStartScheduler+0xdc>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046a2:	f001 f97d 	bl	80059a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046a6:	e00e      	b.n	80046c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d10a      	bne.n	80046c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <vTaskStartScheduler+0xb4>
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	080076c0 	.word	0x080076c0
 80046d4:	08004e51 	.word	0x08004e51
 80046d8:	20000de4 	.word	0x20000de4
 80046dc:	200008ec 	.word	0x200008ec
 80046e0:	2000001c 	.word	0x2000001c
 80046e4:	20000de0 	.word	0x20000de0
 80046e8:	20000dcc 	.word	0x20000dcc
 80046ec:	20000dc4 	.word	0x20000dc4

080046f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <vTaskSuspendAll+0x18>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	4a03      	ldr	r2, [pc, #12]	; (8004708 <vTaskSuspendAll+0x18>)
 80046fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046fe:	bf00      	nop
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	20000de8 	.word	0x20000de8

0800470c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800471a:	4b42      	ldr	r3, [pc, #264]	; (8004824 <xTaskResumeAll+0x118>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <xTaskResumeAll+0x2c>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	603b      	str	r3, [r7, #0]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004738:	f001 f9d4 	bl	8005ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800473c:	4b39      	ldr	r3, [pc, #228]	; (8004824 <xTaskResumeAll+0x118>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3b01      	subs	r3, #1
 8004742:	4a38      	ldr	r2, [pc, #224]	; (8004824 <xTaskResumeAll+0x118>)
 8004744:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004746:	4b37      	ldr	r3, [pc, #220]	; (8004824 <xTaskResumeAll+0x118>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d162      	bne.n	8004814 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800474e:	4b36      	ldr	r3, [pc, #216]	; (8004828 <xTaskResumeAll+0x11c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d05e      	beq.n	8004814 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004756:	e02f      	b.n	80047b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004758:	4b34      	ldr	r3, [pc, #208]	; (800482c <xTaskResumeAll+0x120>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3318      	adds	r3, #24
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff f850 	bl	800380a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff f84b 	bl	800380a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <xTaskResumeAll+0x124>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d903      	bls.n	8004788 <xTaskResumeAll+0x7c>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <xTaskResumeAll+0x124>)
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4a27      	ldr	r2, [pc, #156]	; (8004834 <xTaskResumeAll+0x128>)
 8004796:	441a      	add	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7fe ffd6 	bl	8003750 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a8:	4b23      	ldr	r3, [pc, #140]	; (8004838 <xTaskResumeAll+0x12c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <xTaskResumeAll+0x130>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <xTaskResumeAll+0x120>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1cb      	bne.n	8004758 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047c6:	f000 fbfd 	bl	8004fc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <xTaskResumeAll+0x134>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047d6:	f000 f847 	bl	8004868 <xTaskIncrementTick>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047e0:	4b16      	ldr	r3, [pc, #88]	; (800483c <xTaskResumeAll+0x130>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f1      	bne.n	80047d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <xTaskResumeAll+0x134>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <xTaskResumeAll+0x130>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d009      	beq.n	8004814 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <xTaskResumeAll+0x138>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004814:	f001 f996 	bl	8005b44 <vPortExitCritical>

	return xAlreadyYielded;
 8004818:	68bb      	ldr	r3, [r7, #8]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000de8 	.word	0x20000de8
 8004828:	20000dc0 	.word	0x20000dc0
 800482c:	20000d80 	.word	0x20000d80
 8004830:	20000dc8 	.word	0x20000dc8
 8004834:	200008f0 	.word	0x200008f0
 8004838:	200008ec 	.word	0x200008ec
 800483c:	20000dd4 	.word	0x20000dd4
 8004840:	20000dd0 	.word	0x20000dd0
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <xTaskGetTickCount+0x1c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004854:	687b      	ldr	r3, [r7, #4]
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000dc4 	.word	0x20000dc4

08004868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004872:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <xTaskIncrementTick+0x148>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 808f 	bne.w	800499a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800487c:	4b4d      	ldr	r3, [pc, #308]	; (80049b4 <xTaskIncrementTick+0x14c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004884:	4a4b      	ldr	r2, [pc, #300]	; (80049b4 <xTaskIncrementTick+0x14c>)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d120      	bne.n	80048d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004890:	4b49      	ldr	r3, [pc, #292]	; (80049b8 <xTaskIncrementTick+0x150>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	603b      	str	r3, [r7, #0]
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <xTaskIncrementTick+0x46>
 80048b0:	4b41      	ldr	r3, [pc, #260]	; (80049b8 <xTaskIncrementTick+0x150>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	4b41      	ldr	r3, [pc, #260]	; (80049bc <xTaskIncrementTick+0x154>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3f      	ldr	r2, [pc, #252]	; (80049b8 <xTaskIncrementTick+0x150>)
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	4a3f      	ldr	r2, [pc, #252]	; (80049bc <xTaskIncrementTick+0x154>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4b3e      	ldr	r3, [pc, #248]	; (80049c0 <xTaskIncrementTick+0x158>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	4a3d      	ldr	r2, [pc, #244]	; (80049c0 <xTaskIncrementTick+0x158>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	f000 fb79 	bl	8004fc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048d2:	4b3c      	ldr	r3, [pc, #240]	; (80049c4 <xTaskIncrementTick+0x15c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d349      	bcc.n	8004970 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048dc:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <xTaskIncrementTick+0x150>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <xTaskIncrementTick+0x15c>)
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	601a      	str	r2, [r3, #0]
					break;
 80048ee:	e03f      	b.n	8004970 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f0:	4b31      	ldr	r3, [pc, #196]	; (80049b8 <xTaskIncrementTick+0x150>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d203      	bcs.n	8004910 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004908:	4a2e      	ldr	r2, [pc, #184]	; (80049c4 <xTaskIncrementTick+0x15c>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800490e:	e02f      	b.n	8004970 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe ff78 	bl	800380a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	3318      	adds	r3, #24
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe ff6f 	bl	800380a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <xTaskIncrementTick+0x160>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <xTaskIncrementTick+0xd8>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4a22      	ldr	r2, [pc, #136]	; (80049c8 <xTaskIncrementTick+0x160>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4a1f      	ldr	r2, [pc, #124]	; (80049cc <xTaskIncrementTick+0x164>)
 800494e:	441a      	add	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7fe fefa 	bl	8003750 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <xTaskIncrementTick+0x168>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	429a      	cmp	r2, r3
 8004968:	d3b8      	bcc.n	80048dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800496a:	2301      	movs	r3, #1
 800496c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496e:	e7b5      	b.n	80048dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004970:	4b17      	ldr	r3, [pc, #92]	; (80049d0 <xTaskIncrementTick+0x168>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004976:	4915      	ldr	r1, [pc, #84]	; (80049cc <xTaskIncrementTick+0x164>)
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d901      	bls.n	800498c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004988:	2301      	movs	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <xTaskIncrementTick+0x16c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004994:	2301      	movs	r3, #1
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	e004      	b.n	80049a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800499a:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <xTaskIncrementTick+0x170>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	4a0d      	ldr	r2, [pc, #52]	; (80049d8 <xTaskIncrementTick+0x170>)
 80049a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049a4:	697b      	ldr	r3, [r7, #20]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000de8 	.word	0x20000de8
 80049b4:	20000dc4 	.word	0x20000dc4
 80049b8:	20000d78 	.word	0x20000d78
 80049bc:	20000d7c 	.word	0x20000d7c
 80049c0:	20000dd8 	.word	0x20000dd8
 80049c4:	20000de0 	.word	0x20000de0
 80049c8:	20000dc8 	.word	0x20000dc8
 80049cc:	200008f0 	.word	0x200008f0
 80049d0:	200008ec 	.word	0x200008ec
 80049d4:	20000dd4 	.word	0x20000dd4
 80049d8:	20000dd0 	.word	0x20000dd0

080049dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049e2:	4b2a      	ldr	r3, [pc, #168]	; (8004a8c <vTaskSwitchContext+0xb0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ea:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <vTaskSwitchContext+0xb4>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049f0:	e046      	b.n	8004a80 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <vTaskSwitchContext+0xb4>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f8:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <vTaskSwitchContext+0xb8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e010      	b.n	8004a22 <vTaskSwitchContext+0x46>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <vTaskSwitchContext+0x40>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	607b      	str	r3, [r7, #4]
}
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <vTaskSwitchContext+0x3e>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	491d      	ldr	r1, [pc, #116]	; (8004a98 <vTaskSwitchContext+0xbc>)
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0e4      	beq.n	8004a00 <vTaskSwitchContext+0x24>
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <vTaskSwitchContext+0xbc>)
 8004a42:	4413      	add	r3, r2
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3308      	adds	r3, #8
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d104      	bne.n	8004a66 <vTaskSwitchContext+0x8a>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <vTaskSwitchContext+0xc0>)
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <vTaskSwitchContext+0xb8>)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <vTaskSwitchContext+0xc0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3354      	adds	r3, #84	; 0x54
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <vTaskSwitchContext+0xc4>)
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	20000de8 	.word	0x20000de8
 8004a90:	20000dd4 	.word	0x20000dd4
 8004a94:	20000dc8 	.word	0x20000dc8
 8004a98:	200008f0 	.word	0x200008f0
 8004a9c:	200008ec 	.word	0x200008ec
 8004aa0:	2000001c 	.word	0x2000001c

08004aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aca:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <vTaskPlaceOnEventList+0x44>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3318      	adds	r3, #24
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fe fe60 	bl	8003798 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ad8:	2101      	movs	r1, #1
 8004ada:	6838      	ldr	r0, [r7, #0]
 8004adc:	f000 fb36 	bl	800514c <prvAddCurrentTaskToDelayedList>
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	200008ec 	.word	0x200008ec

08004aec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	617b      	str	r3, [r7, #20]
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004b14:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <vTaskPlaceOnUnorderedEventList+0x70>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	613b      	str	r3, [r7, #16]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b3c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3318      	adds	r3, #24
 8004b44:	4619      	mov	r1, r3
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7fe fe02 	bl	8003750 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fafc 	bl	800514c <prvAddCurrentTaskToDelayedList>
}
 8004b54:	bf00      	nop
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000de8 	.word	0x20000de8
 8004b60:	200008ec 	.word	0x200008ec

08004b64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	617b      	str	r3, [r7, #20]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3318      	adds	r3, #24
 8004b92:	4619      	mov	r1, r3
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7fe fddb 	bl	8003750 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	68b8      	ldr	r0, [r7, #8]
 8004baa:	f000 facf 	bl	800514c <prvAddCurrentTaskToDelayedList>
	}
 8004bae:	bf00      	nop
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	200008ec 	.word	0x200008ec

08004bbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60fb      	str	r3, [r7, #12]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3318      	adds	r3, #24
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fe0c 	bl	800380a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf2:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <xTaskRemoveFromEventList+0xb0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d11d      	bne.n	8004c36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fe03 	bl	800380a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <xTaskRemoveFromEventList+0xb4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d903      	bls.n	8004c18 <xTaskRemoveFromEventList+0x5c>
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <xTaskRemoveFromEventList+0xb4>)
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <xTaskRemoveFromEventList+0xb8>)
 8004c26:	441a      	add	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7fe fd8e 	bl	8003750 <vListInsertEnd>
 8004c34:	e005      	b.n	8004c42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3318      	adds	r3, #24
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	480e      	ldr	r0, [pc, #56]	; (8004c78 <xTaskRemoveFromEventList+0xbc>)
 8004c3e:	f7fe fd87 	bl	8003750 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <xTaskRemoveFromEventList+0xc0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d905      	bls.n	8004c5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <xTaskRemoveFromEventList+0xc4>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e001      	b.n	8004c60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c60:	697b      	ldr	r3, [r7, #20]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000de8 	.word	0x20000de8
 8004c70:	20000dc8 	.word	0x20000dc8
 8004c74:	200008f0 	.word	0x200008f0
 8004c78:	20000d80 	.word	0x20000d80
 8004c7c:	200008ec 	.word	0x200008ec
 8004c80:	20000dd4 	.word	0x20000dd4

08004c84 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004c8e:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	613b      	str	r3, [r7, #16]
}
 8004ca8:	bf00      	nop
 8004caa:	e7fe      	b.n	8004caa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60fb      	str	r3, [r7, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7fe fd96 	bl	800380a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fd91 	bl	800380a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d903      	bls.n	8004cfc <vTaskRemoveFromUnorderedEventList+0x78>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4a0f      	ldr	r2, [pc, #60]	; (8004d38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004d0a:	441a      	add	r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f7fe fd1c 	bl	8003750 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d902      	bls.n	8004d2c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004d26:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
	}
}
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000de8 	.word	0x20000de8
 8004d38:	20000dc8 	.word	0x20000dc8
 8004d3c:	200008f0 	.word	0x200008f0
 8004d40:	200008ec 	.word	0x200008ec
 8004d44:	20000dd4 	.word	0x20000dd4

08004d48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <vTaskInternalSetTimeOutState+0x24>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <vTaskInternalSetTimeOutState+0x28>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	605a      	str	r2, [r3, #4]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000dd8 	.word	0x20000dd8
 8004d70:	20000dc4 	.word	0x20000dc4

08004d74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	613b      	str	r3, [r7, #16]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004db6:	f000 fe95 	bl	8005ae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dba:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <xTaskCheckForTimeOut+0xbc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d102      	bne.n	8004dda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	e023      	b.n	8004e22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <xTaskCheckForTimeOut+0xc0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d007      	beq.n	8004df6 <xTaskCheckForTimeOut+0x82>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d302      	bcc.n	8004df6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e015      	b.n	8004e22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d20b      	bcs.n	8004e18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff9b 	bl	8004d48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e004      	b.n	8004e22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e22:	f000 fe8f 	bl	8005b44 <vPortExitCritical>

	return xReturn;
 8004e26:	69fb      	ldr	r3, [r7, #28]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000dc4 	.word	0x20000dc4
 8004e34:	20000dd8 	.word	0x20000dd8

08004e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <vTaskMissedYield+0x14>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	20000dd4 	.word	0x20000dd4

08004e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e58:	f000 f852 	bl	8004f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <prvIdleTask+0x28>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d9f9      	bls.n	8004e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <prvIdleTask+0x2c>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e74:	e7f0      	b.n	8004e58 <prvIdleTask+0x8>
 8004e76:	bf00      	nop
 8004e78:	200008f0 	.word	0x200008f0
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	e00c      	b.n	8004ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <prvInitialiseTaskLists+0x60>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fc2b 	bl	80036f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b37      	cmp	r3, #55	; 0x37
 8004eaa:	d9ef      	bls.n	8004e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004eac:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <prvInitialiseTaskLists+0x64>)
 8004eae:	f7fe fc22 	bl	80036f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <prvInitialiseTaskLists+0x68>)
 8004eb4:	f7fe fc1f 	bl	80036f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004eb8:	480c      	ldr	r0, [pc, #48]	; (8004eec <prvInitialiseTaskLists+0x6c>)
 8004eba:	f7fe fc1c 	bl	80036f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <prvInitialiseTaskLists+0x70>)
 8004ec0:	f7fe fc19 	bl	80036f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ec4:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <prvInitialiseTaskLists+0x74>)
 8004ec6:	f7fe fc16 	bl	80036f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <prvInitialiseTaskLists+0x78>)
 8004ecc:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <prvInitialiseTaskLists+0x64>)
 8004ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvInitialiseTaskLists+0x7c>)
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <prvInitialiseTaskLists+0x68>)
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200008f0 	.word	0x200008f0
 8004ee4:	20000d50 	.word	0x20000d50
 8004ee8:	20000d64 	.word	0x20000d64
 8004eec:	20000d80 	.word	0x20000d80
 8004ef0:	20000d94 	.word	0x20000d94
 8004ef4:	20000dac 	.word	0x20000dac
 8004ef8:	20000d78 	.word	0x20000d78
 8004efc:	20000d7c 	.word	0x20000d7c

08004f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f06:	e019      	b.n	8004f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f08:	f000 fdec 	bl	8005ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <prvCheckTasksWaitingTermination+0x50>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe fc76 	bl	800380a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	4a0b      	ldr	r2, [pc, #44]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <prvCheckTasksWaitingTermination+0x58>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <prvCheckTasksWaitingTermination+0x58>)
 8004f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f32:	f000 fe07 	bl	8005b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f810 	bl	8004f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <prvCheckTasksWaitingTermination+0x58>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e1      	bne.n	8004f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000d94 	.word	0x20000d94
 8004f54:	20000dc0 	.word	0x20000dc0
 8004f58:	20000da8 	.word	0x20000da8

08004f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3354      	adds	r3, #84	; 0x54
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 fae1 	bl	8006530 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d108      	bne.n	8004f8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 ff9f 	bl	8005ec0 <vPortFree>
				vPortFree( pxTCB );
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 ff9c 	bl	8005ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f88:	e018      	b.n	8004fbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d103      	bne.n	8004f9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 ff93 	bl	8005ec0 <vPortFree>
	}
 8004f9a:	e00f      	b.n	8004fbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d00a      	beq.n	8004fbc <prvDeleteTCB+0x60>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <prvDeleteTCB+0x5e>
	}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <prvResetNextTaskUnblockTime+0x38>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <prvResetNextTaskUnblockTime+0x3c>)
 8004fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fdc:	e008      	b.n	8004ff0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <prvResetNextTaskUnblockTime+0x38>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	4a04      	ldr	r2, [pc, #16]	; (8005000 <prvResetNextTaskUnblockTime+0x3c>)
 8004fee:	6013      	str	r3, [r2, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000d78 	.word	0x20000d78
 8005000:	20000de0 	.word	0x20000de0

08005004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <xTaskGetSchedulerState+0x34>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005012:	2301      	movs	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	e008      	b.n	800502a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <xTaskGetSchedulerState+0x38>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005020:	2302      	movs	r3, #2
 8005022:	607b      	str	r3, [r7, #4]
 8005024:	e001      	b.n	800502a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800502a:	687b      	ldr	r3, [r7, #4]
	}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000dcc 	.word	0x20000dcc
 800503c:	20000de8 	.word	0x20000de8

08005040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d056      	beq.n	8005104 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005056:	4b2e      	ldr	r3, [pc, #184]	; (8005110 <xTaskPriorityDisinherit+0xd0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d00a      	beq.n	8005076 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	60fb      	str	r3, [r7, #12]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60bb      	str	r3, [r7, #8]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d02c      	beq.n	8005104 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d128      	bne.n	8005104 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fba7 	bl	800380a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <xTaskPriorityDisinherit+0xd4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d903      	bls.n	80050e4 <xTaskPriorityDisinherit+0xa4>
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	4a0c      	ldr	r2, [pc, #48]	; (8005114 <xTaskPriorityDisinherit+0xd4>)
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4a09      	ldr	r2, [pc, #36]	; (8005118 <xTaskPriorityDisinherit+0xd8>)
 80050f2:	441a      	add	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fe fb28 	bl	8003750 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005104:	697b      	ldr	r3, [r7, #20]
	}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	200008ec 	.word	0x200008ec
 8005114:	20000dc8 	.word	0x20000dc8
 8005118:	200008f0 	.word	0x200008f0

0800511c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <uxTaskResetEventItemValue+0x2c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800512a:	4b07      	ldr	r3, [pc, #28]	; (8005148 <uxTaskResetEventItemValue+0x2c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <uxTaskResetEventItemValue+0x2c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005138:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800513a:	687b      	ldr	r3, [r7, #4]
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	200008ec 	.word	0x200008ec

0800514c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005156:	4b21      	ldr	r3, [pc, #132]	; (80051dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800515c:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3304      	adds	r3, #4
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe fb51 	bl	800380a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d10a      	bne.n	8005186 <prvAddCurrentTaskToDelayedList+0x3a>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4819      	ldr	r0, [pc, #100]	; (80051e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005180:	f7fe fae6 	bl	8003750 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005184:	e026      	b.n	80051d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	429a      	cmp	r2, r3
 800519c:	d209      	bcs.n	80051b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f7fe faf4 	bl	8003798 <vListInsert>
}
 80051b0:	e010      	b.n	80051d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051b2:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f7fe faea 	bl	8003798 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d202      	bcs.n	80051d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051ce:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6013      	str	r3, [r2, #0]
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000dc4 	.word	0x20000dc4
 80051e0:	200008ec 	.word	0x200008ec
 80051e4:	20000dac 	.word	0x20000dac
 80051e8:	20000d7c 	.word	0x20000d7c
 80051ec:	20000d78 	.word	0x20000d78
 80051f0:	20000de0 	.word	0x20000de0

080051f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051fe:	f000 fb07 	bl	8005810 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <xTimerCreateTimerTask+0x80>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d021      	beq.n	800524e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005212:	1d3a      	adds	r2, r7, #4
 8005214:	f107 0108 	add.w	r1, r7, #8
 8005218:	f107 030c 	add.w	r3, r7, #12
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe f8fd 	bl	800341c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	9202      	str	r2, [sp, #8]
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	2302      	movs	r3, #2
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2300      	movs	r3, #0
 8005232:	460a      	mov	r2, r1
 8005234:	4910      	ldr	r1, [pc, #64]	; (8005278 <xTimerCreateTimerTask+0x84>)
 8005236:	4811      	ldr	r0, [pc, #68]	; (800527c <xTimerCreateTimerTask+0x88>)
 8005238:	f7fe fffe 	bl	8004238 <xTaskCreateStatic>
 800523c:	4603      	mov	r3, r0
 800523e:	4a10      	ldr	r2, [pc, #64]	; (8005280 <xTimerCreateTimerTask+0x8c>)
 8005240:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <xTimerCreateTimerTask+0x8c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800524a:	2301      	movs	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	613b      	str	r3, [r7, #16]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800526a:	697b      	ldr	r3, [r7, #20]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000e1c 	.word	0x20000e1c
 8005278:	080076c8 	.word	0x080076c8
 800527c:	080053b9 	.word	0x080053b9
 8005280:	20000e20 	.word	0x20000e20

08005284 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	; 0x28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005292:	2300      	movs	r3, #0
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	623b      	str	r3, [r7, #32]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052b2:	4b1a      	ldr	r3, [pc, #104]	; (800531c <xTimerGenericCommand+0x98>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d02a      	beq.n	8005310 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b05      	cmp	r3, #5
 80052ca:	dc18      	bgt.n	80052fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052cc:	f7ff fe9a 	bl	8005004 <xTaskGetSchedulerState>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d109      	bne.n	80052ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052d6:	4b11      	ldr	r3, [pc, #68]	; (800531c <xTimerGenericCommand+0x98>)
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f107 0110 	add.w	r1, r7, #16
 80052de:	2300      	movs	r3, #0
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	f7fe fbc1 	bl	8003a68 <xQueueGenericSend>
 80052e6:	6278      	str	r0, [r7, #36]	; 0x24
 80052e8:	e012      	b.n	8005310 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052ea:	4b0c      	ldr	r3, [pc, #48]	; (800531c <xTimerGenericCommand+0x98>)
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f107 0110 	add.w	r1, r7, #16
 80052f2:	2300      	movs	r3, #0
 80052f4:	2200      	movs	r2, #0
 80052f6:	f7fe fbb7 	bl	8003a68 <xQueueGenericSend>
 80052fa:	6278      	str	r0, [r7, #36]	; 0x24
 80052fc:	e008      	b.n	8005310 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <xTimerGenericCommand+0x98>)
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	f107 0110 	add.w	r1, r7, #16
 8005306:	2300      	movs	r3, #0
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	f7fe fcab 	bl	8003c64 <xQueueGenericSendFromISR>
 800530e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005312:	4618      	mov	r0, r3
 8005314:	3728      	adds	r7, #40	; 0x28
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000e1c 	.word	0x20000e1c

08005320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800532a:	4b22      	ldr	r3, [pc, #136]	; (80053b4 <prvProcessExpiredTimer+0x94>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3304      	adds	r3, #4
 8005338:	4618      	mov	r0, r3
 800533a:	f7fe fa66 	bl	800380a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d022      	beq.n	8005392 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	18d1      	adds	r1, r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	6978      	ldr	r0, [r7, #20]
 800535a:	f000 f8d1 	bl	8005500 <prvInsertTimerInActiveList>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01f      	beq.n	80053a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005364:	2300      	movs	r3, #0
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	2300      	movs	r3, #0
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	2100      	movs	r1, #0
 800536e:	6978      	ldr	r0, [r7, #20]
 8005370:	f7ff ff88 	bl	8005284 <xTimerGenericCommand>
 8005374:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d113      	bne.n	80053a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60fb      	str	r3, [r7, #12]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	6978      	ldr	r0, [r7, #20]
 80053aa:	4798      	blx	r3
}
 80053ac:	bf00      	nop
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000e14 	.word	0x20000e14

080053b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053c0:	f107 0308 	add.w	r3, r7, #8
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 f857 	bl	8005478 <prvGetNextExpireTime>
 80053ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4619      	mov	r1, r3
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f803 	bl	80053dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053d6:	f000 f8d5 	bl	8005584 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053da:	e7f1      	b.n	80053c0 <prvTimerTask+0x8>

080053dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053e6:	f7ff f983 	bl	80046f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ea:	f107 0308 	add.w	r3, r7, #8
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f866 	bl	80054c0 <prvSampleTimeNow>
 80053f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d130      	bne.n	800545e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <prvProcessTimerOrBlockTask+0x3c>
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	429a      	cmp	r2, r3
 8005408:	d806      	bhi.n	8005418 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800540a:	f7ff f97f 	bl	800470c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff ff85 	bl	8005320 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005416:	e024      	b.n	8005462 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <prvProcessTimerOrBlockTask+0x90>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <prvProcessTimerOrBlockTask+0x50>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <prvProcessTimerOrBlockTask+0x52>
 800542c:	2300      	movs	r3, #0
 800542e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005430:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <prvProcessTimerOrBlockTask+0x94>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	4619      	mov	r1, r3
 800543e:	f7fe fec7 	bl	80041d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005442:	f7ff f963 	bl	800470c <xTaskResumeAll>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800544c:	4b09      	ldr	r3, [pc, #36]	; (8005474 <prvProcessTimerOrBlockTask+0x98>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
}
 800545c:	e001      	b.n	8005462 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800545e:	f7ff f955 	bl	800470c <xTaskResumeAll>
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000e18 	.word	0x20000e18
 8005470:	20000e1c 	.word	0x20000e1c
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005480:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <prvGetNextExpireTime+0x44>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <prvGetNextExpireTime+0x16>
 800548a:	2201      	movs	r2, #1
 800548c:	e000      	b.n	8005490 <prvGetNextExpireTime+0x18>
 800548e:	2200      	movs	r2, #0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d105      	bne.n	80054a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <prvGetNextExpireTime+0x44>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e001      	b.n	80054ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054ac:	68fb      	ldr	r3, [r7, #12]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000e14 	.word	0x20000e14

080054c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054c8:	f7ff f9be 	bl	8004848 <xTaskGetTickCount>
 80054cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <prvSampleTimeNow+0x3c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d205      	bcs.n	80054e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054d8:	f000 f936 	bl	8005748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e002      	b.n	80054ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054ea:	4a04      	ldr	r2, [pc, #16]	; (80054fc <prvSampleTimeNow+0x3c>)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000e24 	.word	0x20000e24

08005500 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d812      	bhi.n	800554c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	1ad2      	subs	r2, r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005534:	2301      	movs	r3, #1
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e01b      	b.n	8005572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800553a:	4b10      	ldr	r3, [pc, #64]	; (800557c <prvInsertTimerInActiveList+0x7c>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f7fe f927 	bl	8003798 <vListInsert>
 800554a:	e012      	b.n	8005572 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d206      	bcs.n	8005562 <prvInsertTimerInActiveList+0x62>
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d302      	bcc.n	8005562 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800555c:	2301      	movs	r3, #1
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e007      	b.n	8005572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <prvInsertTimerInActiveList+0x80>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3304      	adds	r3, #4
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7fe f913 	bl	8003798 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005572:	697b      	ldr	r3, [r7, #20]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20000e18 	.word	0x20000e18
 8005580:	20000e14 	.word	0x20000e14

08005584 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08e      	sub	sp, #56	; 0x38
 8005588:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800558a:	e0ca      	b.n	8005722 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	da18      	bge.n	80055c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	3304      	adds	r3, #4
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	61fb      	str	r3, [r7, #28]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ba:	6850      	ldr	r0, [r2, #4]
 80055bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055be:	6892      	ldr	r2, [r2, #8]
 80055c0:	4611      	mov	r1, r2
 80055c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f2c0 80aa 	blt.w	8005720 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	3304      	adds	r3, #4
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fe f914 	bl	800380a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055e2:	463b      	mov	r3, r7
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff ff6b 	bl	80054c0 <prvSampleTimeNow>
 80055ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b09      	cmp	r3, #9
 80055f0:	f200 8097 	bhi.w	8005722 <prvProcessReceivedCommands+0x19e>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <prvProcessReceivedCommands+0x78>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005625 	.word	0x08005625
 8005600:	08005625 	.word	0x08005625
 8005604:	08005625 	.word	0x08005625
 8005608:	08005699 	.word	0x08005699
 800560c:	080056ad 	.word	0x080056ad
 8005610:	080056f7 	.word	0x080056f7
 8005614:	08005625 	.word	0x08005625
 8005618:	08005625 	.word	0x08005625
 800561c:	08005699 	.word	0x08005699
 8005620:	080056ad 	.word	0x080056ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	b2da      	uxtb	r2, r3
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	18d1      	adds	r1, r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005644:	f7ff ff5c 	bl	8005500 <prvInsertTimerInActiveList>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d069      	beq.n	8005722 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005654:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d05e      	beq.n	8005722 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	441a      	add	r2, r3
 800566c:	2300      	movs	r3, #0
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2300      	movs	r3, #0
 8005672:	2100      	movs	r1, #0
 8005674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005676:	f7ff fe05 	bl	8005284 <xTimerGenericCommand>
 800567a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d14f      	bne.n	8005722 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	61bb      	str	r3, [r7, #24]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80056aa:	e03a      	b.n	8005722 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	617b      	str	r3, [r7, #20]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	18d1      	adds	r1, r2, r3
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f0:	f7ff ff06 	bl	8005500 <prvInsertTimerInActiveList>
					break;
 80056f4:	e015      	b.n	8005722 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005706:	f000 fbdb 	bl	8005ec0 <vPortFree>
 800570a:	e00a      	b.n	8005722 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800571e:	e000      	b.n	8005722 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <prvProcessReceivedCommands+0x1c0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	1d39      	adds	r1, r7, #4
 8005728:	2200      	movs	r2, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fb36 	bl	8003d9c <xQueueReceive>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	f47f af2a 	bne.w	800558c <prvProcessReceivedCommands+0x8>
	}
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	3730      	adds	r7, #48	; 0x30
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000e1c 	.word	0x20000e1c

08005748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800574e:	e048      	b.n	80057e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005750:	4b2d      	ldr	r3, [pc, #180]	; (8005808 <prvSwitchTimerLists+0xc0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800575a:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <prvSwitchTimerLists+0xc0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3304      	adds	r3, #4
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe f84e 	bl	800380a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02e      	beq.n	80057e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90e      	bls.n	80057b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <prvSwitchTimerLists+0xc0>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fd fff3 	bl	8003798 <vListInsert>
 80057b2:	e016      	b.n	80057e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057b4:	2300      	movs	r3, #0
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	2300      	movs	r3, #0
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	2100      	movs	r1, #0
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f7ff fd60 	bl	8005284 <xTimerGenericCommand>
 80057c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	603b      	str	r3, [r7, #0]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057e2:	4b09      	ldr	r3, [pc, #36]	; (8005808 <prvSwitchTimerLists+0xc0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1b1      	bne.n	8005750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <prvSwitchTimerLists+0xc0>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <prvSwitchTimerLists+0xc4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a04      	ldr	r2, [pc, #16]	; (8005808 <prvSwitchTimerLists+0xc0>)
 80057f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057fa:	4a04      	ldr	r2, [pc, #16]	; (800580c <prvSwitchTimerLists+0xc4>)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6013      	str	r3, [r2, #0]
}
 8005800:	bf00      	nop
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000e14 	.word	0x20000e14
 800580c:	20000e18 	.word	0x20000e18

08005810 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005816:	f000 f965 	bl	8005ae4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800581a:	4b15      	ldr	r3, [pc, #84]	; (8005870 <prvCheckForValidListAndQueue+0x60>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d120      	bne.n	8005864 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005822:	4814      	ldr	r0, [pc, #80]	; (8005874 <prvCheckForValidListAndQueue+0x64>)
 8005824:	f7fd ff67 	bl	80036f6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005828:	4813      	ldr	r0, [pc, #76]	; (8005878 <prvCheckForValidListAndQueue+0x68>)
 800582a:	f7fd ff64 	bl	80036f6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <prvCheckForValidListAndQueue+0x6c>)
 8005830:	4a10      	ldr	r2, [pc, #64]	; (8005874 <prvCheckForValidListAndQueue+0x64>)
 8005832:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005834:	4b12      	ldr	r3, [pc, #72]	; (8005880 <prvCheckForValidListAndQueue+0x70>)
 8005836:	4a10      	ldr	r2, [pc, #64]	; (8005878 <prvCheckForValidListAndQueue+0x68>)
 8005838:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800583a:	2300      	movs	r3, #0
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <prvCheckForValidListAndQueue+0x74>)
 8005840:	4a11      	ldr	r2, [pc, #68]	; (8005888 <prvCheckForValidListAndQueue+0x78>)
 8005842:	2110      	movs	r1, #16
 8005844:	200a      	movs	r0, #10
 8005846:	f7fe f873 	bl	8003930 <xQueueGenericCreateStatic>
 800584a:	4603      	mov	r3, r0
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <prvCheckForValidListAndQueue+0x60>)
 800584e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <prvCheckForValidListAndQueue+0x60>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <prvCheckForValidListAndQueue+0x60>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	490b      	ldr	r1, [pc, #44]	; (800588c <prvCheckForValidListAndQueue+0x7c>)
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fc8c 	bl	800417c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005864:	f000 f96e 	bl	8005b44 <vPortExitCritical>
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000e1c 	.word	0x20000e1c
 8005874:	20000dec 	.word	0x20000dec
 8005878:	20000e00 	.word	0x20000e00
 800587c:	20000e14 	.word	0x20000e14
 8005880:	20000e18 	.word	0x20000e18
 8005884:	20000ec8 	.word	0x20000ec8
 8005888:	20000e28 	.word	0x20000e28
 800588c:	080076d0 	.word	0x080076d0

08005890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3b04      	subs	r3, #4
 80058a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3b04      	subs	r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f023 0201 	bic.w	r2, r3, #1
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3b04      	subs	r3, #4
 80058be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058c0:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <pxPortInitialiseStack+0x64>)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3b14      	subs	r3, #20
 80058ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3b04      	subs	r3, #4
 80058d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f06f 0202 	mvn.w	r2, #2
 80058de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3b20      	subs	r3, #32
 80058e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058e6:	68fb      	ldr	r3, [r7, #12]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	080058f9 	.word	0x080058f9

080058f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <prvTaskExitError+0x54>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d00a      	beq.n	8005922 <prvTaskExitError+0x2a>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60fb      	str	r3, [r7, #12]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <prvTaskExitError+0x28>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60bb      	str	r3, [r7, #8]
}
 8005934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005936:	bf00      	nop
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0fc      	beq.n	8005938 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000018 	.word	0x20000018

08005950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <pxCurrentTCBConst2>)
 8005952:	6819      	ldr	r1, [r3, #0]
 8005954:	6808      	ldr	r0, [r1, #0]
 8005956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	f380 8809 	msr	PSP, r0
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f380 8811 	msr	BASEPRI, r0
 800596a:	4770      	bx	lr
 800596c:	f3af 8000 	nop.w

08005970 <pxCurrentTCBConst2>:
 8005970:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop

08005978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005978:	4808      	ldr	r0, [pc, #32]	; (800599c <prvPortStartFirstTask+0x24>)
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	6800      	ldr	r0, [r0, #0]
 800597e:	f380 8808 	msr	MSP, r0
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f380 8814 	msr	CONTROL, r0
 800598a:	b662      	cpsie	i
 800598c:	b661      	cpsie	f
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	df00      	svc	0
 8005998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800599a:	bf00      	nop
 800599c:	e000ed08 	.word	0xe000ed08

080059a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059a6:	4b46      	ldr	r3, [pc, #280]	; (8005ac0 <xPortStartScheduler+0x120>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a46      	ldr	r2, [pc, #280]	; (8005ac4 <xPortStartScheduler+0x124>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10a      	bne.n	80059c6 <xPortStartScheduler+0x26>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	613b      	str	r3, [r7, #16]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059c6:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <xPortStartScheduler+0x120>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a3f      	ldr	r2, [pc, #252]	; (8005ac8 <xPortStartScheduler+0x128>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d10a      	bne.n	80059e6 <xPortStartScheduler+0x46>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	60fb      	str	r3, [r7, #12]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059e6:	4b39      	ldr	r3, [pc, #228]	; (8005acc <xPortStartScheduler+0x12c>)
 80059e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	22ff      	movs	r2, #255	; 0xff
 80059f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <xPortStartScheduler+0x130>)
 8005a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a0e:	4b31      	ldr	r3, [pc, #196]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a10:	2207      	movs	r2, #7
 8005a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a14:	e009      	b.n	8005a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a16:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	4a2d      	ldr	r2, [pc, #180]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a32:	2b80      	cmp	r3, #128	; 0x80
 8005a34:	d0ef      	beq.n	8005a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a36:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f1c3 0307 	rsb	r3, r3, #7
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d00a      	beq.n	8005a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60bb      	str	r3, [r7, #8]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a58:	4b1e      	ldr	r3, [pc, #120]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a62:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a76:	4b18      	ldr	r3, [pc, #96]	; (8005ad8 <xPortStartScheduler+0x138>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	; (8005ad8 <xPortStartScheduler+0x138>)
 8005a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a82:	4b15      	ldr	r3, [pc, #84]	; (8005ad8 <xPortStartScheduler+0x138>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <xPortStartScheduler+0x138>)
 8005a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a8e:	f000 f8dd 	bl	8005c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <xPortStartScheduler+0x13c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a98:	f000 f8fc 	bl	8005c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <xPortStartScheduler+0x140>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a0f      	ldr	r2, [pc, #60]	; (8005ae0 <xPortStartScheduler+0x140>)
 8005aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005aa8:	f7ff ff66 	bl	8005978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005aac:	f7fe ff96 	bl	80049dc <vTaskSwitchContext>
	prvTaskExitError();
 8005ab0:	f7ff ff22 	bl	80058f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	e000ed00 	.word	0xe000ed00
 8005ac4:	410fc271 	.word	0x410fc271
 8005ac8:	410fc270 	.word	0x410fc270
 8005acc:	e000e400 	.word	0xe000e400
 8005ad0:	20000f18 	.word	0x20000f18
 8005ad4:	20000f1c 	.word	0x20000f1c
 8005ad8:	e000ed20 	.word	0xe000ed20
 8005adc:	20000018 	.word	0x20000018
 8005ae0:	e000ef34 	.word	0xe000ef34

08005ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	607b      	str	r3, [r7, #4]
}
 8005afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005afe:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <vPortEnterCritical+0x58>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4a0d      	ldr	r2, [pc, #52]	; (8005b3c <vPortEnterCritical+0x58>)
 8005b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <vPortEnterCritical+0x58>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10f      	bne.n	8005b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <vPortEnterCritical+0x5c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	603b      	str	r3, [r7, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <vPortEnterCritical+0x4a>
	}
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000018 	.word	0x20000018
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <vPortExitCritical+0x50>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <vPortExitCritical+0x24>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	607b      	str	r3, [r7, #4]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <vPortExitCritical+0x50>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	4a09      	ldr	r2, [pc, #36]	; (8005b94 <vPortExitCritical+0x50>)
 8005b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b72:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <vPortExitCritical+0x50>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d105      	bne.n	8005b86 <vPortExitCritical+0x42>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	f383 8811 	msr	BASEPRI, r3
}
 8005b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000018 	.word	0x20000018
	...

08005ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ba0:	f3ef 8009 	mrs	r0, PSP
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <pxCurrentTCBConst>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	f01e 0f10 	tst.w	lr, #16
 8005bb0:	bf08      	it	eq
 8005bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	6010      	str	r0, [r2, #0]
 8005bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005bc4:	f380 8811 	msr	BASEPRI, r0
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f7fe ff04 	bl	80049dc <vTaskSwitchContext>
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	f380 8811 	msr	BASEPRI, r0
 8005bdc:	bc09      	pop	{r0, r3}
 8005bde:	6819      	ldr	r1, [r3, #0]
 8005be0:	6808      	ldr	r0, [r1, #0]
 8005be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be6:	f01e 0f10 	tst.w	lr, #16
 8005bea:	bf08      	it	eq
 8005bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bf0:	f380 8809 	msr	PSP, r0
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	f3af 8000 	nop.w

08005c00 <pxCurrentTCBConst>:
 8005c00:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop

08005c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c22:	f7fe fe21 	bl	8004868 <xTaskIncrementTick>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <xPortSysTickHandler+0x40>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	2300      	movs	r3, #0
 8005c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	f383 8811 	msr	BASEPRI, r3
}
 8005c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <vPortSetupTimerInterrupt+0x34>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <vPortSetupTimerInterrupt+0x38>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <vPortSetupTimerInterrupt+0x3c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <vPortSetupTimerInterrupt+0x40>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	099b      	lsrs	r3, r3, #6
 8005c68:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <vPortSetupTimerInterrupt+0x44>)
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <vPortSetupTimerInterrupt+0x34>)
 8005c70:	2207      	movs	r2, #7
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	e000e010 	.word	0xe000e010
 8005c84:	e000e018 	.word	0xe000e018
 8005c88:	2000000c 	.word	0x2000000c
 8005c8c:	10624dd3 	.word	0x10624dd3
 8005c90:	e000e014 	.word	0xe000e014

08005c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ca4 <vPortEnableVFP+0x10>
 8005c98:	6801      	ldr	r1, [r0, #0]
 8005c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c9e:	6001      	str	r1, [r0, #0]
 8005ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ca2:	bf00      	nop
 8005ca4:	e000ed88 	.word	0xe000ed88

08005ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cae:	f3ef 8305 	mrs	r3, IPSR
 8005cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	d914      	bls.n	8005ce4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <vPortValidateInterruptPriority+0x70>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cc4:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <vPortValidateInterruptPriority+0x74>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	7afa      	ldrb	r2, [r7, #11]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d20a      	bcs.n	8005ce4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	607b      	str	r3, [r7, #4]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ce4:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <vPortValidateInterruptPriority+0x78>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cec:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <vPortValidateInterruptPriority+0x7c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d90a      	bls.n	8005d0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	603b      	str	r3, [r7, #0]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <vPortValidateInterruptPriority+0x60>
	}
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	e000e3f0 	.word	0xe000e3f0
 8005d1c:	20000f18 	.word	0x20000f18
 8005d20:	e000ed0c 	.word	0xe000ed0c
 8005d24:	20000f1c 	.word	0x20000f1c

08005d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d34:	f7fe fcdc 	bl	80046f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d38:	4b5b      	ldr	r3, [pc, #364]	; (8005ea8 <pvPortMalloc+0x180>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d40:	f000 f920 	bl	8005f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d44:	4b59      	ldr	r3, [pc, #356]	; (8005eac <pvPortMalloc+0x184>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 8093 	bne.w	8005e78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01d      	beq.n	8005d94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d58:	2208      	movs	r2, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d014      	beq.n	8005d94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f023 0307 	bic.w	r3, r3, #7
 8005d70:	3308      	adds	r3, #8
 8005d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <pvPortMalloc+0x6c>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	617b      	str	r3, [r7, #20]
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d06e      	beq.n	8005e78 <pvPortMalloc+0x150>
 8005d9a:	4b45      	ldr	r3, [pc, #276]	; (8005eb0 <pvPortMalloc+0x188>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d869      	bhi.n	8005e78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005da4:	4b43      	ldr	r3, [pc, #268]	; (8005eb4 <pvPortMalloc+0x18c>)
 8005da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005da8:	4b42      	ldr	r3, [pc, #264]	; (8005eb4 <pvPortMalloc+0x18c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dae:	e004      	b.n	8005dba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d903      	bls.n	8005dcc <pvPortMalloc+0xa4>
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f1      	bne.n	8005db0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dcc:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <pvPortMalloc+0x180>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d050      	beq.n	8005e78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2208      	movs	r2, #8
 8005ddc:	4413      	add	r3, r2
 8005dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	1ad2      	subs	r2, r2, r3
 8005df0:	2308      	movs	r3, #8
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d91f      	bls.n	8005e38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <pvPortMalloc+0xf8>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	613b      	str	r3, [r7, #16]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	1ad2      	subs	r2, r2, r3
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e32:	69b8      	ldr	r0, [r7, #24]
 8005e34:	f000 f908 	bl	8006048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <pvPortMalloc+0x188>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <pvPortMalloc+0x188>)
 8005e44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e46:	4b1a      	ldr	r3, [pc, #104]	; (8005eb0 <pvPortMalloc+0x188>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <pvPortMalloc+0x190>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d203      	bcs.n	8005e5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e52:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <pvPortMalloc+0x188>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <pvPortMalloc+0x190>)
 8005e58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <pvPortMalloc+0x184>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <pvPortMalloc+0x194>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	4a11      	ldr	r2, [pc, #68]	; (8005ebc <pvPortMalloc+0x194>)
 8005e76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e78:	f7fe fc48 	bl	800470c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <pvPortMalloc+0x174>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60fb      	str	r3, [r7, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <pvPortMalloc+0x172>
	return pvReturn;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3728      	adds	r7, #40	; 0x28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20004b28 	.word	0x20004b28
 8005eac:	20004b3c 	.word	0x20004b3c
 8005eb0:	20004b2c 	.word	0x20004b2c
 8005eb4:	20004b20 	.word	0x20004b20
 8005eb8:	20004b30 	.word	0x20004b30
 8005ebc:	20004b34 	.word	0x20004b34

08005ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d04d      	beq.n	8005f6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	425b      	negs	r3, r3
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4413      	add	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <vPortFree+0xb8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <vPortFree+0x44>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	60fb      	str	r3, [r7, #12]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <vPortFree+0x62>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	60bb      	str	r3, [r7, #8]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <vPortFree+0xb8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01e      	beq.n	8005f6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11a      	bne.n	8005f6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <vPortFree+0xb8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	401a      	ands	r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f48:	f7fe fbd2 	bl	80046f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <vPortFree+0xbc>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4413      	add	r3, r2
 8005f56:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <vPortFree+0xbc>)
 8005f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f5a:	6938      	ldr	r0, [r7, #16]
 8005f5c:	f000 f874 	bl	8006048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <vPortFree+0xc0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3301      	adds	r3, #1
 8005f66:	4a06      	ldr	r2, [pc, #24]	; (8005f80 <vPortFree+0xc0>)
 8005f68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f6a:	f7fe fbcf 	bl	800470c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f6e:	bf00      	nop
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20004b3c 	.word	0x20004b3c
 8005f7c:	20004b2c 	.word	0x20004b2c
 8005f80:	20004b38 	.word	0x20004b38

08005f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f90:	4b27      	ldr	r3, [pc, #156]	; (8006030 <prvHeapInit+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3307      	adds	r3, #7
 8005fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0307 	bic.w	r3, r3, #7
 8005faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <prvHeapInit+0xac>)
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fbc:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <prvHeapInit+0xb0>)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <prvHeapInit+0xb0>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	4413      	add	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0307 	bic.w	r3, r3, #7
 8005fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a15      	ldr	r2, [pc, #84]	; (8006038 <prvHeapInit+0xb4>)
 8005fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <prvHeapInit+0xb4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2200      	movs	r2, #0
 8005fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fee:	4b12      	ldr	r3, [pc, #72]	; (8006038 <prvHeapInit+0xb4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	1ad2      	subs	r2, r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvHeapInit+0xb4>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	4a0a      	ldr	r2, [pc, #40]	; (800603c <prvHeapInit+0xb8>)
 8006012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <prvHeapInit+0xbc>)
 800601a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <prvHeapInit+0xc0>)
 800601e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	20000f20 	.word	0x20000f20
 8006034:	20004b20 	.word	0x20004b20
 8006038:	20004b28 	.word	0x20004b28
 800603c:	20004b30 	.word	0x20004b30
 8006040:	20004b2c 	.word	0x20004b2c
 8006044:	20004b3c 	.word	0x20004b3c

08006048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006050:	4b28      	ldr	r3, [pc, #160]	; (80060f4 <prvInsertBlockIntoFreeList+0xac>)
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e002      	b.n	800605c <prvInsertBlockIntoFreeList+0x14>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d8f7      	bhi.n	8006056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	4413      	add	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d108      	bne.n	800608a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	441a      	add	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d118      	bne.n	80060d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <prvInsertBlockIntoFreeList+0xb0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d00d      	beq.n	80060c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	441a      	add	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e008      	b.n	80060d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <prvInsertBlockIntoFreeList+0xb0>)
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e003      	b.n	80060d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d002      	beq.n	80060e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	20004b20 	.word	0x20004b20
 80060f8:	20004b28 	.word	0x20004b28

080060fc <__errno>:
 80060fc:	4b01      	ldr	r3, [pc, #4]	; (8006104 <__errno+0x8>)
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	2000001c 	.word	0x2000001c

08006108 <std>:
 8006108:	2300      	movs	r3, #0
 800610a:	b510      	push	{r4, lr}
 800610c:	4604      	mov	r4, r0
 800610e:	e9c0 3300 	strd	r3, r3, [r0]
 8006112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006116:	6083      	str	r3, [r0, #8]
 8006118:	8181      	strh	r1, [r0, #12]
 800611a:	6643      	str	r3, [r0, #100]	; 0x64
 800611c:	81c2      	strh	r2, [r0, #14]
 800611e:	6183      	str	r3, [r0, #24]
 8006120:	4619      	mov	r1, r3
 8006122:	2208      	movs	r2, #8
 8006124:	305c      	adds	r0, #92	; 0x5c
 8006126:	f000 f91a 	bl	800635e <memset>
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <std+0x38>)
 800612c:	6263      	str	r3, [r4, #36]	; 0x24
 800612e:	4b05      	ldr	r3, [pc, #20]	; (8006144 <std+0x3c>)
 8006130:	62a3      	str	r3, [r4, #40]	; 0x28
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <std+0x40>)
 8006134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <std+0x44>)
 8006138:	6224      	str	r4, [r4, #32]
 800613a:	6323      	str	r3, [r4, #48]	; 0x30
 800613c:	bd10      	pop	{r4, pc}
 800613e:	bf00      	nop
 8006140:	08006649 	.word	0x08006649
 8006144:	0800666b 	.word	0x0800666b
 8006148:	080066a3 	.word	0x080066a3
 800614c:	080066c7 	.word	0x080066c7

08006150 <_cleanup_r>:
 8006150:	4901      	ldr	r1, [pc, #4]	; (8006158 <_cleanup_r+0x8>)
 8006152:	f000 b8af 	b.w	80062b4 <_fwalk_reent>
 8006156:	bf00      	nop
 8006158:	0800685d 	.word	0x0800685d

0800615c <__sfmoreglue>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	2268      	movs	r2, #104	; 0x68
 8006160:	1e4d      	subs	r5, r1, #1
 8006162:	4355      	muls	r5, r2
 8006164:	460e      	mov	r6, r1
 8006166:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800616a:	f000 f921 	bl	80063b0 <_malloc_r>
 800616e:	4604      	mov	r4, r0
 8006170:	b140      	cbz	r0, 8006184 <__sfmoreglue+0x28>
 8006172:	2100      	movs	r1, #0
 8006174:	e9c0 1600 	strd	r1, r6, [r0]
 8006178:	300c      	adds	r0, #12
 800617a:	60a0      	str	r0, [r4, #8]
 800617c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006180:	f000 f8ed 	bl	800635e <memset>
 8006184:	4620      	mov	r0, r4
 8006186:	bd70      	pop	{r4, r5, r6, pc}

08006188 <__sfp_lock_acquire>:
 8006188:	4801      	ldr	r0, [pc, #4]	; (8006190 <__sfp_lock_acquire+0x8>)
 800618a:	f000 b8d8 	b.w	800633e <__retarget_lock_acquire_recursive>
 800618e:	bf00      	nop
 8006190:	20004b41 	.word	0x20004b41

08006194 <__sfp_lock_release>:
 8006194:	4801      	ldr	r0, [pc, #4]	; (800619c <__sfp_lock_release+0x8>)
 8006196:	f000 b8d3 	b.w	8006340 <__retarget_lock_release_recursive>
 800619a:	bf00      	nop
 800619c:	20004b41 	.word	0x20004b41

080061a0 <__sinit_lock_acquire>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__sinit_lock_acquire+0x8>)
 80061a2:	f000 b8cc 	b.w	800633e <__retarget_lock_acquire_recursive>
 80061a6:	bf00      	nop
 80061a8:	20004b42 	.word	0x20004b42

080061ac <__sinit_lock_release>:
 80061ac:	4801      	ldr	r0, [pc, #4]	; (80061b4 <__sinit_lock_release+0x8>)
 80061ae:	f000 b8c7 	b.w	8006340 <__retarget_lock_release_recursive>
 80061b2:	bf00      	nop
 80061b4:	20004b42 	.word	0x20004b42

080061b8 <__sinit>:
 80061b8:	b510      	push	{r4, lr}
 80061ba:	4604      	mov	r4, r0
 80061bc:	f7ff fff0 	bl	80061a0 <__sinit_lock_acquire>
 80061c0:	69a3      	ldr	r3, [r4, #24]
 80061c2:	b11b      	cbz	r3, 80061cc <__sinit+0x14>
 80061c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c8:	f7ff bff0 	b.w	80061ac <__sinit_lock_release>
 80061cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061d0:	6523      	str	r3, [r4, #80]	; 0x50
 80061d2:	4b13      	ldr	r3, [pc, #76]	; (8006220 <__sinit+0x68>)
 80061d4:	4a13      	ldr	r2, [pc, #76]	; (8006224 <__sinit+0x6c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80061da:	42a3      	cmp	r3, r4
 80061dc:	bf04      	itt	eq
 80061de:	2301      	moveq	r3, #1
 80061e0:	61a3      	streq	r3, [r4, #24]
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 f820 	bl	8006228 <__sfp>
 80061e8:	6060      	str	r0, [r4, #4]
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 f81c 	bl	8006228 <__sfp>
 80061f0:	60a0      	str	r0, [r4, #8]
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 f818 	bl	8006228 <__sfp>
 80061f8:	2200      	movs	r2, #0
 80061fa:	60e0      	str	r0, [r4, #12]
 80061fc:	2104      	movs	r1, #4
 80061fe:	6860      	ldr	r0, [r4, #4]
 8006200:	f7ff ff82 	bl	8006108 <std>
 8006204:	68a0      	ldr	r0, [r4, #8]
 8006206:	2201      	movs	r2, #1
 8006208:	2109      	movs	r1, #9
 800620a:	f7ff ff7d 	bl	8006108 <std>
 800620e:	68e0      	ldr	r0, [r4, #12]
 8006210:	2202      	movs	r2, #2
 8006212:	2112      	movs	r1, #18
 8006214:	f7ff ff78 	bl	8006108 <std>
 8006218:	2301      	movs	r3, #1
 800621a:	61a3      	str	r3, [r4, #24]
 800621c:	e7d2      	b.n	80061c4 <__sinit+0xc>
 800621e:	bf00      	nop
 8006220:	08007750 	.word	0x08007750
 8006224:	08006151 	.word	0x08006151

08006228 <__sfp>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	4607      	mov	r7, r0
 800622c:	f7ff ffac 	bl	8006188 <__sfp_lock_acquire>
 8006230:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <__sfp+0x84>)
 8006232:	681e      	ldr	r6, [r3, #0]
 8006234:	69b3      	ldr	r3, [r6, #24]
 8006236:	b913      	cbnz	r3, 800623e <__sfp+0x16>
 8006238:	4630      	mov	r0, r6
 800623a:	f7ff ffbd 	bl	80061b8 <__sinit>
 800623e:	3648      	adds	r6, #72	; 0x48
 8006240:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006244:	3b01      	subs	r3, #1
 8006246:	d503      	bpl.n	8006250 <__sfp+0x28>
 8006248:	6833      	ldr	r3, [r6, #0]
 800624a:	b30b      	cbz	r3, 8006290 <__sfp+0x68>
 800624c:	6836      	ldr	r6, [r6, #0]
 800624e:	e7f7      	b.n	8006240 <__sfp+0x18>
 8006250:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006254:	b9d5      	cbnz	r5, 800628c <__sfp+0x64>
 8006256:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <__sfp+0x88>)
 8006258:	60e3      	str	r3, [r4, #12]
 800625a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800625e:	6665      	str	r5, [r4, #100]	; 0x64
 8006260:	f000 f86c 	bl	800633c <__retarget_lock_init_recursive>
 8006264:	f7ff ff96 	bl	8006194 <__sfp_lock_release>
 8006268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800626c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006270:	6025      	str	r5, [r4, #0]
 8006272:	61a5      	str	r5, [r4, #24]
 8006274:	2208      	movs	r2, #8
 8006276:	4629      	mov	r1, r5
 8006278:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800627c:	f000 f86f 	bl	800635e <memset>
 8006280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006288:	4620      	mov	r0, r4
 800628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800628c:	3468      	adds	r4, #104	; 0x68
 800628e:	e7d9      	b.n	8006244 <__sfp+0x1c>
 8006290:	2104      	movs	r1, #4
 8006292:	4638      	mov	r0, r7
 8006294:	f7ff ff62 	bl	800615c <__sfmoreglue>
 8006298:	4604      	mov	r4, r0
 800629a:	6030      	str	r0, [r6, #0]
 800629c:	2800      	cmp	r0, #0
 800629e:	d1d5      	bne.n	800624c <__sfp+0x24>
 80062a0:	f7ff ff78 	bl	8006194 <__sfp_lock_release>
 80062a4:	230c      	movs	r3, #12
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	e7ee      	b.n	8006288 <__sfp+0x60>
 80062aa:	bf00      	nop
 80062ac:	08007750 	.word	0x08007750
 80062b0:	ffff0001 	.word	0xffff0001

080062b4 <_fwalk_reent>:
 80062b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b8:	4606      	mov	r6, r0
 80062ba:	4688      	mov	r8, r1
 80062bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062c0:	2700      	movs	r7, #0
 80062c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062c6:	f1b9 0901 	subs.w	r9, r9, #1
 80062ca:	d505      	bpl.n	80062d8 <_fwalk_reent+0x24>
 80062cc:	6824      	ldr	r4, [r4, #0]
 80062ce:	2c00      	cmp	r4, #0
 80062d0:	d1f7      	bne.n	80062c2 <_fwalk_reent+0xe>
 80062d2:	4638      	mov	r0, r7
 80062d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d8:	89ab      	ldrh	r3, [r5, #12]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d907      	bls.n	80062ee <_fwalk_reent+0x3a>
 80062de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062e2:	3301      	adds	r3, #1
 80062e4:	d003      	beq.n	80062ee <_fwalk_reent+0x3a>
 80062e6:	4629      	mov	r1, r5
 80062e8:	4630      	mov	r0, r6
 80062ea:	47c0      	blx	r8
 80062ec:	4307      	orrs	r7, r0
 80062ee:	3568      	adds	r5, #104	; 0x68
 80062f0:	e7e9      	b.n	80062c6 <_fwalk_reent+0x12>
	...

080062f4 <__libc_init_array>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	4d0d      	ldr	r5, [pc, #52]	; (800632c <__libc_init_array+0x38>)
 80062f8:	4c0d      	ldr	r4, [pc, #52]	; (8006330 <__libc_init_array+0x3c>)
 80062fa:	1b64      	subs	r4, r4, r5
 80062fc:	10a4      	asrs	r4, r4, #2
 80062fe:	2600      	movs	r6, #0
 8006300:	42a6      	cmp	r6, r4
 8006302:	d109      	bne.n	8006318 <__libc_init_array+0x24>
 8006304:	4d0b      	ldr	r5, [pc, #44]	; (8006334 <__libc_init_array+0x40>)
 8006306:	4c0c      	ldr	r4, [pc, #48]	; (8006338 <__libc_init_array+0x44>)
 8006308:	f001 f9a8 	bl	800765c <_init>
 800630c:	1b64      	subs	r4, r4, r5
 800630e:	10a4      	asrs	r4, r4, #2
 8006310:	2600      	movs	r6, #0
 8006312:	42a6      	cmp	r6, r4
 8006314:	d105      	bne.n	8006322 <__libc_init_array+0x2e>
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	f855 3b04 	ldr.w	r3, [r5], #4
 800631c:	4798      	blx	r3
 800631e:	3601      	adds	r6, #1
 8006320:	e7ee      	b.n	8006300 <__libc_init_array+0xc>
 8006322:	f855 3b04 	ldr.w	r3, [r5], #4
 8006326:	4798      	blx	r3
 8006328:	3601      	adds	r6, #1
 800632a:	e7f2      	b.n	8006312 <__libc_init_array+0x1e>
 800632c:	08007840 	.word	0x08007840
 8006330:	08007840 	.word	0x08007840
 8006334:	08007840 	.word	0x08007840
 8006338:	08007844 	.word	0x08007844

0800633c <__retarget_lock_init_recursive>:
 800633c:	4770      	bx	lr

0800633e <__retarget_lock_acquire_recursive>:
 800633e:	4770      	bx	lr

08006340 <__retarget_lock_release_recursive>:
 8006340:	4770      	bx	lr

08006342 <memcpy>:
 8006342:	440a      	add	r2, r1
 8006344:	4291      	cmp	r1, r2
 8006346:	f100 33ff 	add.w	r3, r0, #4294967295
 800634a:	d100      	bne.n	800634e <memcpy+0xc>
 800634c:	4770      	bx	lr
 800634e:	b510      	push	{r4, lr}
 8006350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006358:	4291      	cmp	r1, r2
 800635a:	d1f9      	bne.n	8006350 <memcpy+0xe>
 800635c:	bd10      	pop	{r4, pc}

0800635e <memset>:
 800635e:	4402      	add	r2, r0
 8006360:	4603      	mov	r3, r0
 8006362:	4293      	cmp	r3, r2
 8006364:	d100      	bne.n	8006368 <memset+0xa>
 8006366:	4770      	bx	lr
 8006368:	f803 1b01 	strb.w	r1, [r3], #1
 800636c:	e7f9      	b.n	8006362 <memset+0x4>
	...

08006370 <sbrk_aligned>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4e0e      	ldr	r6, [pc, #56]	; (80063ac <sbrk_aligned+0x3c>)
 8006374:	460c      	mov	r4, r1
 8006376:	6831      	ldr	r1, [r6, #0]
 8006378:	4605      	mov	r5, r0
 800637a:	b911      	cbnz	r1, 8006382 <sbrk_aligned+0x12>
 800637c:	f000 f934 	bl	80065e8 <_sbrk_r>
 8006380:	6030      	str	r0, [r6, #0]
 8006382:	4621      	mov	r1, r4
 8006384:	4628      	mov	r0, r5
 8006386:	f000 f92f 	bl	80065e8 <_sbrk_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d00a      	beq.n	80063a4 <sbrk_aligned+0x34>
 800638e:	1cc4      	adds	r4, r0, #3
 8006390:	f024 0403 	bic.w	r4, r4, #3
 8006394:	42a0      	cmp	r0, r4
 8006396:	d007      	beq.n	80063a8 <sbrk_aligned+0x38>
 8006398:	1a21      	subs	r1, r4, r0
 800639a:	4628      	mov	r0, r5
 800639c:	f000 f924 	bl	80065e8 <_sbrk_r>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d101      	bne.n	80063a8 <sbrk_aligned+0x38>
 80063a4:	f04f 34ff 	mov.w	r4, #4294967295
 80063a8:	4620      	mov	r0, r4
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	20004b48 	.word	0x20004b48

080063b0 <_malloc_r>:
 80063b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b4:	1ccd      	adds	r5, r1, #3
 80063b6:	f025 0503 	bic.w	r5, r5, #3
 80063ba:	3508      	adds	r5, #8
 80063bc:	2d0c      	cmp	r5, #12
 80063be:	bf38      	it	cc
 80063c0:	250c      	movcc	r5, #12
 80063c2:	2d00      	cmp	r5, #0
 80063c4:	4607      	mov	r7, r0
 80063c6:	db01      	blt.n	80063cc <_malloc_r+0x1c>
 80063c8:	42a9      	cmp	r1, r5
 80063ca:	d905      	bls.n	80063d8 <_malloc_r+0x28>
 80063cc:	230c      	movs	r3, #12
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	2600      	movs	r6, #0
 80063d2:	4630      	mov	r0, r6
 80063d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d8:	4e2e      	ldr	r6, [pc, #184]	; (8006494 <_malloc_r+0xe4>)
 80063da:	f000 faa7 	bl	800692c <__malloc_lock>
 80063de:	6833      	ldr	r3, [r6, #0]
 80063e0:	461c      	mov	r4, r3
 80063e2:	bb34      	cbnz	r4, 8006432 <_malloc_r+0x82>
 80063e4:	4629      	mov	r1, r5
 80063e6:	4638      	mov	r0, r7
 80063e8:	f7ff ffc2 	bl	8006370 <sbrk_aligned>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	4604      	mov	r4, r0
 80063f0:	d14d      	bne.n	800648e <_malloc_r+0xde>
 80063f2:	6834      	ldr	r4, [r6, #0]
 80063f4:	4626      	mov	r6, r4
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	d140      	bne.n	800647c <_malloc_r+0xcc>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	4631      	mov	r1, r6
 80063fe:	4638      	mov	r0, r7
 8006400:	eb04 0803 	add.w	r8, r4, r3
 8006404:	f000 f8f0 	bl	80065e8 <_sbrk_r>
 8006408:	4580      	cmp	r8, r0
 800640a:	d13a      	bne.n	8006482 <_malloc_r+0xd2>
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	3503      	adds	r5, #3
 8006410:	1a6d      	subs	r5, r5, r1
 8006412:	f025 0503 	bic.w	r5, r5, #3
 8006416:	3508      	adds	r5, #8
 8006418:	2d0c      	cmp	r5, #12
 800641a:	bf38      	it	cc
 800641c:	250c      	movcc	r5, #12
 800641e:	4629      	mov	r1, r5
 8006420:	4638      	mov	r0, r7
 8006422:	f7ff ffa5 	bl	8006370 <sbrk_aligned>
 8006426:	3001      	adds	r0, #1
 8006428:	d02b      	beq.n	8006482 <_malloc_r+0xd2>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	442b      	add	r3, r5
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	e00e      	b.n	8006450 <_malloc_r+0xa0>
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	1b52      	subs	r2, r2, r5
 8006436:	d41e      	bmi.n	8006476 <_malloc_r+0xc6>
 8006438:	2a0b      	cmp	r2, #11
 800643a:	d916      	bls.n	800646a <_malloc_r+0xba>
 800643c:	1961      	adds	r1, r4, r5
 800643e:	42a3      	cmp	r3, r4
 8006440:	6025      	str	r5, [r4, #0]
 8006442:	bf18      	it	ne
 8006444:	6059      	strne	r1, [r3, #4]
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	bf08      	it	eq
 800644a:	6031      	streq	r1, [r6, #0]
 800644c:	5162      	str	r2, [r4, r5]
 800644e:	604b      	str	r3, [r1, #4]
 8006450:	4638      	mov	r0, r7
 8006452:	f104 060b 	add.w	r6, r4, #11
 8006456:	f000 fa6f 	bl	8006938 <__malloc_unlock>
 800645a:	f026 0607 	bic.w	r6, r6, #7
 800645e:	1d23      	adds	r3, r4, #4
 8006460:	1af2      	subs	r2, r6, r3
 8006462:	d0b6      	beq.n	80063d2 <_malloc_r+0x22>
 8006464:	1b9b      	subs	r3, r3, r6
 8006466:	50a3      	str	r3, [r4, r2]
 8006468:	e7b3      	b.n	80063d2 <_malloc_r+0x22>
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	42a3      	cmp	r3, r4
 800646e:	bf0c      	ite	eq
 8006470:	6032      	streq	r2, [r6, #0]
 8006472:	605a      	strne	r2, [r3, #4]
 8006474:	e7ec      	b.n	8006450 <_malloc_r+0xa0>
 8006476:	4623      	mov	r3, r4
 8006478:	6864      	ldr	r4, [r4, #4]
 800647a:	e7b2      	b.n	80063e2 <_malloc_r+0x32>
 800647c:	4634      	mov	r4, r6
 800647e:	6876      	ldr	r6, [r6, #4]
 8006480:	e7b9      	b.n	80063f6 <_malloc_r+0x46>
 8006482:	230c      	movs	r3, #12
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	4638      	mov	r0, r7
 8006488:	f000 fa56 	bl	8006938 <__malloc_unlock>
 800648c:	e7a1      	b.n	80063d2 <_malloc_r+0x22>
 800648e:	6025      	str	r5, [r4, #0]
 8006490:	e7de      	b.n	8006450 <_malloc_r+0xa0>
 8006492:	bf00      	nop
 8006494:	20004b44 	.word	0x20004b44

08006498 <rand>:
 8006498:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <rand+0x5c>)
 800649a:	b510      	push	{r4, lr}
 800649c:	681c      	ldr	r4, [r3, #0]
 800649e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064a0:	b9b3      	cbnz	r3, 80064d0 <rand+0x38>
 80064a2:	2018      	movs	r0, #24
 80064a4:	f000 fa3a 	bl	800691c <malloc>
 80064a8:	63a0      	str	r0, [r4, #56]	; 0x38
 80064aa:	b928      	cbnz	r0, 80064b8 <rand+0x20>
 80064ac:	4602      	mov	r2, r0
 80064ae:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <rand+0x60>)
 80064b0:	4812      	ldr	r0, [pc, #72]	; (80064fc <rand+0x64>)
 80064b2:	214e      	movs	r1, #78	; 0x4e
 80064b4:	f000 f91e 	bl	80066f4 <__assert_func>
 80064b8:	4a11      	ldr	r2, [pc, #68]	; (8006500 <rand+0x68>)
 80064ba:	4b12      	ldr	r3, [pc, #72]	; (8006504 <rand+0x6c>)
 80064bc:	e9c0 2300 	strd	r2, r3, [r0]
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <rand+0x70>)
 80064c2:	6083      	str	r3, [r0, #8]
 80064c4:	230b      	movs	r3, #11
 80064c6:	8183      	strh	r3, [r0, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	2300      	movs	r3, #0
 80064cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80064d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80064d2:	4a0e      	ldr	r2, [pc, #56]	; (800650c <rand+0x74>)
 80064d4:	6920      	ldr	r0, [r4, #16]
 80064d6:	6963      	ldr	r3, [r4, #20]
 80064d8:	490d      	ldr	r1, [pc, #52]	; (8006510 <rand+0x78>)
 80064da:	4342      	muls	r2, r0
 80064dc:	fb01 2203 	mla	r2, r1, r3, r2
 80064e0:	fba0 0101 	umull	r0, r1, r0, r1
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	eb42 0001 	adc.w	r0, r2, r1
 80064ea:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80064ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80064f2:	bd10      	pop	{r4, pc}
 80064f4:	2000001c 	.word	0x2000001c
 80064f8:	08007754 	.word	0x08007754
 80064fc:	0800776b 	.word	0x0800776b
 8006500:	abcd330e 	.word	0xabcd330e
 8006504:	e66d1234 	.word	0xe66d1234
 8006508:	0005deec 	.word	0x0005deec
 800650c:	5851f42d 	.word	0x5851f42d
 8006510:	4c957f2d 	.word	0x4c957f2d

08006514 <cleanup_glue>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	460c      	mov	r4, r1
 8006518:	6809      	ldr	r1, [r1, #0]
 800651a:	4605      	mov	r5, r0
 800651c:	b109      	cbz	r1, 8006522 <cleanup_glue+0xe>
 800651e:	f7ff fff9 	bl	8006514 <cleanup_glue>
 8006522:	4621      	mov	r1, r4
 8006524:	4628      	mov	r0, r5
 8006526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800652a:	f000 ba0b 	b.w	8006944 <_free_r>
	...

08006530 <_reclaim_reent>:
 8006530:	4b2c      	ldr	r3, [pc, #176]	; (80065e4 <_reclaim_reent+0xb4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4283      	cmp	r3, r0
 8006536:	b570      	push	{r4, r5, r6, lr}
 8006538:	4604      	mov	r4, r0
 800653a:	d051      	beq.n	80065e0 <_reclaim_reent+0xb0>
 800653c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800653e:	b143      	cbz	r3, 8006552 <_reclaim_reent+0x22>
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d14a      	bne.n	80065dc <_reclaim_reent+0xac>
 8006546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	b111      	cbz	r1, 8006552 <_reclaim_reent+0x22>
 800654c:	4620      	mov	r0, r4
 800654e:	f000 f9f9 	bl	8006944 <_free_r>
 8006552:	6961      	ldr	r1, [r4, #20]
 8006554:	b111      	cbz	r1, 800655c <_reclaim_reent+0x2c>
 8006556:	4620      	mov	r0, r4
 8006558:	f000 f9f4 	bl	8006944 <_free_r>
 800655c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800655e:	b111      	cbz	r1, 8006566 <_reclaim_reent+0x36>
 8006560:	4620      	mov	r0, r4
 8006562:	f000 f9ef 	bl	8006944 <_free_r>
 8006566:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006568:	b111      	cbz	r1, 8006570 <_reclaim_reent+0x40>
 800656a:	4620      	mov	r0, r4
 800656c:	f000 f9ea 	bl	8006944 <_free_r>
 8006570:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006572:	b111      	cbz	r1, 800657a <_reclaim_reent+0x4a>
 8006574:	4620      	mov	r0, r4
 8006576:	f000 f9e5 	bl	8006944 <_free_r>
 800657a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800657c:	b111      	cbz	r1, 8006584 <_reclaim_reent+0x54>
 800657e:	4620      	mov	r0, r4
 8006580:	f000 f9e0 	bl	8006944 <_free_r>
 8006584:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006586:	b111      	cbz	r1, 800658e <_reclaim_reent+0x5e>
 8006588:	4620      	mov	r0, r4
 800658a:	f000 f9db 	bl	8006944 <_free_r>
 800658e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006590:	b111      	cbz	r1, 8006598 <_reclaim_reent+0x68>
 8006592:	4620      	mov	r0, r4
 8006594:	f000 f9d6 	bl	8006944 <_free_r>
 8006598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800659a:	b111      	cbz	r1, 80065a2 <_reclaim_reent+0x72>
 800659c:	4620      	mov	r0, r4
 800659e:	f000 f9d1 	bl	8006944 <_free_r>
 80065a2:	69a3      	ldr	r3, [r4, #24]
 80065a4:	b1e3      	cbz	r3, 80065e0 <_reclaim_reent+0xb0>
 80065a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065a8:	4620      	mov	r0, r4
 80065aa:	4798      	blx	r3
 80065ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065ae:	b1b9      	cbz	r1, 80065e0 <_reclaim_reent+0xb0>
 80065b0:	4620      	mov	r0, r4
 80065b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065b6:	f7ff bfad 	b.w	8006514 <cleanup_glue>
 80065ba:	5949      	ldr	r1, [r1, r5]
 80065bc:	b941      	cbnz	r1, 80065d0 <_reclaim_reent+0xa0>
 80065be:	3504      	adds	r5, #4
 80065c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c2:	2d80      	cmp	r5, #128	; 0x80
 80065c4:	68d9      	ldr	r1, [r3, #12]
 80065c6:	d1f8      	bne.n	80065ba <_reclaim_reent+0x8a>
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 f9bb 	bl	8006944 <_free_r>
 80065ce:	e7ba      	b.n	8006546 <_reclaim_reent+0x16>
 80065d0:	680e      	ldr	r6, [r1, #0]
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 f9b6 	bl	8006944 <_free_r>
 80065d8:	4631      	mov	r1, r6
 80065da:	e7ef      	b.n	80065bc <_reclaim_reent+0x8c>
 80065dc:	2500      	movs	r5, #0
 80065de:	e7ef      	b.n	80065c0 <_reclaim_reent+0x90>
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	bf00      	nop
 80065e4:	2000001c 	.word	0x2000001c

080065e8 <_sbrk_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d06      	ldr	r5, [pc, #24]	; (8006604 <_sbrk_r+0x1c>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	602b      	str	r3, [r5, #0]
 80065f4:	f7fa fb5a 	bl	8000cac <_sbrk>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_sbrk_r+0x1a>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_sbrk_r+0x1a>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	20004b4c 	.word	0x20004b4c

08006608 <siprintf>:
 8006608:	b40e      	push	{r1, r2, r3}
 800660a:	b500      	push	{lr}
 800660c:	b09c      	sub	sp, #112	; 0x70
 800660e:	ab1d      	add	r3, sp, #116	; 0x74
 8006610:	9002      	str	r0, [sp, #8]
 8006612:	9006      	str	r0, [sp, #24]
 8006614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006618:	4809      	ldr	r0, [pc, #36]	; (8006640 <siprintf+0x38>)
 800661a:	9107      	str	r1, [sp, #28]
 800661c:	9104      	str	r1, [sp, #16]
 800661e:	4909      	ldr	r1, [pc, #36]	; (8006644 <siprintf+0x3c>)
 8006620:	f853 2b04 	ldr.w	r2, [r3], #4
 8006624:	9105      	str	r1, [sp, #20]
 8006626:	6800      	ldr	r0, [r0, #0]
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	a902      	add	r1, sp, #8
 800662c:	f000 fa32 	bl	8006a94 <_svfiprintf_r>
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	b01c      	add	sp, #112	; 0x70
 8006638:	f85d eb04 	ldr.w	lr, [sp], #4
 800663c:	b003      	add	sp, #12
 800663e:	4770      	bx	lr
 8006640:	2000001c 	.word	0x2000001c
 8006644:	ffff0208 	.word	0xffff0208

08006648 <__sread>:
 8006648:	b510      	push	{r4, lr}
 800664a:	460c      	mov	r4, r1
 800664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006650:	f000 fe0e 	bl	8007270 <_read_r>
 8006654:	2800      	cmp	r0, #0
 8006656:	bfab      	itete	ge
 8006658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800665a:	89a3      	ldrhlt	r3, [r4, #12]
 800665c:	181b      	addge	r3, r3, r0
 800665e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006662:	bfac      	ite	ge
 8006664:	6563      	strge	r3, [r4, #84]	; 0x54
 8006666:	81a3      	strhlt	r3, [r4, #12]
 8006668:	bd10      	pop	{r4, pc}

0800666a <__swrite>:
 800666a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666e:	461f      	mov	r7, r3
 8006670:	898b      	ldrh	r3, [r1, #12]
 8006672:	05db      	lsls	r3, r3, #23
 8006674:	4605      	mov	r5, r0
 8006676:	460c      	mov	r4, r1
 8006678:	4616      	mov	r6, r2
 800667a:	d505      	bpl.n	8006688 <__swrite+0x1e>
 800667c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006680:	2302      	movs	r3, #2
 8006682:	2200      	movs	r2, #0
 8006684:	f000 f938 	bl	80068f8 <_lseek_r>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800668e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	4632      	mov	r2, r6
 8006696:	463b      	mov	r3, r7
 8006698:	4628      	mov	r0, r5
 800669a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800669e:	f000 b817 	b.w	80066d0 <_write_r>

080066a2 <__sseek>:
 80066a2:	b510      	push	{r4, lr}
 80066a4:	460c      	mov	r4, r1
 80066a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066aa:	f000 f925 	bl	80068f8 <_lseek_r>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	bf15      	itete	ne
 80066b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066be:	81a3      	strheq	r3, [r4, #12]
 80066c0:	bf18      	it	ne
 80066c2:	81a3      	strhne	r3, [r4, #12]
 80066c4:	bd10      	pop	{r4, pc}

080066c6 <__sclose>:
 80066c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ca:	f000 b831 	b.w	8006730 <_close_r>
	...

080066d0 <_write_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d07      	ldr	r5, [pc, #28]	; (80066f0 <_write_r+0x20>)
 80066d4:	4604      	mov	r4, r0
 80066d6:	4608      	mov	r0, r1
 80066d8:	4611      	mov	r1, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	602a      	str	r2, [r5, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f7fa fa93 	bl	8000c0a <_write>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_write_r+0x1e>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_write_r+0x1e>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20004b4c 	.word	0x20004b4c

080066f4 <__assert_func>:
 80066f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066f6:	4614      	mov	r4, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <__assert_func+0x2c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4605      	mov	r5, r0
 8006700:	68d8      	ldr	r0, [r3, #12]
 8006702:	b14c      	cbz	r4, 8006718 <__assert_func+0x24>
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <__assert_func+0x30>)
 8006706:	9100      	str	r1, [sp, #0]
 8006708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800670c:	4906      	ldr	r1, [pc, #24]	; (8006728 <__assert_func+0x34>)
 800670e:	462b      	mov	r3, r5
 8006710:	f000 f8e0 	bl	80068d4 <fiprintf>
 8006714:	f000 fe7e 	bl	8007414 <abort>
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <__assert_func+0x38>)
 800671a:	461c      	mov	r4, r3
 800671c:	e7f3      	b.n	8006706 <__assert_func+0x12>
 800671e:	bf00      	nop
 8006720:	2000001c 	.word	0x2000001c
 8006724:	080077c6 	.word	0x080077c6
 8006728:	080077d3 	.word	0x080077d3
 800672c:	08007801 	.word	0x08007801

08006730 <_close_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d06      	ldr	r5, [pc, #24]	; (800674c <_close_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f7fa fa81 	bl	8000c42 <_close>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_close_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_close_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20004b4c 	.word	0x20004b4c

08006750 <__sflush_r>:
 8006750:	898a      	ldrh	r2, [r1, #12]
 8006752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	4605      	mov	r5, r0
 8006758:	0710      	lsls	r0, r2, #28
 800675a:	460c      	mov	r4, r1
 800675c:	d458      	bmi.n	8006810 <__sflush_r+0xc0>
 800675e:	684b      	ldr	r3, [r1, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	dc05      	bgt.n	8006770 <__sflush_r+0x20>
 8006764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	dc02      	bgt.n	8006770 <__sflush_r+0x20>
 800676a:	2000      	movs	r0, #0
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006772:	2e00      	cmp	r6, #0
 8006774:	d0f9      	beq.n	800676a <__sflush_r+0x1a>
 8006776:	2300      	movs	r3, #0
 8006778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800677c:	682f      	ldr	r7, [r5, #0]
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	d032      	beq.n	80067e8 <__sflush_r+0x98>
 8006782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	075a      	lsls	r2, r3, #29
 8006788:	d505      	bpl.n	8006796 <__sflush_r+0x46>
 800678a:	6863      	ldr	r3, [r4, #4]
 800678c:	1ac0      	subs	r0, r0, r3
 800678e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006790:	b10b      	cbz	r3, 8006796 <__sflush_r+0x46>
 8006792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006794:	1ac0      	subs	r0, r0, r3
 8006796:	2300      	movs	r3, #0
 8006798:	4602      	mov	r2, r0
 800679a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679c:	6a21      	ldr	r1, [r4, #32]
 800679e:	4628      	mov	r0, r5
 80067a0:	47b0      	blx	r6
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	d106      	bne.n	80067b6 <__sflush_r+0x66>
 80067a8:	6829      	ldr	r1, [r5, #0]
 80067aa:	291d      	cmp	r1, #29
 80067ac:	d82c      	bhi.n	8006808 <__sflush_r+0xb8>
 80067ae:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <__sflush_r+0x108>)
 80067b0:	40ca      	lsrs	r2, r1
 80067b2:	07d6      	lsls	r6, r2, #31
 80067b4:	d528      	bpl.n	8006808 <__sflush_r+0xb8>
 80067b6:	2200      	movs	r2, #0
 80067b8:	6062      	str	r2, [r4, #4]
 80067ba:	04d9      	lsls	r1, r3, #19
 80067bc:	6922      	ldr	r2, [r4, #16]
 80067be:	6022      	str	r2, [r4, #0]
 80067c0:	d504      	bpl.n	80067cc <__sflush_r+0x7c>
 80067c2:	1c42      	adds	r2, r0, #1
 80067c4:	d101      	bne.n	80067ca <__sflush_r+0x7a>
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	b903      	cbnz	r3, 80067cc <__sflush_r+0x7c>
 80067ca:	6560      	str	r0, [r4, #84]	; 0x54
 80067cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ce:	602f      	str	r7, [r5, #0]
 80067d0:	2900      	cmp	r1, #0
 80067d2:	d0ca      	beq.n	800676a <__sflush_r+0x1a>
 80067d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d8:	4299      	cmp	r1, r3
 80067da:	d002      	beq.n	80067e2 <__sflush_r+0x92>
 80067dc:	4628      	mov	r0, r5
 80067de:	f000 f8b1 	bl	8006944 <_free_r>
 80067e2:	2000      	movs	r0, #0
 80067e4:	6360      	str	r0, [r4, #52]	; 0x34
 80067e6:	e7c1      	b.n	800676c <__sflush_r+0x1c>
 80067e8:	6a21      	ldr	r1, [r4, #32]
 80067ea:	2301      	movs	r3, #1
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b0      	blx	r6
 80067f0:	1c41      	adds	r1, r0, #1
 80067f2:	d1c7      	bne.n	8006784 <__sflush_r+0x34>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0c4      	beq.n	8006784 <__sflush_r+0x34>
 80067fa:	2b1d      	cmp	r3, #29
 80067fc:	d001      	beq.n	8006802 <__sflush_r+0xb2>
 80067fe:	2b16      	cmp	r3, #22
 8006800:	d101      	bne.n	8006806 <__sflush_r+0xb6>
 8006802:	602f      	str	r7, [r5, #0]
 8006804:	e7b1      	b.n	800676a <__sflush_r+0x1a>
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	e7ad      	b.n	800676c <__sflush_r+0x1c>
 8006810:	690f      	ldr	r7, [r1, #16]
 8006812:	2f00      	cmp	r7, #0
 8006814:	d0a9      	beq.n	800676a <__sflush_r+0x1a>
 8006816:	0793      	lsls	r3, r2, #30
 8006818:	680e      	ldr	r6, [r1, #0]
 800681a:	bf08      	it	eq
 800681c:	694b      	ldreq	r3, [r1, #20]
 800681e:	600f      	str	r7, [r1, #0]
 8006820:	bf18      	it	ne
 8006822:	2300      	movne	r3, #0
 8006824:	eba6 0807 	sub.w	r8, r6, r7
 8006828:	608b      	str	r3, [r1, #8]
 800682a:	f1b8 0f00 	cmp.w	r8, #0
 800682e:	dd9c      	ble.n	800676a <__sflush_r+0x1a>
 8006830:	6a21      	ldr	r1, [r4, #32]
 8006832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006834:	4643      	mov	r3, r8
 8006836:	463a      	mov	r2, r7
 8006838:	4628      	mov	r0, r5
 800683a:	47b0      	blx	r6
 800683c:	2800      	cmp	r0, #0
 800683e:	dc06      	bgt.n	800684e <__sflush_r+0xfe>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e78e      	b.n	800676c <__sflush_r+0x1c>
 800684e:	4407      	add	r7, r0
 8006850:	eba8 0800 	sub.w	r8, r8, r0
 8006854:	e7e9      	b.n	800682a <__sflush_r+0xda>
 8006856:	bf00      	nop
 8006858:	20400001 	.word	0x20400001

0800685c <_fflush_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	690b      	ldr	r3, [r1, #16]
 8006860:	4605      	mov	r5, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b913      	cbnz	r3, 800686c <_fflush_r+0x10>
 8006866:	2500      	movs	r5, #0
 8006868:	4628      	mov	r0, r5
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	b118      	cbz	r0, 8006876 <_fflush_r+0x1a>
 800686e:	6983      	ldr	r3, [r0, #24]
 8006870:	b90b      	cbnz	r3, 8006876 <_fflush_r+0x1a>
 8006872:	f7ff fca1 	bl	80061b8 <__sinit>
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <_fflush_r+0x6c>)
 8006878:	429c      	cmp	r4, r3
 800687a:	d11b      	bne.n	80068b4 <_fflush_r+0x58>
 800687c:	686c      	ldr	r4, [r5, #4]
 800687e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0ef      	beq.n	8006866 <_fflush_r+0xa>
 8006886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006888:	07d0      	lsls	r0, r2, #31
 800688a:	d404      	bmi.n	8006896 <_fflush_r+0x3a>
 800688c:	0599      	lsls	r1, r3, #22
 800688e:	d402      	bmi.n	8006896 <_fflush_r+0x3a>
 8006890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006892:	f7ff fd54 	bl	800633e <__retarget_lock_acquire_recursive>
 8006896:	4628      	mov	r0, r5
 8006898:	4621      	mov	r1, r4
 800689a:	f7ff ff59 	bl	8006750 <__sflush_r>
 800689e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068a0:	07da      	lsls	r2, r3, #31
 80068a2:	4605      	mov	r5, r0
 80068a4:	d4e0      	bmi.n	8006868 <_fflush_r+0xc>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	059b      	lsls	r3, r3, #22
 80068aa:	d4dd      	bmi.n	8006868 <_fflush_r+0xc>
 80068ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ae:	f7ff fd47 	bl	8006340 <__retarget_lock_release_recursive>
 80068b2:	e7d9      	b.n	8006868 <_fflush_r+0xc>
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <_fflush_r+0x70>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d101      	bne.n	80068be <_fflush_r+0x62>
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	e7df      	b.n	800687e <_fflush_r+0x22>
 80068be:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <_fflush_r+0x74>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	bf08      	it	eq
 80068c4:	68ec      	ldreq	r4, [r5, #12]
 80068c6:	e7da      	b.n	800687e <_fflush_r+0x22>
 80068c8:	08007710 	.word	0x08007710
 80068cc:	08007730 	.word	0x08007730
 80068d0:	080076f0 	.word	0x080076f0

080068d4 <fiprintf>:
 80068d4:	b40e      	push	{r1, r2, r3}
 80068d6:	b503      	push	{r0, r1, lr}
 80068d8:	4601      	mov	r1, r0
 80068da:	ab03      	add	r3, sp, #12
 80068dc:	4805      	ldr	r0, [pc, #20]	; (80068f4 <fiprintf+0x20>)
 80068de:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e2:	6800      	ldr	r0, [r0, #0]
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	f000 f9ff 	bl	8006ce8 <_vfiprintf_r>
 80068ea:	b002      	add	sp, #8
 80068ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f0:	b003      	add	sp, #12
 80068f2:	4770      	bx	lr
 80068f4:	2000001c 	.word	0x2000001c

080068f8 <_lseek_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	; (8006918 <_lseek_r+0x20>)
 80068fc:	4604      	mov	r4, r0
 80068fe:	4608      	mov	r0, r1
 8006900:	4611      	mov	r1, r2
 8006902:	2200      	movs	r2, #0
 8006904:	602a      	str	r2, [r5, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f7fa f9c2 	bl	8000c90 <_lseek>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_lseek_r+0x1e>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_lseek_r+0x1e>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	20004b4c 	.word	0x20004b4c

0800691c <malloc>:
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <malloc+0xc>)
 800691e:	4601      	mov	r1, r0
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	f7ff bd45 	b.w	80063b0 <_malloc_r>
 8006926:	bf00      	nop
 8006928:	2000001c 	.word	0x2000001c

0800692c <__malloc_lock>:
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__malloc_lock+0x8>)
 800692e:	f7ff bd06 	b.w	800633e <__retarget_lock_acquire_recursive>
 8006932:	bf00      	nop
 8006934:	20004b40 	.word	0x20004b40

08006938 <__malloc_unlock>:
 8006938:	4801      	ldr	r0, [pc, #4]	; (8006940 <__malloc_unlock+0x8>)
 800693a:	f7ff bd01 	b.w	8006340 <__retarget_lock_release_recursive>
 800693e:	bf00      	nop
 8006940:	20004b40 	.word	0x20004b40

08006944 <_free_r>:
 8006944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006946:	2900      	cmp	r1, #0
 8006948:	d044      	beq.n	80069d4 <_free_r+0x90>
 800694a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800694e:	9001      	str	r0, [sp, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f1a1 0404 	sub.w	r4, r1, #4
 8006956:	bfb8      	it	lt
 8006958:	18e4      	addlt	r4, r4, r3
 800695a:	f7ff ffe7 	bl	800692c <__malloc_lock>
 800695e:	4a1e      	ldr	r2, [pc, #120]	; (80069d8 <_free_r+0x94>)
 8006960:	9801      	ldr	r0, [sp, #4]
 8006962:	6813      	ldr	r3, [r2, #0]
 8006964:	b933      	cbnz	r3, 8006974 <_free_r+0x30>
 8006966:	6063      	str	r3, [r4, #4]
 8006968:	6014      	str	r4, [r2, #0]
 800696a:	b003      	add	sp, #12
 800696c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006970:	f7ff bfe2 	b.w	8006938 <__malloc_unlock>
 8006974:	42a3      	cmp	r3, r4
 8006976:	d908      	bls.n	800698a <_free_r+0x46>
 8006978:	6825      	ldr	r5, [r4, #0]
 800697a:	1961      	adds	r1, r4, r5
 800697c:	428b      	cmp	r3, r1
 800697e:	bf01      	itttt	eq
 8006980:	6819      	ldreq	r1, [r3, #0]
 8006982:	685b      	ldreq	r3, [r3, #4]
 8006984:	1949      	addeq	r1, r1, r5
 8006986:	6021      	streq	r1, [r4, #0]
 8006988:	e7ed      	b.n	8006966 <_free_r+0x22>
 800698a:	461a      	mov	r2, r3
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	b10b      	cbz	r3, 8006994 <_free_r+0x50>
 8006990:	42a3      	cmp	r3, r4
 8006992:	d9fa      	bls.n	800698a <_free_r+0x46>
 8006994:	6811      	ldr	r1, [r2, #0]
 8006996:	1855      	adds	r5, r2, r1
 8006998:	42a5      	cmp	r5, r4
 800699a:	d10b      	bne.n	80069b4 <_free_r+0x70>
 800699c:	6824      	ldr	r4, [r4, #0]
 800699e:	4421      	add	r1, r4
 80069a0:	1854      	adds	r4, r2, r1
 80069a2:	42a3      	cmp	r3, r4
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	d1e0      	bne.n	800696a <_free_r+0x26>
 80069a8:	681c      	ldr	r4, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	6053      	str	r3, [r2, #4]
 80069ae:	4421      	add	r1, r4
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	e7da      	b.n	800696a <_free_r+0x26>
 80069b4:	d902      	bls.n	80069bc <_free_r+0x78>
 80069b6:	230c      	movs	r3, #12
 80069b8:	6003      	str	r3, [r0, #0]
 80069ba:	e7d6      	b.n	800696a <_free_r+0x26>
 80069bc:	6825      	ldr	r5, [r4, #0]
 80069be:	1961      	adds	r1, r4, r5
 80069c0:	428b      	cmp	r3, r1
 80069c2:	bf04      	itt	eq
 80069c4:	6819      	ldreq	r1, [r3, #0]
 80069c6:	685b      	ldreq	r3, [r3, #4]
 80069c8:	6063      	str	r3, [r4, #4]
 80069ca:	bf04      	itt	eq
 80069cc:	1949      	addeq	r1, r1, r5
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	6054      	str	r4, [r2, #4]
 80069d2:	e7ca      	b.n	800696a <_free_r+0x26>
 80069d4:	b003      	add	sp, #12
 80069d6:	bd30      	pop	{r4, r5, pc}
 80069d8:	20004b44 	.word	0x20004b44

080069dc <__ssputs_r>:
 80069dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	688e      	ldr	r6, [r1, #8]
 80069e2:	429e      	cmp	r6, r3
 80069e4:	4682      	mov	sl, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	4690      	mov	r8, r2
 80069ea:	461f      	mov	r7, r3
 80069ec:	d838      	bhi.n	8006a60 <__ssputs_r+0x84>
 80069ee:	898a      	ldrh	r2, [r1, #12]
 80069f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069f4:	d032      	beq.n	8006a5c <__ssputs_r+0x80>
 80069f6:	6825      	ldr	r5, [r4, #0]
 80069f8:	6909      	ldr	r1, [r1, #16]
 80069fa:	eba5 0901 	sub.w	r9, r5, r1
 80069fe:	6965      	ldr	r5, [r4, #20]
 8006a00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a08:	3301      	adds	r3, #1
 8006a0a:	444b      	add	r3, r9
 8006a0c:	106d      	asrs	r5, r5, #1
 8006a0e:	429d      	cmp	r5, r3
 8006a10:	bf38      	it	cc
 8006a12:	461d      	movcc	r5, r3
 8006a14:	0553      	lsls	r3, r2, #21
 8006a16:	d531      	bpl.n	8006a7c <__ssputs_r+0xa0>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	f7ff fcc9 	bl	80063b0 <_malloc_r>
 8006a1e:	4606      	mov	r6, r0
 8006a20:	b950      	cbnz	r0, 8006a38 <__ssputs_r+0x5c>
 8006a22:	230c      	movs	r3, #12
 8006a24:	f8ca 3000 	str.w	r3, [sl]
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a38:	6921      	ldr	r1, [r4, #16]
 8006a3a:	464a      	mov	r2, r9
 8006a3c:	f7ff fc81 	bl	8006342 <memcpy>
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4a:	81a3      	strh	r3, [r4, #12]
 8006a4c:	6126      	str	r6, [r4, #16]
 8006a4e:	6165      	str	r5, [r4, #20]
 8006a50:	444e      	add	r6, r9
 8006a52:	eba5 0509 	sub.w	r5, r5, r9
 8006a56:	6026      	str	r6, [r4, #0]
 8006a58:	60a5      	str	r5, [r4, #8]
 8006a5a:	463e      	mov	r6, r7
 8006a5c:	42be      	cmp	r6, r7
 8006a5e:	d900      	bls.n	8006a62 <__ssputs_r+0x86>
 8006a60:	463e      	mov	r6, r7
 8006a62:	6820      	ldr	r0, [r4, #0]
 8006a64:	4632      	mov	r2, r6
 8006a66:	4641      	mov	r1, r8
 8006a68:	f000 fd40 	bl	80074ec <memmove>
 8006a6c:	68a3      	ldr	r3, [r4, #8]
 8006a6e:	1b9b      	subs	r3, r3, r6
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	4433      	add	r3, r6
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e7db      	b.n	8006a34 <__ssputs_r+0x58>
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	f000 fd4f 	bl	8007520 <_realloc_r>
 8006a82:	4606      	mov	r6, r0
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d1e1      	bne.n	8006a4c <__ssputs_r+0x70>
 8006a88:	6921      	ldr	r1, [r4, #16]
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	f7ff ff5a 	bl	8006944 <_free_r>
 8006a90:	e7c7      	b.n	8006a22 <__ssputs_r+0x46>
	...

08006a94 <_svfiprintf_r>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	4698      	mov	r8, r3
 8006a9a:	898b      	ldrh	r3, [r1, #12]
 8006a9c:	061b      	lsls	r3, r3, #24
 8006a9e:	b09d      	sub	sp, #116	; 0x74
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	d50e      	bpl.n	8006ac6 <_svfiprintf_r+0x32>
 8006aa8:	690b      	ldr	r3, [r1, #16]
 8006aaa:	b963      	cbnz	r3, 8006ac6 <_svfiprintf_r+0x32>
 8006aac:	2140      	movs	r1, #64	; 0x40
 8006aae:	f7ff fc7f 	bl	80063b0 <_malloc_r>
 8006ab2:	6028      	str	r0, [r5, #0]
 8006ab4:	6128      	str	r0, [r5, #16]
 8006ab6:	b920      	cbnz	r0, 8006ac2 <_svfiprintf_r+0x2e>
 8006ab8:	230c      	movs	r3, #12
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	e0d1      	b.n	8006c66 <_svfiprintf_r+0x1d2>
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	616b      	str	r3, [r5, #20]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aca:	2320      	movs	r3, #32
 8006acc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ad4:	2330      	movs	r3, #48	; 0x30
 8006ad6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c80 <_svfiprintf_r+0x1ec>
 8006ada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ade:	f04f 0901 	mov.w	r9, #1
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	469a      	mov	sl, r3
 8006ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aea:	b10a      	cbz	r2, 8006af0 <_svfiprintf_r+0x5c>
 8006aec:	2a25      	cmp	r2, #37	; 0x25
 8006aee:	d1f9      	bne.n	8006ae4 <_svfiprintf_r+0x50>
 8006af0:	ebba 0b04 	subs.w	fp, sl, r4
 8006af4:	d00b      	beq.n	8006b0e <_svfiprintf_r+0x7a>
 8006af6:	465b      	mov	r3, fp
 8006af8:	4622      	mov	r2, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	4638      	mov	r0, r7
 8006afe:	f7ff ff6d 	bl	80069dc <__ssputs_r>
 8006b02:	3001      	adds	r0, #1
 8006b04:	f000 80aa 	beq.w	8006c5c <_svfiprintf_r+0x1c8>
 8006b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b0a:	445a      	add	r2, fp
 8006b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 80a2 	beq.w	8006c5c <_svfiprintf_r+0x1c8>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b22:	f10a 0a01 	add.w	sl, sl, #1
 8006b26:	9304      	str	r3, [sp, #16]
 8006b28:	9307      	str	r3, [sp, #28]
 8006b2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b2e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b30:	4654      	mov	r4, sl
 8006b32:	2205      	movs	r2, #5
 8006b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b38:	4851      	ldr	r0, [pc, #324]	; (8006c80 <_svfiprintf_r+0x1ec>)
 8006b3a:	f7f9 fb51 	bl	80001e0 <memchr>
 8006b3e:	9a04      	ldr	r2, [sp, #16]
 8006b40:	b9d8      	cbnz	r0, 8006b7a <_svfiprintf_r+0xe6>
 8006b42:	06d0      	lsls	r0, r2, #27
 8006b44:	bf44      	itt	mi
 8006b46:	2320      	movmi	r3, #32
 8006b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b4c:	0711      	lsls	r1, r2, #28
 8006b4e:	bf44      	itt	mi
 8006b50:	232b      	movmi	r3, #43	; 0x2b
 8006b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b56:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b5c:	d015      	beq.n	8006b8a <_svfiprintf_r+0xf6>
 8006b5e:	9a07      	ldr	r2, [sp, #28]
 8006b60:	4654      	mov	r4, sl
 8006b62:	2000      	movs	r0, #0
 8006b64:	f04f 0c0a 	mov.w	ip, #10
 8006b68:	4621      	mov	r1, r4
 8006b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b6e:	3b30      	subs	r3, #48	; 0x30
 8006b70:	2b09      	cmp	r3, #9
 8006b72:	d94e      	bls.n	8006c12 <_svfiprintf_r+0x17e>
 8006b74:	b1b0      	cbz	r0, 8006ba4 <_svfiprintf_r+0x110>
 8006b76:	9207      	str	r2, [sp, #28]
 8006b78:	e014      	b.n	8006ba4 <_svfiprintf_r+0x110>
 8006b7a:	eba0 0308 	sub.w	r3, r0, r8
 8006b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b82:	4313      	orrs	r3, r2
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	46a2      	mov	sl, r4
 8006b88:	e7d2      	b.n	8006b30 <_svfiprintf_r+0x9c>
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	1d19      	adds	r1, r3, #4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	9103      	str	r1, [sp, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfbb      	ittet	lt
 8006b96:	425b      	neglt	r3, r3
 8006b98:	f042 0202 	orrlt.w	r2, r2, #2
 8006b9c:	9307      	strge	r3, [sp, #28]
 8006b9e:	9307      	strlt	r3, [sp, #28]
 8006ba0:	bfb8      	it	lt
 8006ba2:	9204      	strlt	r2, [sp, #16]
 8006ba4:	7823      	ldrb	r3, [r4, #0]
 8006ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ba8:	d10c      	bne.n	8006bc4 <_svfiprintf_r+0x130>
 8006baa:	7863      	ldrb	r3, [r4, #1]
 8006bac:	2b2a      	cmp	r3, #42	; 0x2a
 8006bae:	d135      	bne.n	8006c1c <_svfiprintf_r+0x188>
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	1d1a      	adds	r2, r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	9203      	str	r2, [sp, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bfb8      	it	lt
 8006bbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bc0:	3402      	adds	r4, #2
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c90 <_svfiprintf_r+0x1fc>
 8006bc8:	7821      	ldrb	r1, [r4, #0]
 8006bca:	2203      	movs	r2, #3
 8006bcc:	4650      	mov	r0, sl
 8006bce:	f7f9 fb07 	bl	80001e0 <memchr>
 8006bd2:	b140      	cbz	r0, 8006be6 <_svfiprintf_r+0x152>
 8006bd4:	2340      	movs	r3, #64	; 0x40
 8006bd6:	eba0 000a 	sub.w	r0, r0, sl
 8006bda:	fa03 f000 	lsl.w	r0, r3, r0
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	4303      	orrs	r3, r0
 8006be2:	3401      	adds	r4, #1
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bea:	4826      	ldr	r0, [pc, #152]	; (8006c84 <_svfiprintf_r+0x1f0>)
 8006bec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bf0:	2206      	movs	r2, #6
 8006bf2:	f7f9 faf5 	bl	80001e0 <memchr>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d038      	beq.n	8006c6c <_svfiprintf_r+0x1d8>
 8006bfa:	4b23      	ldr	r3, [pc, #140]	; (8006c88 <_svfiprintf_r+0x1f4>)
 8006bfc:	bb1b      	cbnz	r3, 8006c46 <_svfiprintf_r+0x1b2>
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	3307      	adds	r3, #7
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	3308      	adds	r3, #8
 8006c08:	9303      	str	r3, [sp, #12]
 8006c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0c:	4433      	add	r3, r6
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	e767      	b.n	8006ae2 <_svfiprintf_r+0x4e>
 8006c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c16:	460c      	mov	r4, r1
 8006c18:	2001      	movs	r0, #1
 8006c1a:	e7a5      	b.n	8006b68 <_svfiprintf_r+0xd4>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	3401      	adds	r4, #1
 8006c20:	9305      	str	r3, [sp, #20]
 8006c22:	4619      	mov	r1, r3
 8006c24:	f04f 0c0a 	mov.w	ip, #10
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c2e:	3a30      	subs	r2, #48	; 0x30
 8006c30:	2a09      	cmp	r2, #9
 8006c32:	d903      	bls.n	8006c3c <_svfiprintf_r+0x1a8>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0c5      	beq.n	8006bc4 <_svfiprintf_r+0x130>
 8006c38:	9105      	str	r1, [sp, #20]
 8006c3a:	e7c3      	b.n	8006bc4 <_svfiprintf_r+0x130>
 8006c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c40:	4604      	mov	r4, r0
 8006c42:	2301      	movs	r3, #1
 8006c44:	e7f0      	b.n	8006c28 <_svfiprintf_r+0x194>
 8006c46:	ab03      	add	r3, sp, #12
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <_svfiprintf_r+0x1f8>)
 8006c4e:	a904      	add	r1, sp, #16
 8006c50:	4638      	mov	r0, r7
 8006c52:	f3af 8000 	nop.w
 8006c56:	1c42      	adds	r2, r0, #1
 8006c58:	4606      	mov	r6, r0
 8006c5a:	d1d6      	bne.n	8006c0a <_svfiprintf_r+0x176>
 8006c5c:	89ab      	ldrh	r3, [r5, #12]
 8006c5e:	065b      	lsls	r3, r3, #25
 8006c60:	f53f af2c 	bmi.w	8006abc <_svfiprintf_r+0x28>
 8006c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c66:	b01d      	add	sp, #116	; 0x74
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6c:	ab03      	add	r3, sp, #12
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	462a      	mov	r2, r5
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <_svfiprintf_r+0x1f8>)
 8006c74:	a904      	add	r1, sp, #16
 8006c76:	4638      	mov	r0, r7
 8006c78:	f000 f9d4 	bl	8007024 <_printf_i>
 8006c7c:	e7eb      	b.n	8006c56 <_svfiprintf_r+0x1c2>
 8006c7e:	bf00      	nop
 8006c80:	08007802 	.word	0x08007802
 8006c84:	0800780c 	.word	0x0800780c
 8006c88:	00000000 	.word	0x00000000
 8006c8c:	080069dd 	.word	0x080069dd
 8006c90:	08007808 	.word	0x08007808

08006c94 <__sfputc_r>:
 8006c94:	6893      	ldr	r3, [r2, #8]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	b410      	push	{r4}
 8006c9c:	6093      	str	r3, [r2, #8]
 8006c9e:	da08      	bge.n	8006cb2 <__sfputc_r+0x1e>
 8006ca0:	6994      	ldr	r4, [r2, #24]
 8006ca2:	42a3      	cmp	r3, r4
 8006ca4:	db01      	blt.n	8006caa <__sfputc_r+0x16>
 8006ca6:	290a      	cmp	r1, #10
 8006ca8:	d103      	bne.n	8006cb2 <__sfputc_r+0x1e>
 8006caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cae:	f000 baf1 	b.w	8007294 <__swbuf_r>
 8006cb2:	6813      	ldr	r3, [r2, #0]
 8006cb4:	1c58      	adds	r0, r3, #1
 8006cb6:	6010      	str	r0, [r2, #0]
 8006cb8:	7019      	strb	r1, [r3, #0]
 8006cba:	4608      	mov	r0, r1
 8006cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <__sfputs_r>:
 8006cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	460f      	mov	r7, r1
 8006cc8:	4614      	mov	r4, r2
 8006cca:	18d5      	adds	r5, r2, r3
 8006ccc:	42ac      	cmp	r4, r5
 8006cce:	d101      	bne.n	8006cd4 <__sfputs_r+0x12>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e007      	b.n	8006ce4 <__sfputs_r+0x22>
 8006cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd8:	463a      	mov	r2, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff ffda 	bl	8006c94 <__sfputc_r>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d1f3      	bne.n	8006ccc <__sfputs_r+0xa>
 8006ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ce8 <_vfiprintf_r>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	460d      	mov	r5, r1
 8006cee:	b09d      	sub	sp, #116	; 0x74
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	4698      	mov	r8, r3
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	b118      	cbz	r0, 8006d00 <_vfiprintf_r+0x18>
 8006cf8:	6983      	ldr	r3, [r0, #24]
 8006cfa:	b90b      	cbnz	r3, 8006d00 <_vfiprintf_r+0x18>
 8006cfc:	f7ff fa5c 	bl	80061b8 <__sinit>
 8006d00:	4b89      	ldr	r3, [pc, #548]	; (8006f28 <_vfiprintf_r+0x240>)
 8006d02:	429d      	cmp	r5, r3
 8006d04:	d11b      	bne.n	8006d3e <_vfiprintf_r+0x56>
 8006d06:	6875      	ldr	r5, [r6, #4]
 8006d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d0a:	07d9      	lsls	r1, r3, #31
 8006d0c:	d405      	bmi.n	8006d1a <_vfiprintf_r+0x32>
 8006d0e:	89ab      	ldrh	r3, [r5, #12]
 8006d10:	059a      	lsls	r2, r3, #22
 8006d12:	d402      	bmi.n	8006d1a <_vfiprintf_r+0x32>
 8006d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d16:	f7ff fb12 	bl	800633e <__retarget_lock_acquire_recursive>
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	071b      	lsls	r3, r3, #28
 8006d1e:	d501      	bpl.n	8006d24 <_vfiprintf_r+0x3c>
 8006d20:	692b      	ldr	r3, [r5, #16]
 8006d22:	b9eb      	cbnz	r3, 8006d60 <_vfiprintf_r+0x78>
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f000 fb06 	bl	8007338 <__swsetup_r>
 8006d2c:	b1c0      	cbz	r0, 8006d60 <_vfiprintf_r+0x78>
 8006d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d30:	07dc      	lsls	r4, r3, #31
 8006d32:	d50e      	bpl.n	8006d52 <_vfiprintf_r+0x6a>
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
 8006d38:	b01d      	add	sp, #116	; 0x74
 8006d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3e:	4b7b      	ldr	r3, [pc, #492]	; (8006f2c <_vfiprintf_r+0x244>)
 8006d40:	429d      	cmp	r5, r3
 8006d42:	d101      	bne.n	8006d48 <_vfiprintf_r+0x60>
 8006d44:	68b5      	ldr	r5, [r6, #8]
 8006d46:	e7df      	b.n	8006d08 <_vfiprintf_r+0x20>
 8006d48:	4b79      	ldr	r3, [pc, #484]	; (8006f30 <_vfiprintf_r+0x248>)
 8006d4a:	429d      	cmp	r5, r3
 8006d4c:	bf08      	it	eq
 8006d4e:	68f5      	ldreq	r5, [r6, #12]
 8006d50:	e7da      	b.n	8006d08 <_vfiprintf_r+0x20>
 8006d52:	89ab      	ldrh	r3, [r5, #12]
 8006d54:	0598      	lsls	r0, r3, #22
 8006d56:	d4ed      	bmi.n	8006d34 <_vfiprintf_r+0x4c>
 8006d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d5a:	f7ff faf1 	bl	8006340 <__retarget_lock_release_recursive>
 8006d5e:	e7e9      	b.n	8006d34 <_vfiprintf_r+0x4c>
 8006d60:	2300      	movs	r3, #0
 8006d62:	9309      	str	r3, [sp, #36]	; 0x24
 8006d64:	2320      	movs	r3, #32
 8006d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d6e:	2330      	movs	r3, #48	; 0x30
 8006d70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f34 <_vfiprintf_r+0x24c>
 8006d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d78:	f04f 0901 	mov.w	r9, #1
 8006d7c:	4623      	mov	r3, r4
 8006d7e:	469a      	mov	sl, r3
 8006d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d84:	b10a      	cbz	r2, 8006d8a <_vfiprintf_r+0xa2>
 8006d86:	2a25      	cmp	r2, #37	; 0x25
 8006d88:	d1f9      	bne.n	8006d7e <_vfiprintf_r+0x96>
 8006d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d8e:	d00b      	beq.n	8006da8 <_vfiprintf_r+0xc0>
 8006d90:	465b      	mov	r3, fp
 8006d92:	4622      	mov	r2, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff ff93 	bl	8006cc2 <__sfputs_r>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f000 80aa 	beq.w	8006ef6 <_vfiprintf_r+0x20e>
 8006da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da4:	445a      	add	r2, fp
 8006da6:	9209      	str	r2, [sp, #36]	; 0x24
 8006da8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80a2 	beq.w	8006ef6 <_vfiprintf_r+0x20e>
 8006db2:	2300      	movs	r3, #0
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dbc:	f10a 0a01 	add.w	sl, sl, #1
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	9307      	str	r3, [sp, #28]
 8006dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8006dca:	4654      	mov	r4, sl
 8006dcc:	2205      	movs	r2, #5
 8006dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd2:	4858      	ldr	r0, [pc, #352]	; (8006f34 <_vfiprintf_r+0x24c>)
 8006dd4:	f7f9 fa04 	bl	80001e0 <memchr>
 8006dd8:	9a04      	ldr	r2, [sp, #16]
 8006dda:	b9d8      	cbnz	r0, 8006e14 <_vfiprintf_r+0x12c>
 8006ddc:	06d1      	lsls	r1, r2, #27
 8006dde:	bf44      	itt	mi
 8006de0:	2320      	movmi	r3, #32
 8006de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de6:	0713      	lsls	r3, r2, #28
 8006de8:	bf44      	itt	mi
 8006dea:	232b      	movmi	r3, #43	; 0x2b
 8006dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df0:	f89a 3000 	ldrb.w	r3, [sl]
 8006df4:	2b2a      	cmp	r3, #42	; 0x2a
 8006df6:	d015      	beq.n	8006e24 <_vfiprintf_r+0x13c>
 8006df8:	9a07      	ldr	r2, [sp, #28]
 8006dfa:	4654      	mov	r4, sl
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f04f 0c0a 	mov.w	ip, #10
 8006e02:	4621      	mov	r1, r4
 8006e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e08:	3b30      	subs	r3, #48	; 0x30
 8006e0a:	2b09      	cmp	r3, #9
 8006e0c:	d94e      	bls.n	8006eac <_vfiprintf_r+0x1c4>
 8006e0e:	b1b0      	cbz	r0, 8006e3e <_vfiprintf_r+0x156>
 8006e10:	9207      	str	r2, [sp, #28]
 8006e12:	e014      	b.n	8006e3e <_vfiprintf_r+0x156>
 8006e14:	eba0 0308 	sub.w	r3, r0, r8
 8006e18:	fa09 f303 	lsl.w	r3, r9, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	46a2      	mov	sl, r4
 8006e22:	e7d2      	b.n	8006dca <_vfiprintf_r+0xe2>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	1d19      	adds	r1, r3, #4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	9103      	str	r1, [sp, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bfbb      	ittet	lt
 8006e30:	425b      	neglt	r3, r3
 8006e32:	f042 0202 	orrlt.w	r2, r2, #2
 8006e36:	9307      	strge	r3, [sp, #28]
 8006e38:	9307      	strlt	r3, [sp, #28]
 8006e3a:	bfb8      	it	lt
 8006e3c:	9204      	strlt	r2, [sp, #16]
 8006e3e:	7823      	ldrb	r3, [r4, #0]
 8006e40:	2b2e      	cmp	r3, #46	; 0x2e
 8006e42:	d10c      	bne.n	8006e5e <_vfiprintf_r+0x176>
 8006e44:	7863      	ldrb	r3, [r4, #1]
 8006e46:	2b2a      	cmp	r3, #42	; 0x2a
 8006e48:	d135      	bne.n	8006eb6 <_vfiprintf_r+0x1ce>
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	1d1a      	adds	r2, r3, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	9203      	str	r2, [sp, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bfb8      	it	lt
 8006e56:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e5a:	3402      	adds	r4, #2
 8006e5c:	9305      	str	r3, [sp, #20]
 8006e5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f44 <_vfiprintf_r+0x25c>
 8006e62:	7821      	ldrb	r1, [r4, #0]
 8006e64:	2203      	movs	r2, #3
 8006e66:	4650      	mov	r0, sl
 8006e68:	f7f9 f9ba 	bl	80001e0 <memchr>
 8006e6c:	b140      	cbz	r0, 8006e80 <_vfiprintf_r+0x198>
 8006e6e:	2340      	movs	r3, #64	; 0x40
 8006e70:	eba0 000a 	sub.w	r0, r0, sl
 8006e74:	fa03 f000 	lsl.w	r0, r3, r0
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	4303      	orrs	r3, r0
 8006e7c:	3401      	adds	r4, #1
 8006e7e:	9304      	str	r3, [sp, #16]
 8006e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e84:	482c      	ldr	r0, [pc, #176]	; (8006f38 <_vfiprintf_r+0x250>)
 8006e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e8a:	2206      	movs	r2, #6
 8006e8c:	f7f9 f9a8 	bl	80001e0 <memchr>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d03f      	beq.n	8006f14 <_vfiprintf_r+0x22c>
 8006e94:	4b29      	ldr	r3, [pc, #164]	; (8006f3c <_vfiprintf_r+0x254>)
 8006e96:	bb1b      	cbnz	r3, 8006ee0 <_vfiprintf_r+0x1f8>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	3307      	adds	r3, #7
 8006e9c:	f023 0307 	bic.w	r3, r3, #7
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	9303      	str	r3, [sp, #12]
 8006ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea6:	443b      	add	r3, r7
 8006ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eaa:	e767      	b.n	8006d7c <_vfiprintf_r+0x94>
 8006eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	e7a5      	b.n	8006e02 <_vfiprintf_r+0x11a>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	3401      	adds	r4, #1
 8006eba:	9305      	str	r3, [sp, #20]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f04f 0c0a 	mov.w	ip, #10
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ec8:	3a30      	subs	r2, #48	; 0x30
 8006eca:	2a09      	cmp	r2, #9
 8006ecc:	d903      	bls.n	8006ed6 <_vfiprintf_r+0x1ee>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0c5      	beq.n	8006e5e <_vfiprintf_r+0x176>
 8006ed2:	9105      	str	r1, [sp, #20]
 8006ed4:	e7c3      	b.n	8006e5e <_vfiprintf_r+0x176>
 8006ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eda:	4604      	mov	r4, r0
 8006edc:	2301      	movs	r3, #1
 8006ede:	e7f0      	b.n	8006ec2 <_vfiprintf_r+0x1da>
 8006ee0:	ab03      	add	r3, sp, #12
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <_vfiprintf_r+0x258>)
 8006ee8:	a904      	add	r1, sp, #16
 8006eea:	4630      	mov	r0, r6
 8006eec:	f3af 8000 	nop.w
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	1c78      	adds	r0, r7, #1
 8006ef4:	d1d6      	bne.n	8006ea4 <_vfiprintf_r+0x1bc>
 8006ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ef8:	07d9      	lsls	r1, r3, #31
 8006efa:	d405      	bmi.n	8006f08 <_vfiprintf_r+0x220>
 8006efc:	89ab      	ldrh	r3, [r5, #12]
 8006efe:	059a      	lsls	r2, r3, #22
 8006f00:	d402      	bmi.n	8006f08 <_vfiprintf_r+0x220>
 8006f02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f04:	f7ff fa1c 	bl	8006340 <__retarget_lock_release_recursive>
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	065b      	lsls	r3, r3, #25
 8006f0c:	f53f af12 	bmi.w	8006d34 <_vfiprintf_r+0x4c>
 8006f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f12:	e711      	b.n	8006d38 <_vfiprintf_r+0x50>
 8006f14:	ab03      	add	r3, sp, #12
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	462a      	mov	r2, r5
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <_vfiprintf_r+0x258>)
 8006f1c:	a904      	add	r1, sp, #16
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 f880 	bl	8007024 <_printf_i>
 8006f24:	e7e4      	b.n	8006ef0 <_vfiprintf_r+0x208>
 8006f26:	bf00      	nop
 8006f28:	08007710 	.word	0x08007710
 8006f2c:	08007730 	.word	0x08007730
 8006f30:	080076f0 	.word	0x080076f0
 8006f34:	08007802 	.word	0x08007802
 8006f38:	0800780c 	.word	0x0800780c
 8006f3c:	00000000 	.word	0x00000000
 8006f40:	08006cc3 	.word	0x08006cc3
 8006f44:	08007808 	.word	0x08007808

08006f48 <_printf_common>:
 8006f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4c:	4616      	mov	r6, r2
 8006f4e:	4699      	mov	r9, r3
 8006f50:	688a      	ldr	r2, [r1, #8]
 8006f52:	690b      	ldr	r3, [r1, #16]
 8006f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	bfb8      	it	lt
 8006f5c:	4613      	movlt	r3, r2
 8006f5e:	6033      	str	r3, [r6, #0]
 8006f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f64:	4607      	mov	r7, r0
 8006f66:	460c      	mov	r4, r1
 8006f68:	b10a      	cbz	r2, 8006f6e <_printf_common+0x26>
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	6033      	str	r3, [r6, #0]
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	0699      	lsls	r1, r3, #26
 8006f72:	bf42      	ittt	mi
 8006f74:	6833      	ldrmi	r3, [r6, #0]
 8006f76:	3302      	addmi	r3, #2
 8006f78:	6033      	strmi	r3, [r6, #0]
 8006f7a:	6825      	ldr	r5, [r4, #0]
 8006f7c:	f015 0506 	ands.w	r5, r5, #6
 8006f80:	d106      	bne.n	8006f90 <_printf_common+0x48>
 8006f82:	f104 0a19 	add.w	sl, r4, #25
 8006f86:	68e3      	ldr	r3, [r4, #12]
 8006f88:	6832      	ldr	r2, [r6, #0]
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	42ab      	cmp	r3, r5
 8006f8e:	dc26      	bgt.n	8006fde <_printf_common+0x96>
 8006f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f94:	1e13      	subs	r3, r2, #0
 8006f96:	6822      	ldr	r2, [r4, #0]
 8006f98:	bf18      	it	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	0692      	lsls	r2, r2, #26
 8006f9e:	d42b      	bmi.n	8006ff8 <_printf_common+0xb0>
 8006fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	47c0      	blx	r8
 8006faa:	3001      	adds	r0, #1
 8006fac:	d01e      	beq.n	8006fec <_printf_common+0xa4>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	68e5      	ldr	r5, [r4, #12]
 8006fb2:	6832      	ldr	r2, [r6, #0]
 8006fb4:	f003 0306 	and.w	r3, r3, #6
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	bf08      	it	eq
 8006fbc:	1aad      	subeq	r5, r5, r2
 8006fbe:	68a3      	ldr	r3, [r4, #8]
 8006fc0:	6922      	ldr	r2, [r4, #16]
 8006fc2:	bf0c      	ite	eq
 8006fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fc8:	2500      	movne	r5, #0
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	bfc4      	itt	gt
 8006fce:	1a9b      	subgt	r3, r3, r2
 8006fd0:	18ed      	addgt	r5, r5, r3
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	341a      	adds	r4, #26
 8006fd6:	42b5      	cmp	r5, r6
 8006fd8:	d11a      	bne.n	8007010 <_printf_common+0xc8>
 8006fda:	2000      	movs	r0, #0
 8006fdc:	e008      	b.n	8006ff0 <_printf_common+0xa8>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4652      	mov	r2, sl
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	47c0      	blx	r8
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d103      	bne.n	8006ff4 <_printf_common+0xac>
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff4:	3501      	adds	r5, #1
 8006ff6:	e7c6      	b.n	8006f86 <_printf_common+0x3e>
 8006ff8:	18e1      	adds	r1, r4, r3
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	2030      	movs	r0, #48	; 0x30
 8006ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007002:	4422      	add	r2, r4
 8007004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800700c:	3302      	adds	r3, #2
 800700e:	e7c7      	b.n	8006fa0 <_printf_common+0x58>
 8007010:	2301      	movs	r3, #1
 8007012:	4622      	mov	r2, r4
 8007014:	4649      	mov	r1, r9
 8007016:	4638      	mov	r0, r7
 8007018:	47c0      	blx	r8
 800701a:	3001      	adds	r0, #1
 800701c:	d0e6      	beq.n	8006fec <_printf_common+0xa4>
 800701e:	3601      	adds	r6, #1
 8007020:	e7d9      	b.n	8006fd6 <_printf_common+0x8e>
	...

08007024 <_printf_i>:
 8007024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007028:	7e0f      	ldrb	r7, [r1, #24]
 800702a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800702c:	2f78      	cmp	r7, #120	; 0x78
 800702e:	4691      	mov	r9, r2
 8007030:	4680      	mov	r8, r0
 8007032:	460c      	mov	r4, r1
 8007034:	469a      	mov	sl, r3
 8007036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800703a:	d807      	bhi.n	800704c <_printf_i+0x28>
 800703c:	2f62      	cmp	r7, #98	; 0x62
 800703e:	d80a      	bhi.n	8007056 <_printf_i+0x32>
 8007040:	2f00      	cmp	r7, #0
 8007042:	f000 80d8 	beq.w	80071f6 <_printf_i+0x1d2>
 8007046:	2f58      	cmp	r7, #88	; 0x58
 8007048:	f000 80a3 	beq.w	8007192 <_printf_i+0x16e>
 800704c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007054:	e03a      	b.n	80070cc <_printf_i+0xa8>
 8007056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800705a:	2b15      	cmp	r3, #21
 800705c:	d8f6      	bhi.n	800704c <_printf_i+0x28>
 800705e:	a101      	add	r1, pc, #4	; (adr r1, 8007064 <_printf_i+0x40>)
 8007060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007064:	080070bd 	.word	0x080070bd
 8007068:	080070d1 	.word	0x080070d1
 800706c:	0800704d 	.word	0x0800704d
 8007070:	0800704d 	.word	0x0800704d
 8007074:	0800704d 	.word	0x0800704d
 8007078:	0800704d 	.word	0x0800704d
 800707c:	080070d1 	.word	0x080070d1
 8007080:	0800704d 	.word	0x0800704d
 8007084:	0800704d 	.word	0x0800704d
 8007088:	0800704d 	.word	0x0800704d
 800708c:	0800704d 	.word	0x0800704d
 8007090:	080071dd 	.word	0x080071dd
 8007094:	08007101 	.word	0x08007101
 8007098:	080071bf 	.word	0x080071bf
 800709c:	0800704d 	.word	0x0800704d
 80070a0:	0800704d 	.word	0x0800704d
 80070a4:	080071ff 	.word	0x080071ff
 80070a8:	0800704d 	.word	0x0800704d
 80070ac:	08007101 	.word	0x08007101
 80070b0:	0800704d 	.word	0x0800704d
 80070b4:	0800704d 	.word	0x0800704d
 80070b8:	080071c7 	.word	0x080071c7
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	1d1a      	adds	r2, r3, #4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	602a      	str	r2, [r5, #0]
 80070c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0a3      	b.n	8007218 <_printf_i+0x1f4>
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	6829      	ldr	r1, [r5, #0]
 80070d4:	0606      	lsls	r6, r0, #24
 80070d6:	f101 0304 	add.w	r3, r1, #4
 80070da:	d50a      	bpl.n	80070f2 <_printf_i+0xce>
 80070dc:	680e      	ldr	r6, [r1, #0]
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	2e00      	cmp	r6, #0
 80070e2:	da03      	bge.n	80070ec <_printf_i+0xc8>
 80070e4:	232d      	movs	r3, #45	; 0x2d
 80070e6:	4276      	negs	r6, r6
 80070e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ec:	485e      	ldr	r0, [pc, #376]	; (8007268 <_printf_i+0x244>)
 80070ee:	230a      	movs	r3, #10
 80070f0:	e019      	b.n	8007126 <_printf_i+0x102>
 80070f2:	680e      	ldr	r6, [r1, #0]
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070fa:	bf18      	it	ne
 80070fc:	b236      	sxthne	r6, r6
 80070fe:	e7ef      	b.n	80070e0 <_printf_i+0xbc>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	1d19      	adds	r1, r3, #4
 8007106:	6029      	str	r1, [r5, #0]
 8007108:	0601      	lsls	r1, r0, #24
 800710a:	d501      	bpl.n	8007110 <_printf_i+0xec>
 800710c:	681e      	ldr	r6, [r3, #0]
 800710e:	e002      	b.n	8007116 <_printf_i+0xf2>
 8007110:	0646      	lsls	r6, r0, #25
 8007112:	d5fb      	bpl.n	800710c <_printf_i+0xe8>
 8007114:	881e      	ldrh	r6, [r3, #0]
 8007116:	4854      	ldr	r0, [pc, #336]	; (8007268 <_printf_i+0x244>)
 8007118:	2f6f      	cmp	r7, #111	; 0x6f
 800711a:	bf0c      	ite	eq
 800711c:	2308      	moveq	r3, #8
 800711e:	230a      	movne	r3, #10
 8007120:	2100      	movs	r1, #0
 8007122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007126:	6865      	ldr	r5, [r4, #4]
 8007128:	60a5      	str	r5, [r4, #8]
 800712a:	2d00      	cmp	r5, #0
 800712c:	bfa2      	ittt	ge
 800712e:	6821      	ldrge	r1, [r4, #0]
 8007130:	f021 0104 	bicge.w	r1, r1, #4
 8007134:	6021      	strge	r1, [r4, #0]
 8007136:	b90e      	cbnz	r6, 800713c <_printf_i+0x118>
 8007138:	2d00      	cmp	r5, #0
 800713a:	d04d      	beq.n	80071d8 <_printf_i+0x1b4>
 800713c:	4615      	mov	r5, r2
 800713e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007142:	fb03 6711 	mls	r7, r3, r1, r6
 8007146:	5dc7      	ldrb	r7, [r0, r7]
 8007148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800714c:	4637      	mov	r7, r6
 800714e:	42bb      	cmp	r3, r7
 8007150:	460e      	mov	r6, r1
 8007152:	d9f4      	bls.n	800713e <_printf_i+0x11a>
 8007154:	2b08      	cmp	r3, #8
 8007156:	d10b      	bne.n	8007170 <_printf_i+0x14c>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	07de      	lsls	r6, r3, #31
 800715c:	d508      	bpl.n	8007170 <_printf_i+0x14c>
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4299      	cmp	r1, r3
 8007164:	bfde      	ittt	le
 8007166:	2330      	movle	r3, #48	; 0x30
 8007168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800716c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007170:	1b52      	subs	r2, r2, r5
 8007172:	6122      	str	r2, [r4, #16]
 8007174:	f8cd a000 	str.w	sl, [sp]
 8007178:	464b      	mov	r3, r9
 800717a:	aa03      	add	r2, sp, #12
 800717c:	4621      	mov	r1, r4
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff fee2 	bl	8006f48 <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	d14c      	bne.n	8007222 <_printf_i+0x1fe>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	b004      	add	sp, #16
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	4835      	ldr	r0, [pc, #212]	; (8007268 <_printf_i+0x244>)
 8007194:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007198:	6829      	ldr	r1, [r5, #0]
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	f851 6b04 	ldr.w	r6, [r1], #4
 80071a0:	6029      	str	r1, [r5, #0]
 80071a2:	061d      	lsls	r5, r3, #24
 80071a4:	d514      	bpl.n	80071d0 <_printf_i+0x1ac>
 80071a6:	07df      	lsls	r7, r3, #31
 80071a8:	bf44      	itt	mi
 80071aa:	f043 0320 	orrmi.w	r3, r3, #32
 80071ae:	6023      	strmi	r3, [r4, #0]
 80071b0:	b91e      	cbnz	r6, 80071ba <_printf_i+0x196>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f023 0320 	bic.w	r3, r3, #32
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	2310      	movs	r3, #16
 80071bc:	e7b0      	b.n	8007120 <_printf_i+0xfc>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	f043 0320 	orr.w	r3, r3, #32
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	2378      	movs	r3, #120	; 0x78
 80071c8:	4828      	ldr	r0, [pc, #160]	; (800726c <_printf_i+0x248>)
 80071ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071ce:	e7e3      	b.n	8007198 <_printf_i+0x174>
 80071d0:	0659      	lsls	r1, r3, #25
 80071d2:	bf48      	it	mi
 80071d4:	b2b6      	uxthmi	r6, r6
 80071d6:	e7e6      	b.n	80071a6 <_printf_i+0x182>
 80071d8:	4615      	mov	r5, r2
 80071da:	e7bb      	b.n	8007154 <_printf_i+0x130>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	6826      	ldr	r6, [r4, #0]
 80071e0:	6961      	ldr	r1, [r4, #20]
 80071e2:	1d18      	adds	r0, r3, #4
 80071e4:	6028      	str	r0, [r5, #0]
 80071e6:	0635      	lsls	r5, r6, #24
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	d501      	bpl.n	80071f0 <_printf_i+0x1cc>
 80071ec:	6019      	str	r1, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <_printf_i+0x1d2>
 80071f0:	0670      	lsls	r0, r6, #25
 80071f2:	d5fb      	bpl.n	80071ec <_printf_i+0x1c8>
 80071f4:	8019      	strh	r1, [r3, #0]
 80071f6:	2300      	movs	r3, #0
 80071f8:	6123      	str	r3, [r4, #16]
 80071fa:	4615      	mov	r5, r2
 80071fc:	e7ba      	b.n	8007174 <_printf_i+0x150>
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	602a      	str	r2, [r5, #0]
 8007204:	681d      	ldr	r5, [r3, #0]
 8007206:	6862      	ldr	r2, [r4, #4]
 8007208:	2100      	movs	r1, #0
 800720a:	4628      	mov	r0, r5
 800720c:	f7f8 ffe8 	bl	80001e0 <memchr>
 8007210:	b108      	cbz	r0, 8007216 <_printf_i+0x1f2>
 8007212:	1b40      	subs	r0, r0, r5
 8007214:	6060      	str	r0, [r4, #4]
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	6123      	str	r3, [r4, #16]
 800721a:	2300      	movs	r3, #0
 800721c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007220:	e7a8      	b.n	8007174 <_printf_i+0x150>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	462a      	mov	r2, r5
 8007226:	4649      	mov	r1, r9
 8007228:	4640      	mov	r0, r8
 800722a:	47d0      	blx	sl
 800722c:	3001      	adds	r0, #1
 800722e:	d0ab      	beq.n	8007188 <_printf_i+0x164>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	079b      	lsls	r3, r3, #30
 8007234:	d413      	bmi.n	800725e <_printf_i+0x23a>
 8007236:	68e0      	ldr	r0, [r4, #12]
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	4298      	cmp	r0, r3
 800723c:	bfb8      	it	lt
 800723e:	4618      	movlt	r0, r3
 8007240:	e7a4      	b.n	800718c <_printf_i+0x168>
 8007242:	2301      	movs	r3, #1
 8007244:	4632      	mov	r2, r6
 8007246:	4649      	mov	r1, r9
 8007248:	4640      	mov	r0, r8
 800724a:	47d0      	blx	sl
 800724c:	3001      	adds	r0, #1
 800724e:	d09b      	beq.n	8007188 <_printf_i+0x164>
 8007250:	3501      	adds	r5, #1
 8007252:	68e3      	ldr	r3, [r4, #12]
 8007254:	9903      	ldr	r1, [sp, #12]
 8007256:	1a5b      	subs	r3, r3, r1
 8007258:	42ab      	cmp	r3, r5
 800725a:	dcf2      	bgt.n	8007242 <_printf_i+0x21e>
 800725c:	e7eb      	b.n	8007236 <_printf_i+0x212>
 800725e:	2500      	movs	r5, #0
 8007260:	f104 0619 	add.w	r6, r4, #25
 8007264:	e7f5      	b.n	8007252 <_printf_i+0x22e>
 8007266:	bf00      	nop
 8007268:	08007813 	.word	0x08007813
 800726c:	08007824 	.word	0x08007824

08007270 <_read_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4d07      	ldr	r5, [pc, #28]	; (8007290 <_read_r+0x20>)
 8007274:	4604      	mov	r4, r0
 8007276:	4608      	mov	r0, r1
 8007278:	4611      	mov	r1, r2
 800727a:	2200      	movs	r2, #0
 800727c:	602a      	str	r2, [r5, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	f7f9 fca6 	bl	8000bd0 <_read>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_read_r+0x1e>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_read_r+0x1e>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	20004b4c 	.word	0x20004b4c

08007294 <__swbuf_r>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	460e      	mov	r6, r1
 8007298:	4614      	mov	r4, r2
 800729a:	4605      	mov	r5, r0
 800729c:	b118      	cbz	r0, 80072a6 <__swbuf_r+0x12>
 800729e:	6983      	ldr	r3, [r0, #24]
 80072a0:	b90b      	cbnz	r3, 80072a6 <__swbuf_r+0x12>
 80072a2:	f7fe ff89 	bl	80061b8 <__sinit>
 80072a6:	4b21      	ldr	r3, [pc, #132]	; (800732c <__swbuf_r+0x98>)
 80072a8:	429c      	cmp	r4, r3
 80072aa:	d12b      	bne.n	8007304 <__swbuf_r+0x70>
 80072ac:	686c      	ldr	r4, [r5, #4]
 80072ae:	69a3      	ldr	r3, [r4, #24]
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	071a      	lsls	r2, r3, #28
 80072b6:	d52f      	bpl.n	8007318 <__swbuf_r+0x84>
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	b36b      	cbz	r3, 8007318 <__swbuf_r+0x84>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	b2f6      	uxtb	r6, r6
 80072c6:	4283      	cmp	r3, r0
 80072c8:	4637      	mov	r7, r6
 80072ca:	dc04      	bgt.n	80072d6 <__swbuf_r+0x42>
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f7ff fac4 	bl	800685c <_fflush_r>
 80072d4:	bb30      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	3b01      	subs	r3, #1
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	701e      	strb	r6, [r3, #0]
 80072e4:	6963      	ldr	r3, [r4, #20]
 80072e6:	3001      	adds	r0, #1
 80072e8:	4283      	cmp	r3, r0
 80072ea:	d004      	beq.n	80072f6 <__swbuf_r+0x62>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d506      	bpl.n	8007300 <__swbuf_r+0x6c>
 80072f2:	2e0a      	cmp	r6, #10
 80072f4:	d104      	bne.n	8007300 <__swbuf_r+0x6c>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f7ff faaf 	bl	800685c <_fflush_r>
 80072fe:	b988      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 8007300:	4638      	mov	r0, r7
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <__swbuf_r+0x9c>)
 8007306:	429c      	cmp	r4, r3
 8007308:	d101      	bne.n	800730e <__swbuf_r+0x7a>
 800730a:	68ac      	ldr	r4, [r5, #8]
 800730c:	e7cf      	b.n	80072ae <__swbuf_r+0x1a>
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <__swbuf_r+0xa0>)
 8007310:	429c      	cmp	r4, r3
 8007312:	bf08      	it	eq
 8007314:	68ec      	ldreq	r4, [r5, #12]
 8007316:	e7ca      	b.n	80072ae <__swbuf_r+0x1a>
 8007318:	4621      	mov	r1, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f80c 	bl	8007338 <__swsetup_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	d0cb      	beq.n	80072bc <__swbuf_r+0x28>
 8007324:	f04f 37ff 	mov.w	r7, #4294967295
 8007328:	e7ea      	b.n	8007300 <__swbuf_r+0x6c>
 800732a:	bf00      	nop
 800732c:	08007710 	.word	0x08007710
 8007330:	08007730 	.word	0x08007730
 8007334:	080076f0 	.word	0x080076f0

08007338 <__swsetup_r>:
 8007338:	4b32      	ldr	r3, [pc, #200]	; (8007404 <__swsetup_r+0xcc>)
 800733a:	b570      	push	{r4, r5, r6, lr}
 800733c:	681d      	ldr	r5, [r3, #0]
 800733e:	4606      	mov	r6, r0
 8007340:	460c      	mov	r4, r1
 8007342:	b125      	cbz	r5, 800734e <__swsetup_r+0x16>
 8007344:	69ab      	ldr	r3, [r5, #24]
 8007346:	b913      	cbnz	r3, 800734e <__swsetup_r+0x16>
 8007348:	4628      	mov	r0, r5
 800734a:	f7fe ff35 	bl	80061b8 <__sinit>
 800734e:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <__swsetup_r+0xd0>)
 8007350:	429c      	cmp	r4, r3
 8007352:	d10f      	bne.n	8007374 <__swsetup_r+0x3c>
 8007354:	686c      	ldr	r4, [r5, #4]
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800735c:	0719      	lsls	r1, r3, #28
 800735e:	d42c      	bmi.n	80073ba <__swsetup_r+0x82>
 8007360:	06dd      	lsls	r5, r3, #27
 8007362:	d411      	bmi.n	8007388 <__swsetup_r+0x50>
 8007364:	2309      	movs	r3, #9
 8007366:	6033      	str	r3, [r6, #0]
 8007368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800736c:	81a3      	strh	r3, [r4, #12]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	e03e      	b.n	80073f2 <__swsetup_r+0xba>
 8007374:	4b25      	ldr	r3, [pc, #148]	; (800740c <__swsetup_r+0xd4>)
 8007376:	429c      	cmp	r4, r3
 8007378:	d101      	bne.n	800737e <__swsetup_r+0x46>
 800737a:	68ac      	ldr	r4, [r5, #8]
 800737c:	e7eb      	b.n	8007356 <__swsetup_r+0x1e>
 800737e:	4b24      	ldr	r3, [pc, #144]	; (8007410 <__swsetup_r+0xd8>)
 8007380:	429c      	cmp	r4, r3
 8007382:	bf08      	it	eq
 8007384:	68ec      	ldreq	r4, [r5, #12]
 8007386:	e7e6      	b.n	8007356 <__swsetup_r+0x1e>
 8007388:	0758      	lsls	r0, r3, #29
 800738a:	d512      	bpl.n	80073b2 <__swsetup_r+0x7a>
 800738c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800738e:	b141      	cbz	r1, 80073a2 <__swsetup_r+0x6a>
 8007390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007394:	4299      	cmp	r1, r3
 8007396:	d002      	beq.n	800739e <__swsetup_r+0x66>
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff fad3 	bl	8006944 <_free_r>
 800739e:	2300      	movs	r3, #0
 80073a0:	6363      	str	r3, [r4, #52]	; 0x34
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6063      	str	r3, [r4, #4]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f043 0308 	orr.w	r3, r3, #8
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	b94b      	cbnz	r3, 80073d2 <__swsetup_r+0x9a>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c8:	d003      	beq.n	80073d2 <__swsetup_r+0x9a>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4630      	mov	r0, r6
 80073ce:	f000 f84d 	bl	800746c <__smakebuf_r>
 80073d2:	89a0      	ldrh	r0, [r4, #12]
 80073d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d8:	f010 0301 	ands.w	r3, r0, #1
 80073dc:	d00a      	beq.n	80073f4 <__swsetup_r+0xbc>
 80073de:	2300      	movs	r3, #0
 80073e0:	60a3      	str	r3, [r4, #8]
 80073e2:	6963      	ldr	r3, [r4, #20]
 80073e4:	425b      	negs	r3, r3
 80073e6:	61a3      	str	r3, [r4, #24]
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	b943      	cbnz	r3, 80073fe <__swsetup_r+0xc6>
 80073ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073f0:	d1ba      	bne.n	8007368 <__swsetup_r+0x30>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	0781      	lsls	r1, r0, #30
 80073f6:	bf58      	it	pl
 80073f8:	6963      	ldrpl	r3, [r4, #20]
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	e7f4      	b.n	80073e8 <__swsetup_r+0xb0>
 80073fe:	2000      	movs	r0, #0
 8007400:	e7f7      	b.n	80073f2 <__swsetup_r+0xba>
 8007402:	bf00      	nop
 8007404:	2000001c 	.word	0x2000001c
 8007408:	08007710 	.word	0x08007710
 800740c:	08007730 	.word	0x08007730
 8007410:	080076f0 	.word	0x080076f0

08007414 <abort>:
 8007414:	b508      	push	{r3, lr}
 8007416:	2006      	movs	r0, #6
 8007418:	f000 f8da 	bl	80075d0 <raise>
 800741c:	2001      	movs	r0, #1
 800741e:	f7f9 fbcd 	bl	8000bbc <_exit>

08007422 <__swhatbuf_r>:
 8007422:	b570      	push	{r4, r5, r6, lr}
 8007424:	460e      	mov	r6, r1
 8007426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742a:	2900      	cmp	r1, #0
 800742c:	b096      	sub	sp, #88	; 0x58
 800742e:	4614      	mov	r4, r2
 8007430:	461d      	mov	r5, r3
 8007432:	da08      	bge.n	8007446 <__swhatbuf_r+0x24>
 8007434:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	602a      	str	r2, [r5, #0]
 800743c:	061a      	lsls	r2, r3, #24
 800743e:	d410      	bmi.n	8007462 <__swhatbuf_r+0x40>
 8007440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007444:	e00e      	b.n	8007464 <__swhatbuf_r+0x42>
 8007446:	466a      	mov	r2, sp
 8007448:	f000 f8de 	bl	8007608 <_fstat_r>
 800744c:	2800      	cmp	r0, #0
 800744e:	dbf1      	blt.n	8007434 <__swhatbuf_r+0x12>
 8007450:	9a01      	ldr	r2, [sp, #4]
 8007452:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007456:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800745a:	425a      	negs	r2, r3
 800745c:	415a      	adcs	r2, r3
 800745e:	602a      	str	r2, [r5, #0]
 8007460:	e7ee      	b.n	8007440 <__swhatbuf_r+0x1e>
 8007462:	2340      	movs	r3, #64	; 0x40
 8007464:	2000      	movs	r0, #0
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	b016      	add	sp, #88	; 0x58
 800746a:	bd70      	pop	{r4, r5, r6, pc}

0800746c <__smakebuf_r>:
 800746c:	898b      	ldrh	r3, [r1, #12]
 800746e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007470:	079d      	lsls	r5, r3, #30
 8007472:	4606      	mov	r6, r0
 8007474:	460c      	mov	r4, r1
 8007476:	d507      	bpl.n	8007488 <__smakebuf_r+0x1c>
 8007478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	6123      	str	r3, [r4, #16]
 8007480:	2301      	movs	r3, #1
 8007482:	6163      	str	r3, [r4, #20]
 8007484:	b002      	add	sp, #8
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	ab01      	add	r3, sp, #4
 800748a:	466a      	mov	r2, sp
 800748c:	f7ff ffc9 	bl	8007422 <__swhatbuf_r>
 8007490:	9900      	ldr	r1, [sp, #0]
 8007492:	4605      	mov	r5, r0
 8007494:	4630      	mov	r0, r6
 8007496:	f7fe ff8b 	bl	80063b0 <_malloc_r>
 800749a:	b948      	cbnz	r0, 80074b0 <__smakebuf_r+0x44>
 800749c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a0:	059a      	lsls	r2, r3, #22
 80074a2:	d4ef      	bmi.n	8007484 <__smakebuf_r+0x18>
 80074a4:	f023 0303 	bic.w	r3, r3, #3
 80074a8:	f043 0302 	orr.w	r3, r3, #2
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	e7e3      	b.n	8007478 <__smakebuf_r+0xc>
 80074b0:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <__smakebuf_r+0x7c>)
 80074b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	6020      	str	r0, [r4, #0]
 80074b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	9b00      	ldr	r3, [sp, #0]
 80074c0:	6163      	str	r3, [r4, #20]
 80074c2:	9b01      	ldr	r3, [sp, #4]
 80074c4:	6120      	str	r0, [r4, #16]
 80074c6:	b15b      	cbz	r3, 80074e0 <__smakebuf_r+0x74>
 80074c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f8ad 	bl	800762c <_isatty_r>
 80074d2:	b128      	cbz	r0, 80074e0 <__smakebuf_r+0x74>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	f043 0301 	orr.w	r3, r3, #1
 80074de:	81a3      	strh	r3, [r4, #12]
 80074e0:	89a0      	ldrh	r0, [r4, #12]
 80074e2:	4305      	orrs	r5, r0
 80074e4:	81a5      	strh	r5, [r4, #12]
 80074e6:	e7cd      	b.n	8007484 <__smakebuf_r+0x18>
 80074e8:	08006151 	.word	0x08006151

080074ec <memmove>:
 80074ec:	4288      	cmp	r0, r1
 80074ee:	b510      	push	{r4, lr}
 80074f0:	eb01 0402 	add.w	r4, r1, r2
 80074f4:	d902      	bls.n	80074fc <memmove+0x10>
 80074f6:	4284      	cmp	r4, r0
 80074f8:	4623      	mov	r3, r4
 80074fa:	d807      	bhi.n	800750c <memmove+0x20>
 80074fc:	1e43      	subs	r3, r0, #1
 80074fe:	42a1      	cmp	r1, r4
 8007500:	d008      	beq.n	8007514 <memmove+0x28>
 8007502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800750a:	e7f8      	b.n	80074fe <memmove+0x12>
 800750c:	4402      	add	r2, r0
 800750e:	4601      	mov	r1, r0
 8007510:	428a      	cmp	r2, r1
 8007512:	d100      	bne.n	8007516 <memmove+0x2a>
 8007514:	bd10      	pop	{r4, pc}
 8007516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800751a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800751e:	e7f7      	b.n	8007510 <memmove+0x24>

08007520 <_realloc_r>:
 8007520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007524:	4680      	mov	r8, r0
 8007526:	4614      	mov	r4, r2
 8007528:	460e      	mov	r6, r1
 800752a:	b921      	cbnz	r1, 8007536 <_realloc_r+0x16>
 800752c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	4611      	mov	r1, r2
 8007532:	f7fe bf3d 	b.w	80063b0 <_malloc_r>
 8007536:	b92a      	cbnz	r2, 8007544 <_realloc_r+0x24>
 8007538:	f7ff fa04 	bl	8006944 <_free_r>
 800753c:	4625      	mov	r5, r4
 800753e:	4628      	mov	r0, r5
 8007540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007544:	f000 f882 	bl	800764c <_malloc_usable_size_r>
 8007548:	4284      	cmp	r4, r0
 800754a:	4607      	mov	r7, r0
 800754c:	d802      	bhi.n	8007554 <_realloc_r+0x34>
 800754e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007552:	d812      	bhi.n	800757a <_realloc_r+0x5a>
 8007554:	4621      	mov	r1, r4
 8007556:	4640      	mov	r0, r8
 8007558:	f7fe ff2a 	bl	80063b0 <_malloc_r>
 800755c:	4605      	mov	r5, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	d0ed      	beq.n	800753e <_realloc_r+0x1e>
 8007562:	42bc      	cmp	r4, r7
 8007564:	4622      	mov	r2, r4
 8007566:	4631      	mov	r1, r6
 8007568:	bf28      	it	cs
 800756a:	463a      	movcs	r2, r7
 800756c:	f7fe fee9 	bl	8006342 <memcpy>
 8007570:	4631      	mov	r1, r6
 8007572:	4640      	mov	r0, r8
 8007574:	f7ff f9e6 	bl	8006944 <_free_r>
 8007578:	e7e1      	b.n	800753e <_realloc_r+0x1e>
 800757a:	4635      	mov	r5, r6
 800757c:	e7df      	b.n	800753e <_realloc_r+0x1e>

0800757e <_raise_r>:
 800757e:	291f      	cmp	r1, #31
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4604      	mov	r4, r0
 8007584:	460d      	mov	r5, r1
 8007586:	d904      	bls.n	8007592 <_raise_r+0x14>
 8007588:	2316      	movs	r3, #22
 800758a:	6003      	str	r3, [r0, #0]
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	bd38      	pop	{r3, r4, r5, pc}
 8007592:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007594:	b112      	cbz	r2, 800759c <_raise_r+0x1e>
 8007596:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800759a:	b94b      	cbnz	r3, 80075b0 <_raise_r+0x32>
 800759c:	4620      	mov	r0, r4
 800759e:	f000 f831 	bl	8007604 <_getpid_r>
 80075a2:	462a      	mov	r2, r5
 80075a4:	4601      	mov	r1, r0
 80075a6:	4620      	mov	r0, r4
 80075a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ac:	f000 b818 	b.w	80075e0 <_kill_r>
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d00a      	beq.n	80075ca <_raise_r+0x4c>
 80075b4:	1c59      	adds	r1, r3, #1
 80075b6:	d103      	bne.n	80075c0 <_raise_r+0x42>
 80075b8:	2316      	movs	r3, #22
 80075ba:	6003      	str	r3, [r0, #0]
 80075bc:	2001      	movs	r0, #1
 80075be:	e7e7      	b.n	8007590 <_raise_r+0x12>
 80075c0:	2400      	movs	r4, #0
 80075c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075c6:	4628      	mov	r0, r5
 80075c8:	4798      	blx	r3
 80075ca:	2000      	movs	r0, #0
 80075cc:	e7e0      	b.n	8007590 <_raise_r+0x12>
	...

080075d0 <raise>:
 80075d0:	4b02      	ldr	r3, [pc, #8]	; (80075dc <raise+0xc>)
 80075d2:	4601      	mov	r1, r0
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	f7ff bfd2 	b.w	800757e <_raise_r>
 80075da:	bf00      	nop
 80075dc:	2000001c 	.word	0x2000001c

080075e0 <_kill_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d07      	ldr	r5, [pc, #28]	; (8007600 <_kill_r+0x20>)
 80075e4:	2300      	movs	r3, #0
 80075e6:	4604      	mov	r4, r0
 80075e8:	4608      	mov	r0, r1
 80075ea:	4611      	mov	r1, r2
 80075ec:	602b      	str	r3, [r5, #0]
 80075ee:	f7f9 fad5 	bl	8000b9c <_kill>
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	d102      	bne.n	80075fc <_kill_r+0x1c>
 80075f6:	682b      	ldr	r3, [r5, #0]
 80075f8:	b103      	cbz	r3, 80075fc <_kill_r+0x1c>
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	bd38      	pop	{r3, r4, r5, pc}
 80075fe:	bf00      	nop
 8007600:	20004b4c 	.word	0x20004b4c

08007604 <_getpid_r>:
 8007604:	f7f9 bac2 	b.w	8000b8c <_getpid>

08007608 <_fstat_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d07      	ldr	r5, [pc, #28]	; (8007628 <_fstat_r+0x20>)
 800760c:	2300      	movs	r3, #0
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	f7f9 fb20 	bl	8000c5a <_fstat>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d102      	bne.n	8007624 <_fstat_r+0x1c>
 800761e:	682b      	ldr	r3, [r5, #0]
 8007620:	b103      	cbz	r3, 8007624 <_fstat_r+0x1c>
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	bd38      	pop	{r3, r4, r5, pc}
 8007626:	bf00      	nop
 8007628:	20004b4c 	.word	0x20004b4c

0800762c <_isatty_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d06      	ldr	r5, [pc, #24]	; (8007648 <_isatty_r+0x1c>)
 8007630:	2300      	movs	r3, #0
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	602b      	str	r3, [r5, #0]
 8007638:	f7f9 fb1f 	bl	8000c7a <_isatty>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_isatty_r+0x1a>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b103      	cbz	r3, 8007646 <_isatty_r+0x1a>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	20004b4c 	.word	0x20004b4c

0800764c <_malloc_usable_size_r>:
 800764c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007650:	1f18      	subs	r0, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	bfbc      	itt	lt
 8007656:	580b      	ldrlt	r3, [r1, r0]
 8007658:	18c0      	addlt	r0, r0, r3
 800765a:	4770      	bx	lr

0800765c <_init>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	bf00      	nop
 8007660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007662:	bc08      	pop	{r3}
 8007664:	469e      	mov	lr, r3
 8007666:	4770      	bx	lr

08007668 <_fini>:
 8007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766a:	bf00      	nop
 800766c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766e:	bc08      	pop	{r3}
 8007670:	469e      	mov	lr, r3
 8007672:	4770      	bx	lr
